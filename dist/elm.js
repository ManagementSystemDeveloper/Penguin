(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
				var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
				cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
				cornerCurr = cornerNext;

				if (!model.popout.b)
				{
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp($elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view($elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = $elm$browser$Debugger$Main$initialWindowWidth,
		h = $elm$browser$Debugger$Main$initialWindowHeight,
	 	x = screen.width - w,
		y = screen.height - h;

	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.key === 'ArrowUp'   && (popout.a($elm$browser$Debugger$Main$Up  ), event.preventDefault());
		event.key === 'ArrowDown' && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});

	function close() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs && msgs.scrollTop !== 0)
			{
				msgs.scrollTop = 0;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


var _Debugger_scrollTo = F2(function(id, popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msg = popout.b.getElementById(id);
			if (msg)
			{
				msg.scrollIntoView(false);
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});



// UPLOAD


function _Debugger_upload(popout)
{
	return _Scheduler_binding(function(callback)
	{
		var doc = popout.b || document;
		var element = doc.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			doc.body.removeChild(element);
		});
		doc.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return $elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true,
				A2($elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true,
				A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2($elm$browser$Debugger$Expando$Dictionary, true,
				A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true,
				A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return $elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
		}

		return $elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = $elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2($elm$browser$Debugger$Expando$Record, true, dict);
	}

	return $elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === $elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === $elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}



// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}

var $author$project$Main$ChangedUrl = function (a) {
	return {$: 'ChangedUrl', a: a};
};
var $author$project$Main$ClickedLink = function (a) {
	return {$: 'ClickedLink', a: a};
};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var $elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var $elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var $elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var $elm$browser$Debugger$Main$Down = {$: 'Down'};
var $elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var $elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var $elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var $elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var $elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var $elm$browser$Debugger$Main$Up = {$: 'Up'};
var $elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$browser$Debugger$Main$Export = {$: 'Export'};
var $elm$browser$Debugger$Main$Import = {$: 'Import'};
var $elm$browser$Debugger$Main$Open = {$: 'Open'};
var $elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var $elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var $elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var $elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var $elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var $elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var $elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		$elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(name)
			]));
};
var $elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _v1 = items.b;
				var item2 = _v1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					$elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var $elm$browser$Debugger$Overlay$viewProblemType = function (_v0) {
	var name = _v0.name;
	var problems = _v0.problems;
	return A2(
		$elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				$elm$browser$Debugger$Overlay$viewCode(name),
				$elm$html$Html$text(
				' can contain ' + ($elm$browser$Debugger$Overlay$addCommas(
					A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var $elm$browser$Debugger$Overlay$viewBadMetadata = function (_v0) {
	var message = _v0.message;
	var problems = _v0.problems;
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('The '),
					$elm$browser$Debugger$Overlay$viewCode(message),
					$elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/custom_types.html')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('custom types')
						])),
					$elm$html$Html$text(', in your messages. From there, your '),
					$elm$browser$Debugger$Overlay$viewCode('update'),
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var $elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-right', '20px'),
						$elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '60px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var $elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100vw'),
					A2($elm$html$Html$Attributes$style, 'height', '100vh'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'width', '600px'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2($elm$html$Html$Attributes$style, 'height', '80px'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2($elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2($elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id('elm-debugger-details'),
									A2($elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2($elm$html$Html$Attributes$style, 'max-height', 'calc(100vh - 156px)'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							$elm$html$Html$map,
							config.wrap,
							$elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$browser$Debugger$Overlay$viewShape = F4(
	function (x, y, angle, coordinates) {
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'polygon',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'points', coordinates),
					A2(
					$elm$virtual_dom$VirtualDom$attribute,
					'transform',
					'translate(' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + (') rotate(' + ($elm$core$String$fromFloat(-angle) + ')'))))))
				]),
			_List_Nil);
	});
var $elm$browser$Debugger$Overlay$elmLogo = A4(
	$elm$virtual_dom$VirtualDom$nodeNS,
	'http://www.w3.org/2000/svg',
	'svg',
	_List_fromArray(
		[
			A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '-300 -300 600 600'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'width', '24px'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'height', '24px')
		]),
	_List_fromArray(
		[
			A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'g',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'transform', 'scale(1 -1)')
				]),
			_List_fromArray(
				[
					A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, '-198,-66 0,132 198,-66'),
					A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, '-130,0 0,-130 130,0 0,130'),
					A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, '-191,61 69,61 191,-61 -69,-61'),
					A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, '-130,-44 0,86  130,-44'),
					A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, '-130,-44 0,86  130,-44')
				]))
		]));
var $elm$core$String$length = _String_length;
var $elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		var string = $elm$core$String$fromInt(numMsgs);
		var width = $elm$core$String$fromInt(
			2 + $elm$core$String$length(string));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'bottom', '2em'),
					A2($elm$html$Html$Attributes$style, 'right', '2em'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(42px + ' + (width + 'ch)')),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#1293D8'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(config.open)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Overlay$elmLogo,
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(1ch + 6px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '1ch')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))
				]));
	});
var $elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var $elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _v0 = A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Overlay$viewCode,
			$elm$core$List$reverse(tags));
		if (!_v0.b) {
			return $elm$html$Html$text('');
		} else {
			if (!_v0.b.b) {
				var tag = _v0.a;
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(verbed),
							tag,
							$elm$html$Html$text('.')
						]));
			} else {
				if (!_v0.b.b.b) {
					var tag2 = _v0.a;
					var _v1 = _v0.b;
					var tag1 = _v1.a;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(verbed),
								tag1,
								$elm$html$Html$text(' and '),
								tag2,
								$elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _v0.a;
					var otherTags = _v0.b;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									$elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										$elm$html$Html$text(', and '),
										lastTag,
										$elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var $elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2($elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2($elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2($elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? $elm$html$Html$text('') : $elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var $elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						$elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						$elm$browser$Debugger$Overlay$viewCode(old),
						$elm$html$Html$text(' messages, but the new program works with '),
						$elm$browser$Debugger$Overlay$viewCode(_new),
						$elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var $elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? $elm$html$Html$text('') : (isPaused ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('elm-debugger-overlay'),
							A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
							A2($elm$html$Html$Attributes$style, 'top', '0'),
							A2($elm$html$Html$Attributes$style, 'left', '0'),
							A2($elm$html$Html$Attributes$style, 'width', '100vw'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
							A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'color', 'white'),
							A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2($elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							$elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Click to Resume')
								])),
							A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					$elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2($elm$browser$Debugger$Overlay$viewReport, true, report),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2($elm$browser$Debugger$Overlay$viewReport, false, report),
					A2($elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var $elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		$elm$browser$Debugger$Overlay$view,
		{exportHistory: $elm$browser$Debugger$Main$Export, importHistory: $elm$browser$Debugger$Main$Import, open: $elm$browser$Debugger$Main$Open, resume: $elm$browser$Debugger$Main$Resume, wrap: $elm$browser$Debugger$Main$OverlayMsg},
		$elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		$elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$foldr = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var $elm$browser$Debugger$Main$getUserModel = function (model) {
	return $elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var $elm$browser$Debugger$Main$initialWindowHeight = 420;
var $elm$browser$Debugger$Main$initialWindowWidth = 900;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$browser$Debugger$Main$cachedHistory = function (model) {
	var _v0 = model.state;
	if (_v0.$ === 'Running') {
		return model.history;
	} else {
		var history = _v0.e;
		return history;
	}
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$browser$Debugger$Main$DragEnd = {$: 'DragEnd'};
var $elm$browser$Debugger$Main$getDragStatus = function (layout) {
	if (layout.$ === 'Horizontal') {
		var status = layout.a;
		return status;
	} else {
		var status = layout.a;
		return status;
	}
};
var $elm$browser$Debugger$Main$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $elm$browser$Debugger$Main$DragInfo = F5(
	function (x, y, down, width, height) {
		return {down: down, height: height, width: width, x: x, y: y};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$browser$Debugger$Main$decodeDimension = function (field) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'ownerDocument', 'defaultView', field]),
		$elm$json$Json$Decode$float);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$browser$Debugger$Main$onMouseMove = A2(
	$elm$html$Html$Events$on,
	'mousemove',
	A2(
		$elm$json$Json$Decode$map,
		$elm$browser$Debugger$Main$Drag,
		A6(
			$elm$json$Json$Decode$map5,
			$elm$browser$Debugger$Main$DragInfo,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			A2(
				$elm$json$Json$Decode$field,
				'buttons',
				A2(
					$elm$json$Json$Decode$map,
					function (v) {
						return v === 1;
					},
					$elm$json$Json$Decode$int)),
			$elm$browser$Debugger$Main$decodeDimension('innerWidth'),
			$elm$browser$Debugger$Main$decodeDimension('innerHeight'))));
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toDragListeners = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				$elm$browser$Debugger$Main$onMouseMove,
				$elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
			]);
	}
};
var $elm$browser$Debugger$Main$toFlexDirection = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'row';
	} else {
		return 'column-reverse';
	}
};
var $elm$browser$Debugger$Main$DragStart = {$: 'DragStart'};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toPercent = function (fraction) {
	return $elm$core$String$fromFloat(100 * fraction) + '%';
};
var $elm$browser$Debugger$Main$viewDragZone = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2(
					$elm$html$Html$Attributes$style,
					'left',
					$elm$browser$Debugger$Main$toPercent(x)),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '10px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	} else {
		var y = layout.c;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$elm$browser$Debugger$Main$toPercent(y)),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '10px'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	}
};
var $elm$browser$Debugger$Main$TweakExpandoModel = function (a) {
	return {$: 'TweakExpandoModel', a: a};
};
var $elm$browser$Debugger$Main$TweakExpandoMsg = function (a) {
	return {$: 'TweakExpandoMsg', a: a};
};
var $elm$browser$Debugger$Main$toExpandoPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(1 - x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(y));
	}
};
var $elm$browser$Debugger$Main$toMouseBlocker = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return 'auto';
	} else {
		return 'none';
	}
};
var $elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Key = {$: 'Key'};
var $elm$browser$Debugger$Expando$None = {$: 'None'};
var $elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var $elm$browser$Debugger$Expando$Value = {$: 'Value'};
var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var $elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'color', '#777'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2($elm$html$Html$Attributes$style, 'width', '2ch'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(arrow)
			]));
};
var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var $elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return $elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return $elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return $elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2($elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				$elm$core$List$cons,
				arrow,
				A2(
					$elm$core$List$cons,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								$elm$html$Html$text(key)
							])),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(' = '),
						description)));
		}
	});
var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + ($elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + ($elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + ($elm$core$String$fromInt(n) + ')');
		}
	});
var $elm$core$String$slice = _String_slice;
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return ($elm$core$String$length(str) <= 18) ? str : (A2($elm$core$String$left, 8, str) + ('...' + A2($elm$core$String$right, 8, str)));
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + $elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							$elm$html$Html$text('…}')
						]));
			} else {
				var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _v1.a;
				var otherHtmls = _v1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var $elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		$elm$core$String$length(str),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			$elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			$elm$core$Dict$keys(record));
	} else {
		return $elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var $elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				$elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				$elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								$elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					$elm$browser$Debugger$Expando$seqTypeToString,
					$elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + ($elm$core$String$fromInt(
					$elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return $elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					A2($elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + ($elm$core$String$fromInt(
								$elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var $elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				$elm$html$Html$text('{}')
			])) : A3(
		$elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		$elm$core$Dict$toList(record));
};
var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						$elm$html$Html$text(' }')
					]));
		} else {
			var _v1 = entries.a;
			var field = _v1.a;
			var value = _v1.b;
			var rest = entries.b;
			var fieldLen = $elm$core$String$length(field);
			var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _v2.a;
			var valueHtmls = _v2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							$elm$html$Html$text(', … }')
						]));
			} else {
				var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _v3.a;
				var otherHtmls = _v3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' = '),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var $elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var $elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_v7.a.$ === 'Nothing') {
				if (!_v7.b.b) {
					var _v8 = _v7.a;
					return _List_fromArray(
						[
							$elm$html$Html$text('()')
						]);
				} else {
					var _v9 = _v7.a;
					var _v10 = _v7.b;
					var x = _v10.a;
					var xs = _v10.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text('( '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(', '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										$elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_v7.b.b) {
					var name = _v7.a.a;
					return _List_fromArray(
						[
							$elm$html$Html$text(name)
						]);
				} else {
					var name = _v7.a.a;
					var _v11 = _v7.b;
					var x = _v11.a;
					var xs = _v11.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text(name + ' '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(' '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _v4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Nothing,
					A2($elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(isClosed),
						isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _v4.a;
		var openHtml = _v4.b;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			$elm$html$Html$map,
			A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index),
			A2(
				$elm$browser$Debugger$Expando$view,
				$elm$core$Maybe$Just(
					$elm$core$String$fromInt(index)),
				value));
	});
var $elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var $elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + ($elm$core$String$fromInt(
			$elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _v2) {
		var key = _v2.a;
		var value = _v2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('key'),
								key)),
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var $elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var $elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _v1 = isClosed ? _Utils_Tuple3(
			$elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			$elm$html$Html$text(''),
			$elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					$elm$html$Html$text('{')
				]),
			$elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				$elm$html$Html$div,
				$elm$browser$Debugger$Expando$leftPad(
					$elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					])));
		var start = _v1.a;
		var middle = _v1.b;
		var end = _v1.c;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var $elm$browser$Debugger$Expando$viewRecordEntry = function (_v0) {
	var field = _v0.a;
	var value = _v0.b;
	return A2(
		$elm$html$Html$map,
		$elm$browser$Debugger$Expando$Field(field),
		A2(
			$elm$browser$Debugger$Expando$view,
			$elm$core$Maybe$Just(field),
			value));
};
var $elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Expando$viewRecordEntry,
			$elm$core$Dict$toList(record)));
};
var $elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			$elm$browser$Debugger$Expando$seqTypeToString,
			$elm$core$List$length(valueList),
			seqType);
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var $elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var $elm$browser$Debugger$Main$viewExpando = F3(
	function (expandoMsg, expandoModel, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(' + (w + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(' + (h + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'padding', '2em'),
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, '-webkit-user-select', block),
					A2($elm$html$Html$Attributes$style, '-moz-user-select', block),
					A2($elm$html$Html$Attributes$style, '-ms-user-select', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '0 0 1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MESSAGE')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoMsg,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MODEL')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoModel,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
				]));
	});
var $elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$browser$Debugger$Main$toHistoryPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(1 - y));
	}
};
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$browser$Debugger$History$idForMessageIndex = function (index) {
	return 'msg-' + $elm$core$String$fromInt(index);
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(
					$elm$browser$Debugger$History$idForMessageIndex(index)),
					$elm$html$Html$Attributes$class(className),
					$elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(messageName),
							$elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(messageName)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index))
						]))
				]));
	});
var $elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		return _Utils_Tuple2(
			index + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)),
				rest));
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$browser$Debugger$History$maxSnapshotSize = 31;
var $elm$browser$Debugger$History$showMoreButton = function (numMessages) {
	var nextIndex = (numMessages - 1) - ($elm$browser$Debugger$History$maxSnapshotSize * 2);
	var labelText = 'View more messages';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-debugger-entry'),
				$elm$html$Html$Events$onClick(nextIndex)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$title(labelText),
						$elm$html$Html$Attributes$class('elm-debugger-entry-content')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(labelText)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-debugger-entry-index')
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$History$styles = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var $elm$core$Basics$ge = _Utils_ge;
var $elm$browser$Debugger$History$viewSnapshot = F3(
	function (selectedIndex, index, _v0) {
		var messages = _v0.messages;
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$Array$foldr,
				$elm$browser$Debugger$History$consMsg(selectedIndex),
				_Utils_Tuple2(index, _List_Nil),
				messages).b);
	});
var $elm$browser$Debugger$History$consSnapshot = F3(
	function (selectedIndex, snapshot, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		var nextIndex = index + $elm$core$Array$length(snapshot.messages);
		var selectedIndexHelp = ((_Utils_cmp(nextIndex, selectedIndex) > 0) && (_Utils_cmp(selectedIndex, index) > -1)) ? selectedIndex : (-1);
		return _Utils_Tuple2(
			nextIndex,
			A2(
				$elm$core$List$cons,
				A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot),
				rest));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$browser$Debugger$History$viewAllSnapshots = F3(
	function (selectedIndex, startIndex, snapshots) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A3(
				$elm$core$Array$foldl,
				$elm$browser$Debugger$History$consSnapshot(selectedIndex),
				_Utils_Tuple2(startIndex, _List_Nil),
				snapshots).b);
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$browser$Debugger$History$viewRecentSnapshots = F3(
	function (selectedIndex, recentMessagesNum, snapshots) {
		var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
		var arrayLength = $elm$core$Array$length(snapshots);
		var snapshotsToRender = function () {
			var _v0 = _Utils_Tuple2(
				A2($elm$core$Array$get, arrayLength - 2, snapshots),
				A2($elm$core$Array$get, arrayLength - 1, snapshots));
			if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
				var fillerSnapshot = _v0.a.a;
				var recentSnapshot = _v0.b.a;
				return $elm$core$Array$fromList(
					_List_fromArray(
						[
							{
							messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
							model: fillerSnapshot.model
						},
							recentSnapshot
						]));
			} else {
				return snapshots;
			}
		}();
		var startingIndex = ((arrayLength * $elm$browser$Debugger$History$maxSnapshotSize) - $elm$browser$Debugger$History$maxSnapshotSize) - messagesToFill;
		return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
	});
var $elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var recentMessageStartIndex = numMessages - recent.numMessages;
		var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
		var newStuff = A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				$elm$browser$Debugger$History$consMsg(index),
				_Utils_Tuple2(recentMessageStartIndex, _List_Nil),
				recent.messages).b);
		var onlyRenderRecentMessages = (!_Utils_eq(index, -1)) || ($elm$core$Array$length(snapshots) < 2);
		var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(100% - 72px)')
				]),
			A2(
				$elm$core$List$cons,
				$elm$browser$Debugger$History$styles,
				A2(
					$elm$core$List$cons,
					newStuff,
					A2(
						$elm$core$List$cons,
						oldStuff,
						onlyRenderRecentMessages ? _List_Nil : _List_fromArray(
							[
								$elm$browser$Debugger$History$showMoreButton(numMessages)
							])))));
	});
var $elm$browser$Debugger$Main$SwapLayout = {$: 'SwapLayout'};
var $elm$browser$Debugger$Main$toHistoryIcon = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z';
	} else {
		return 'M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z';
	}
};
var $elm$browser$Debugger$Main$icon = function (path) {
	return A4(
		$elm$virtual_dom$VirtualDom$nodeNS,
		'http://www.w3.org/2000/svg',
		'svg',
		_List_fromArray(
			[
				A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '0 0 16 16'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'width', '16px'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'height', '16px')
			]),
		_List_fromArray(
			[
				A4(
				$elm$virtual_dom$VirtualDom$nodeNS,
				'http://www.w3.org/2000/svg',
				'path',
				_List_fromArray(
					[
						A2($elm$virtual_dom$VirtualDom$attribute, 'd', path)
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$Main$viewHistoryButton = F3(
	function (label, msg, path) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'background', 'none'),
					A2($elm$html$Html$Attributes$style, 'border', 'none'),
					A2($elm$html$Html$Attributes$style, 'color', 'inherit'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Main$icon(path),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', '6px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $elm$browser$Debugger$Main$viewHistoryOptions = function (layout) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				A3(
				$elm$browser$Debugger$Main$viewHistoryButton,
				'Swap Layout',
				$elm$browser$Debugger$Main$SwapLayout,
				$elm$browser$Debugger$Main$toHistoryIcon(layout)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between')
					]),
				_List_fromArray(
					[
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Import', $elm$browser$Debugger$Main$Import, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z'),
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Export', $elm$browser$Debugger$Main$Export, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z')
					]))
			]));
};
var $elm$browser$Debugger$Main$SliderJump = function (a) {
	return {$: 'SliderJump', a: a};
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$browser$Debugger$Main$isPlaying = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$core$String$toInt = _String_toInt;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $elm$browser$Debugger$Main$viewPlayButton = function (playing) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background', '#1293D8'),
				A2($elm$html$Html$Attributes$style, 'border', 'none'),
				A2($elm$html$Html$Attributes$style, 'color', 'white'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				A2($elm$html$Html$Attributes$style, 'width', '36px'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				$elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
			]),
		_List_fromArray(
			[
				playing ? $elm$browser$Debugger$Main$icon('M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z') : $elm$browser$Debugger$Main$icon('M2 2l12 7l-12 7z')
			]));
};
var $elm$browser$Debugger$Main$viewHistorySlider = F2(
	function (history, maybeIndex) {
		var lastIndex = $elm$browser$Debugger$History$size(history) - 1;
		var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Lazy$lazy,
					$elm$browser$Debugger$Main$viewPlayButton,
					$elm$browser$Debugger$Main$isPlaying(maybeIndex)),
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('range'),
							A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 56px)'),
							A2($elm$html$Html$Attributes$style, 'height', '36px'),
							A2($elm$html$Html$Attributes$style, 'margin', '0 10px'),
							$elm$html$Html$Attributes$min('0'),
							$elm$html$Html$Attributes$max(
							$elm$core$String$fromInt(lastIndex)),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(selectedIndex)),
							$elm$html$Html$Events$onInput(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toInt,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(lastIndex),
									$elm$browser$Debugger$Main$SliderJump)))
						]),
					_List_Nil)
				]));
	});
var $elm$browser$Debugger$Main$viewHistory = F3(
	function (maybeIndex, history, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', w),
					A2($elm$html$Html$Attributes$style, 'height', h),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
					A2($elm$html$Html$Attributes$style, 'color', '#DDDDDD'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2($elm$browser$Debugger$Main$viewHistorySlider, history, maybeIndex),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$Jump,
					A2($elm$browser$Debugger$History$view, maybeIndex, history)),
					A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
				]));
	});
var $elm$browser$Debugger$Main$popoutView = function (model) {
	var maybeIndex = function () {
		var _v0 = model.state;
		if (_v0.$ === 'Running') {
			return $elm$core$Maybe$Nothing;
		} else {
			var index = _v0.a;
			return $elm$core$Maybe$Just(index);
		}
	}();
	var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
	return A3(
		$elm$html$Html$node,
		'body',
		_Utils_ap(
			$elm$browser$Debugger$Main$toDragListeners(model.layout),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'padding', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2(
					$elm$html$Html$Attributes$style,
					'flex-direction',
					$elm$browser$Debugger$Main$toFlexDirection(model.layout))
				])),
		_List_fromArray(
			[
				A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
				$elm$browser$Debugger$Main$viewDragZone(model.layout),
				A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
			]));
};
var $elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var $elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return $elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return $elm$browser$Debugger$Overlay$BlockMost;
			default:
				return $elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var $elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		$elm$browser$Debugger$Overlay$toBlockerType,
		$elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var $elm$browser$Debugger$Main$Horizontal = F3(
	function (a, b, c) {
		return {$: 'Horizontal', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $elm$browser$Debugger$Main$Static = {$: 'Static'};
var $elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var $elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var $elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$browser$Debugger$Metadata$decodeAlias = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Alias,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $elm$browser$Debugger$Metadata$decodeUnion = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Union,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$browser$Debugger$Metadata$decodeTypes = A4(
	$elm$json$Json$Decode$map3,
	$elm$browser$Debugger$Metadata$Types,
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
var $elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var $elm$browser$Debugger$Metadata$decodeVersions = A2(
	$elm$json$Json$Decode$map,
	$elm$browser$Debugger$Metadata$Versions,
	A2($elm$json$Json$Decode$field, 'elm', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$decoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Metadata,
	A2($elm$json$Json$Decode$field, 'versions', $elm$browser$Debugger$Metadata$decodeVersions),
	A2($elm$json$Json$Decode$field, 'types', $elm$browser$Debugger$Metadata$decodeTypes));
var $elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$String$contains = _String_contains;
var $elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _v0) {
		var problem = _v0.a;
		var token = _v0.b;
		return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
	});
var $elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var $elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var $elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var $elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var $elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var $elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var $elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var $elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var $elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		$elm$core$List$filterMap,
		$elm$browser$Debugger$Metadata$hasProblem(tipe),
		$elm$browser$Debugger$Metadata$problemTable);
};
var $elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _v0, list) {
		var tipe = _v0.tipe;
		var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _v0, list) {
		var tags = _v0.tags;
		var _v1 = A2(
			$elm$core$List$concatMap,
			$elm$browser$Debugger$Metadata$findProblems,
			$elm$core$List$concat(
				$elm$core$Dict$values(tags)));
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$browser$Debugger$Metadata$isPortable = function (_v0) {
	var types = _v0.types;
	var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var problems = _v1;
		return $elm$core$Maybe$Just(
			A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var $elm$browser$Debugger$Metadata$decode = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _v0.a;
		var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Ok(metadata);
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	}
};
var $elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var $elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var $elm$browser$Debugger$History$empty = function (model) {
	return A3(
		$elm$browser$Debugger$History$History,
		$elm$core$Array$empty,
		A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						items)) : (($elm$core$List$length(items) <= 8) ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								k,
								A2($elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : (($elm$core$List$length(keyValuePairs) <= 8) ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Record,
					false,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, v) {
								return A2($elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : (($elm$core$Dict$size(entries) <= 4) ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						args)) : (($elm$core$List$length(args) <= 4) ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var $elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		$elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$browser$Debugger$Overlay$None = {$: 'None'};
var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
var $elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _v0 = init(flags);
		var userModel = _v0.a;
		var userCommands = _v0.b;
		return _Utils_Tuple2(
			{
				expandoModel: $elm$browser$Debugger$Expando$init(userModel),
				expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
				history: $elm$browser$Debugger$History$empty(userModel),
				layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
				metadata: $elm$browser$Debugger$Metadata$decode(metadata),
				overlay: $elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: $elm$browser$Debugger$Main$Running(userModel)
			},
			A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var $elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			$elm$core$Platform$Sub$map,
			$elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				$elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var $elm$browser$Debugger$Main$Moving = {$: 'Moving'};
var $elm$browser$Debugger$Main$Paused = F5(
	function (a, b, c, d, e) {
		return {$: 'Paused', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var $elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _v0) {
		var model = _v0.model;
		var messages = _v0.messages;
		var numMessages = _v0.numMessages;
		return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			$elm$core$Maybe$Just(
				A2(
					$elm$browser$Debugger$History$Snapshot,
					model,
					$elm$core$Array$fromList(messages))),
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				model,
				A2($elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$browser$Debugger$History$add = F3(
	function (msg, model, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_v1.a.$ === 'Just') {
			var snapshot = _v1.a.a;
			var newRecent = _v1.b;
			return A3(
				$elm$browser$Debugger$History$History,
				A2($elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _v2 = _v1.a;
			var newRecent = _v1.b;
			return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var $elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var $elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var $elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var $elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			$elm$core$List$cons,
			$elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var $elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var $elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2($elm$core$List$cons, tag, changes.added)
			});
	});
var $elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2($elm$core$List$cons, tag, changes.changed)
			});
	});
var $elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var $elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var $elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2($elm$core$List$cons, tag, changes.removed)
			});
	});
var $elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			$elm$core$Dict$merge,
			$elm$browser$Debugger$Metadata$removeTag,
			$elm$browser$Debugger$Metadata$checkTag,
			$elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			$elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			$elm$core$List$cons,
			A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var $elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var $elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(
			A6(
				$elm$core$Dict$merge,
				$elm$browser$Debugger$Metadata$ignore,
				$elm$browser$Debugger$Metadata$checkUnion,
				$elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var $elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var $elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var $elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var $elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Report$some = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return $elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || ($elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed))) ? $elm$browser$Debugger$Report$Impossible : ($elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine);
	}
};
var $elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _v1 = statusList.a;
						return $elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _v2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = $elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _v3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var $elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return $elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return $elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return $elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				$elm$browser$Debugger$Report$worstCase,
				$elm$browser$Debugger$Report$Fine,
				A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $elm$browser$Debugger$Overlay$uploadDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2($elm$json$Json$Decode$field, 'metadata', $elm$browser$Debugger$Metadata$decoder),
	A2($elm$json$Json$Decode$field, 'history', $elm$json$Json$Decode$value));
var $elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _v1 = _v0.a;
			var foreignMetadata = _v1.a;
			var rawHistory = _v1.b;
			var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _v2 = $elm$browser$Debugger$Report$evaluate(report);
			switch (_v2.$) {
				case 'Impossible':
					return $elm$core$Result$Err(
						$elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return $elm$core$Result$Err(
						A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return $elm$core$Result$Ok(rawHistory);
			}
		}
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return $elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return $elm$core$Maybe$Nothing;
			case 'BadImport':
				return $elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$browser$Debugger$History$encode = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$browser$Debugger$History$elmToJs,
		A3(
			$elm$core$Array$foldr,
			$elm$browser$Debugger$History$encodeHelp,
			$elm$core$List$reverse(recent.messages),
			snapshots));
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$browser$Debugger$Metadata$encodeAlias = function (_v0) {
	var args = _v0.args;
	var tipe = _v0.tipe;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(tipe))
			]));
};
var $elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return $elm$json$Json$Encode$object(
			$elm$core$Dict$toList(
				A2(
					$elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var $elm$browser$Debugger$Metadata$encodeUnion = function (_v0) {
	var args = _v0.args;
	var tags = _v0.tags;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					$elm$browser$Debugger$Metadata$encodeDict,
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					tags))
			]));
};
var $elm$browser$Debugger$Metadata$encodeTypes = function (_v0) {
	var message = _v0.message;
	var unions = _v0.unions;
	var aliases = _v0.aliases;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				$elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var $elm$browser$Debugger$Metadata$encodeVersions = function (_v0) {
	var elm = _v0.elm;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				$elm$json$Json$Encode$string(elm))
			]));
};
var $elm$browser$Debugger$Metadata$encode = function (_v0) {
	var versions = _v0.versions;
	var types = _v0.types;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				$elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				$elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var historyLength = $elm$browser$Debugger$History$size(history);
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return $elm$browser$Debugger$Main$NoOp;
			},
			A2(
				_Debugger_download,
				historyLength,
				_Json_unwrap(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'metadata',
								$elm$browser$Debugger$Metadata$encode(metadata)),
								_Utils_Tuple2(
								'history',
								$elm$browser$Debugger$History$encode(history))
							])))));
	});
var $elm$browser$Debugger$Main$Vertical = F3(
	function (a, b, c) {
		return {$: 'Vertical', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$drag = F2(
	function (info, layout) {
		if (layout.$ === 'Horizontal') {
			var status = layout.a;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
		} else {
			var status = layout.a;
			var x = layout.b;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
		}
	});
var $elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var $elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				$elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				$elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var $elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var $elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return $elm$browser$Debugger$History$undone(
					A3(
						$elm$core$List$foldr,
						$elm$browser$Debugger$History$getHelp(update),
						A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _v0 = A2($elm$core$Array$get, (index / $elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_v0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _v0.a.model;
					var messages = _v0.a.messages;
					return $elm$browser$Debugger$History$undone(
						A3(
							$elm$core$Array$foldr,
							$elm$browser$Debugger$History$getHelp(update),
							A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var $elm$browser$Debugger$History$getRecentMsg = function (history) {
	getRecentMsg:
	while (true) {
		var _v0 = history.recent.messages;
		if (!_v0.b) {
			var $temp$history = history;
			history = $temp$history;
			continue getRecentMsg;
		} else {
			var first = _v0.a;
			return first;
		}
	}
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _v12 = A2($elm$core$Dict$get, key, oldDict);
		if (_v12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _v12.a;
			return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var $elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _v3 = _Utils_Tuple2(old, _new);
		_v3$6:
		while (true) {
			switch (_v3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_v3.a.$ === 'Sequence') {
						var _v4 = _v3.a;
						var isClosed = _v4.b;
						var oldValues = _v4.c;
						var _v5 = _v3.b;
						var seqType = _v5.a;
						var newValues = _v5.c;
						return A3(
							$elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
				case 'Dictionary':
					if (_v3.a.$ === 'Dictionary') {
						var _v6 = _v3.a;
						var isClosed = _v6.a;
						var _v7 = _v3.b;
						var keyValuePairs = _v7.b;
						return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _v3$6;
					}
				case 'Record':
					if (_v3.a.$ === 'Record') {
						var _v8 = _v3.a;
						var isClosed = _v8.a;
						var oldDict = _v8.b;
						var _v9 = _v3.b;
						var newDict = _v9.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								$elm$core$Dict$map,
								$elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _v3$6;
					}
				default:
					if (_v3.a.$ === 'Constructor') {
						var _v10 = _v3.a;
						var isClosed = _v10.b;
						var oldValues = _v10.c;
						var _v11 = _v3.b;
						var maybeName = _v11.a;
						var newValues = _v11.c;
						return A3(
							$elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
			}
		}
		return _new;
	});
var $elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _v0 = _Utils_Tuple2(olds, news);
		if (!_v0.a.b) {
			return news;
		} else {
			if (!_v0.b.b) {
				return news;
			} else {
				var _v1 = _v0.a;
				var x = _v1.a;
				var xs = _v1.b;
				var _v2 = _v0.b;
				var y = _v2.a;
				var ys = _v2.b;
				return A2(
					$elm$core$List$cons,
					A2($elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var $elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			$elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var $elm$browser$Debugger$Main$jumpUpdate = F3(
	function (update, index, model) {
		var history = $elm$browser$Debugger$Main$cachedHistory(model);
		var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history);
		var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
		var _v0 = A3($elm$browser$Debugger$History$get, update, index, history);
		var indexModel = _v0.a;
		var indexMsg = _v0.b;
		return _Utils_update(
			model,
			{
				expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
				expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
				state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history)
			});
	});
var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _v0) {
				var model = _v0.a;
				var history = _v0.b;
				var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3($elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				$elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					$elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			$elm$json$Json$Decode$map,
			updateModel,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$value));
	});
var $elm$browser$Debugger$History$getInitialModel = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	var _v1 = A2($elm$core$Array$get, 0, snapshots);
	if (_v1.$ === 'Just') {
		var model = _v1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_v0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: $elm$browser$Debugger$Overlay$corruptImport}),
				$elm$core$Platform$Cmd$none);
		} else {
			var _v1 = _v0.a;
			var latestUserModel = _v1.a;
			var newHistory = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
						expandoMsg: $elm$browser$Debugger$Expando$init(
							$elm$browser$Debugger$History$getRecentMsg(newHistory)),
						history: newHistory,
						overlay: $elm$browser$Debugger$Overlay$none,
						state: $elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var $elm$browser$Debugger$Main$scrollTo = F2(
	function (id, popout) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
			A2(_Debugger_scrollTo, id, popout));
	});
var $elm$browser$Debugger$Main$setDragStatus = F2(
	function (status, layout) {
		if (layout.$ === 'Horizontal') {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
		} else {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
		}
	});
var $elm$browser$Debugger$Main$swapLayout = function (layout) {
	if (layout.$ === 'Horizontal') {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
	} else {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				$elm$core$List$cons,
				func(x),
				xs) : A2(
				$elm$core$List$cons,
				x,
				A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var $elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v6) {
											var k = _v6.a;
											var v = _v6.b;
											return _Utils_Tuple2(
												A2($elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v7) {
											var k = _v7.a;
											var v = _v7.b;
											return _Utils_Tuple2(
												k,
												A2($elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								$elm$core$Dict$update,
								field,
								$elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var $elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return $elm$core$Maybe$Just(
				A2($elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var $elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var $elm$browser$Debugger$Main$upload = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$browser$Debugger$Main$Upload,
		_Debugger_upload(popout));
};
var $elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
var $elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _v0 = model.metadata;
		if (_v0.$ === 'Ok') {
			var metadata = _v0.a;
			return func(metadata);
		} else {
			var error = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _v1 = A2(update, userMsg, userModel);
					var newUserModel = _v1.a;
					var userCmds = _v1.b;
					var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
					var _v2 = model.state;
					if (_v2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									history: newHistory,
									state: $elm$browser$Debugger$Main$Running(newUserModel)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										$elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _v2.a;
						var indexModel = _v2.b;
						var history = _v2.e;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history)
								}),
							commands);
					}
				case 'TweakExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
							}),
						$elm$core$Platform$Cmd$none);
				case 'TweakExpandoModel':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Resume':
					var _v3 = model.state;
					if (_v3.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var userModel = _v3.c;
						var userMsg = _v3.d;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									state: $elm$browser$Debugger$Main$Running(userModel)
								}),
							$elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						$elm$core$Platform$Cmd$none);
				case 'SliderJump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						A2(
							$elm$browser$Debugger$Main$scrollTo,
							$elm$browser$Debugger$History$idForMessageIndex(index),
							model.popout));
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
							_Debugger_open(model.popout)));
				case 'Up':
					var _v4 = model.state;
					if (_v4.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var i = _v4.a;
						var history = _v4.e;
						var targetIndex = i + 1;
						if (_Utils_cmp(
							targetIndex,
							$elm$browser$Debugger$History$size(history)) < 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Down':
					var _v5 = model.state;
					if (_v5.$ === 'Running') {
						var $temp$update = update,
							$temp$msg = $elm$browser$Debugger$Main$Jump(
							$elm$browser$Debugger$History$size(model.history) - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						var index = _v5.a;
						if (index > 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 'Import':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_v6) {
							return _Utils_Tuple2(
								model,
								$elm$browser$Debugger$Main$upload(model.popout));
						});
				case 'Export':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2($elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_v7.$ === 'Err') {
								var newOverlay = _v7.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									$elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _v7.a;
								return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				case 'OverlayMsg':
					var overlayMsg = msg.a;
					var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_v8.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: $elm$browser$Debugger$Overlay$none}),
							$elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _v8.a;
						return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
				case 'SwapLayout':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'DragStart':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Drag':
					var info = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$browser$Browser$application = _Browser_application;
var $author$project$Main$Model = F4(
	function (url, key, shared, page) {
		return {key: key, page: page, shared: shared, url: url};
	});
var $author$project$Main$Page = function (a) {
	return {$: 'Page', a: a};
};
var $author$project$Main$Shared = function (a) {
	return {$: 'Shared', a: a};
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Tuple$mapBoth = F3(
	function (funcA, funcB, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			funcA(x),
			funcB(y));
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $ryannhg$elm_spa$ElmSpa$Request$query = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Dict$empty;
	} else {
		var decode = function (val) {
			return A2(
				$elm$core$Maybe$withDefault,
				val,
				$elm$url$Url$percentDecode(val));
		};
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				A2($elm$core$Tuple$mapBoth, decode, decode),
				A2(
					$elm$core$List$filterMap,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$split('='),
						function (eq) {
							return A3(
								$elm$core$Maybe$map2,
								$elm$core$Tuple$pair,
								$elm$core$List$head(eq),
								$elm$core$Maybe$Just(
									A2(
										$elm$core$Maybe$withDefault,
										'',
										$elm$core$List$head(
											A2($elm$core$List$drop, 1, eq)))));
						}),
					A2($elm$core$String$split, '&', str))));
	}
};
var $ryannhg$elm_spa$ElmSpa$Request$create = F4(
	function (route, params, url, key) {
		return {
			key: key,
			params: params,
			query: A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Dict$empty,
				A2($elm$core$Maybe$map, $ryannhg$elm_spa$ElmSpa$Request$query, url.query)),
			route: route,
			url: url
		};
	});
var $author$project$Gen$Route$NotFound = {$: 'NotFound'};
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return $elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var parser = _v0.a;
					return parser(state);
				},
				parsers);
		});
};
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $author$project$Gen$Route$Electronics = {$: 'Electronics'};
var $author$project$Gen$Route$Home_ = {$: 'Home_'};
var $author$project$Gen$Route$Ip = {$: 'Ip'};
var $author$project$Gen$Route$Newsroom = {$: 'Newsroom'};
var $author$project$Gen$Route$Obsolescence = {$: 'Obsolescence'};
var $author$project$Gen$Route$Oil = {$: 'Oil'};
var $author$project$Gen$Route$Papers = {$: 'Papers'};
var $author$project$Gen$Route$Rnd = {$: 'Rnd'};
var $author$project$Gen$Route$Terms = {$: 'Terms'};
var $author$project$Gen$Route$Whoweare = {$: 'Whoweare'};
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.visited;
		var unvisited = _v0.unvisited;
		var params = _v0.params;
		var frag = _v0.frag;
		var value = _v0.value;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0.a;
		return $elm$url$Url$Parser$Parser(
			function (_v1) {
				var visited = _v1.visited;
				var unvisited = _v1.unvisited;
				var params = _v1.params;
				var frag = _v1.frag;
				var value = _v1.value;
				return A2(
					$elm$core$List$map,
					$elm$url$Url$Parser$mapState(value),
					parseArg(
						A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var $elm$url$Url$Parser$s = function (str) {
	return $elm$url$Url$Parser$Parser(
		function (_v0) {
			var visited = _v0.visited;
			var unvisited = _v0.unvisited;
			var params = _v0.params;
			var frag = _v0.frag;
			var value = _v0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						$elm$url$Url$Parser$State,
						A2($elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var $author$project$Gen$Params$Electronics$parser = $elm$url$Url$Parser$s('electronics');
var $elm$url$Url$Parser$top = $elm$url$Url$Parser$Parser(
	function (state) {
		return _List_fromArray(
			[state]);
	});
var $author$project$Gen$Params$Home_$parser = $elm$url$Url$Parser$top;
var $author$project$Gen$Params$Ip$parser = $elm$url$Url$Parser$s('ip');
var $author$project$Gen$Params$Newsroom$parser = $elm$url$Url$Parser$s('newsroom');
var $author$project$Gen$Params$NotFound$parser = $elm$url$Url$Parser$s('not-found');
var $author$project$Gen$Params$Obsolescence$parser = $elm$url$Url$Parser$s('obsolescence');
var $author$project$Gen$Params$Oil$parser = $elm$url$Url$Parser$s('oil');
var $author$project$Gen$Params$Papers$parser = $elm$url$Url$Parser$s('papers');
var $author$project$Gen$Params$Rnd$parser = $elm$url$Url$Parser$s('rnd');
var $author$project$Gen$Params$Terms$parser = $elm$url$Url$Parser$s('terms');
var $author$project$Gen$Params$Whoweare$parser = $elm$url$Url$Parser$s('whoweare');
var $author$project$Gen$Route$routes = _List_fromArray(
	[
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Home_, $author$project$Gen$Params$Home_$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Electronics, $author$project$Gen$Params$Electronics$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Ip, $author$project$Gen$Params$Ip$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Newsroom, $author$project$Gen$Params$Newsroom$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$NotFound, $author$project$Gen$Params$NotFound$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Obsolescence, $author$project$Gen$Params$Obsolescence$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Oil, $author$project$Gen$Params$Oil$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Papers, $author$project$Gen$Params$Papers$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Rnd, $author$project$Gen$Params$Rnd$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Terms, $author$project$Gen$Params$Terms$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Whoweare, $author$project$Gen$Params$Whoweare$parser)
	]);
var $author$project$Gen$Route$fromUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$Parser$parse(
		$elm$url$Url$Parser$oneOf($author$project$Gen$Route$routes)),
	$elm$core$Maybe$withDefault($author$project$Gen$Route$NotFound));
var $author$project$Request$create = F3(
	function (params, url, key) {
		return A4(
			$ryannhg$elm_spa$ElmSpa$Request$create,
			$author$project$Gen$Route$fromUrl(url),
			params,
			url,
			key);
	});
var $author$project$Gen$Model$Electronics = F2(
	function (a, b) {
		return {$: 'Electronics', a: a, b: b};
	});
var $author$project$Gen$Msg$Electronics = function (a) {
	return {$: 'Electronics', a: a};
};
var $author$project$Gen$Model$Home_ = F2(
	function (a, b) {
		return {$: 'Home_', a: a, b: b};
	});
var $author$project$Gen$Msg$Home_ = function (a) {
	return {$: 'Home_', a: a};
};
var $author$project$Gen$Model$Ip = F2(
	function (a, b) {
		return {$: 'Ip', a: a, b: b};
	});
var $author$project$Gen$Msg$Ip = function (a) {
	return {$: 'Ip', a: a};
};
var $author$project$Gen$Model$Newsroom = F2(
	function (a, b) {
		return {$: 'Newsroom', a: a, b: b};
	});
var $author$project$Gen$Msg$Newsroom = function (a) {
	return {$: 'Newsroom', a: a};
};
var $author$project$Gen$Model$NotFound = F2(
	function (a, b) {
		return {$: 'NotFound', a: a, b: b};
	});
var $author$project$Gen$Msg$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $author$project$Gen$Model$Obsolescence = F2(
	function (a, b) {
		return {$: 'Obsolescence', a: a, b: b};
	});
var $author$project$Gen$Msg$Obsolescence = function (a) {
	return {$: 'Obsolescence', a: a};
};
var $author$project$Gen$Model$Oil = F2(
	function (a, b) {
		return {$: 'Oil', a: a, b: b};
	});
var $author$project$Gen$Msg$Oil = function (a) {
	return {$: 'Oil', a: a};
};
var $author$project$Gen$Model$Papers = F2(
	function (a, b) {
		return {$: 'Papers', a: a, b: b};
	});
var $author$project$Gen$Msg$Papers = function (a) {
	return {$: 'Papers', a: a};
};
var $author$project$Gen$Model$Rnd = F2(
	function (a, b) {
		return {$: 'Rnd', a: a, b: b};
	});
var $author$project$Gen$Msg$Rnd = function (a) {
	return {$: 'Rnd', a: a};
};
var $author$project$Gen$Model$Terms = F2(
	function (a, b) {
		return {$: 'Terms', a: a, b: b};
	});
var $author$project$Gen$Msg$Terms = function (a) {
	return {$: 'Terms', a: a};
};
var $author$project$Gen$Model$Whoweare = F2(
	function (a, b) {
		return {$: 'Whoweare', a: a, b: b};
	});
var $author$project$Gen$Msg$Whoweare = function (a) {
	return {$: 'Whoweare', a: a};
};
var $author$project$Gen$Model$Redirecting_ = {$: 'Redirecting_'};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
var $ryannhg$elm_spa$ElmSpa$Page$toResult = F3(
	function (toPage, shared, req) {
		var _v0 = A2(toPage, shared, req);
		var toResult_ = _v0.a;
		return A2(
			toResult_,
			shared,
			A4($ryannhg$elm_spa$ElmSpa$Request$create, req.route, _Utils_Tuple0, req.url, req.key));
	});
var $ryannhg$elm_spa$ElmSpa$Page$bundle = function (_v0) {
	var redirecting = _v0.redirecting;
	var toRoute = _v0.toRoute;
	var toUrl = _v0.toUrl;
	var fromCmd = _v0.fromCmd;
	var mapEffect = _v0.mapEffect;
	var mapView = _v0.mapView;
	var page = _v0.page;
	var toModel = _v0.toModel;
	var toMsg = _v0.toMsg;
	return {
		init: F4(
			function (params, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v1 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (_v1.$ === 'Ok') {
					var record = _v1.a;
					return A3(
						$elm$core$Tuple$mapBoth,
						toModel(req.params),
						mapEffect,
						record.init(_Utils_Tuple0));
				} else {
					var route = _v1.a;
					return _Utils_Tuple2(
						redirecting.model,
						fromCmd(
							A2(
								$elm$browser$Browser$Navigation$replaceUrl,
								req.key,
								toUrl(route))));
				}
			}),
		subscriptions: F5(
			function (params, model, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v2 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (_v2.$ === 'Ok') {
					var record = _v2.a;
					return A2(
						$elm$core$Platform$Sub$map,
						toMsg,
						record.subscriptions(model));
				} else {
					return $elm$core$Platform$Sub$none;
				}
			}),
		update: F6(
			function (params, msg, model, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v3 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (_v3.$ === 'Ok') {
					var record = _v3.a;
					return A3(
						$elm$core$Tuple$mapBoth,
						toModel(req.params),
						mapEffect,
						A2(record.update, msg, model));
				} else {
					var route = _v3.a;
					return _Utils_Tuple2(
						redirecting.model,
						fromCmd(
							A2(
								$elm$browser$Browser$Navigation$replaceUrl,
								req.key,
								toUrl(route))));
				}
			}),
		view: F5(
			function (params, model, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v4 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (_v4.$ === 'Ok') {
					var record = _v4.a;
					return mapView(
						record.view(model));
				} else {
					return redirecting.view;
				}
			})
	};
};
var $author$project$Effect$Cmd = function (a) {
	return {$: 'Cmd', a: a};
};
var $author$project$Effect$fromCmd = $author$project$Effect$Cmd;
var $author$project$Effect$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $author$project$Effect$None = {$: 'None'};
var $author$project$Effect$Shared = function (a) {
	return {$: 'Shared', a: a};
};
var $author$project$Effect$map = F2(
	function (fn, effect) {
		switch (effect.$) {
			case 'None':
				return $author$project$Effect$None;
			case 'Cmd':
				var cmd = effect.a;
				return $author$project$Effect$Cmd(
					A2($elm$core$Platform$Cmd$map, fn, cmd));
			case 'Shared':
				var msg = effect.a;
				return $author$project$Effect$Shared(msg);
			default:
				var list = effect.a;
				return $author$project$Effect$Batch(
					A2(
						$elm$core$List$map,
						$author$project$Effect$map(fn),
						list));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$mapAttribute = $mdgriffith$elm_ui$Internal$Model$mapAttr;
var $author$project$View$map = F2(
	function (fn, view) {
		return {
			attributes: A2(
				$elm$core$List$map,
				$mdgriffith$elm_ui$Element$mapAttribute(fn),
				view.attributes),
			element: A2($mdgriffith$elm_ui$Element$map, fn, view.element),
			title: view.title
		};
	});
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$View$placeholder = function (str) {
	return {
		attributes: _List_Nil,
		element: $mdgriffith$elm_ui$Element$text(str),
		title: str
	};
};
var $author$project$View$none = $author$project$View$placeholder('');
var $author$project$Gen$Route$toHref = function (route) {
	var joinAsHref = function (segments) {
		return '/' + A2($elm$core$String$join, '/', segments);
	};
	switch (route.$) {
		case 'Electronics':
			return joinAsHref(
				_List_fromArray(
					['electronics']));
		case 'Home_':
			return joinAsHref(_List_Nil);
		case 'Ip':
			return joinAsHref(
				_List_fromArray(
					['ip']));
		case 'Newsroom':
			return joinAsHref(
				_List_fromArray(
					['newsroom']));
		case 'NotFound':
			return joinAsHref(
				_List_fromArray(
					['not-found']));
		case 'Obsolescence':
			return joinAsHref(
				_List_fromArray(
					['obsolescence']));
		case 'Oil':
			return joinAsHref(
				_List_fromArray(
					['oil']));
		case 'Papers':
			return joinAsHref(
				_List_fromArray(
					['papers']));
		case 'Rnd':
			return joinAsHref(
				_List_fromArray(
					['rnd']));
		case 'Terms':
			return joinAsHref(
				_List_fromArray(
					['terms']));
		default:
			return joinAsHref(
				_List_fromArray(
					['whoweare']));
	}
};
var $author$project$Gen$Pages$bundle = F3(
	function (page, toModel, toMsg) {
		return $ryannhg$elm_spa$ElmSpa$Page$bundle(
			{
				fromCmd: $author$project$Effect$fromCmd,
				mapEffect: $author$project$Effect$map(toMsg),
				mapView: $author$project$View$map(toMsg),
				page: page,
				redirecting: {model: $author$project$Gen$Model$Redirecting_, view: $author$project$View$none},
				toModel: toModel,
				toMsg: toMsg,
				toRoute: $author$project$Gen$Route$fromUrl,
				toUrl: $author$project$Gen$Route$toHref
			});
	});
var $ryannhg$elm_spa$ElmSpa$Page$Page = function (a) {
	return {$: 'Page', a: a};
};
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $ryannhg$elm_spa$ElmSpa$Page$adapters = {
	advanced: function (page) {
		return {
			init: $elm$core$Basics$always(page.init),
			subscriptions: page.subscriptions,
			update: page.update,
			view: page.view
		};
	},
	element: F2(
		function (fromCmd, page) {
			return {
				init: function (_v0) {
					return A2($elm$core$Tuple$mapSecond, fromCmd, page.init);
				},
				subscriptions: page.subscriptions,
				update: F2(
					function (msg, model) {
						return A2(
							$elm$core$Tuple$mapSecond,
							fromCmd,
							A2(page.update, msg, model));
					}),
				view: page.view
			};
		}),
	sandbox: F2(
		function (none, page) {
			return {
				init: function (_v1) {
					return _Utils_Tuple2(page.init, none);
				},
				subscriptions: function (_v2) {
					return $elm$core$Platform$Sub$none;
				},
				update: F2(
					function (msg, model) {
						return _Utils_Tuple2(
							A2(page.update, msg, model),
							none);
					}),
				view: page.view
			};
		}),
	_static: F2(
		function (none, page) {
			return {
				init: function (_v3) {
					return _Utils_Tuple2(_Utils_Tuple0, none);
				},
				subscriptions: function (_v4) {
					return $elm$core$Platform$Sub$none;
				},
				update: F2(
					function (_v5, _v6) {
						return _Utils_Tuple2(_Utils_Tuple0, none);
					}),
				view: function (_v7) {
					return page.view;
				}
			};
		})
};
var $ryannhg$elm_spa$ElmSpa$Page$advanced = function (page) {
	return $ryannhg$elm_spa$ElmSpa$Page$Page(
		F2(
			function (_v0, _v1) {
				return $elm$core$Result$Ok(
					$ryannhg$elm_spa$ElmSpa$Page$adapters.advanced(page));
			}));
};
var $author$project$Page$advanced = $ryannhg$elm_spa$ElmSpa$Page$advanced;
var $author$project$Pages$Home_$AnimationState = F2(
	function (when, shouldAnimate) {
		return {shouldAnimate: shouldAnimate, when: when};
	});
var $author$project$Pages$Electronics$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Electronics$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Home_$PercentOfViewport = function (a) {
	return {$: 'PercentOfViewport', a: a};
};
var $author$project$Pages$Electronics$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Electronics$SubText = F5(
	function (id, title, image, description, text) {
		return {description: description, id: id, image: image, text: text, title: title};
	});
var $author$project$Effect$none = $author$project$Effect$None;
var $author$project$Storage$Enter = {$: 'Enter'};
var $author$project$Shared$reset = function (model) {
	return _Utils_update(
		model,
		{navbarDisplay: $author$project$Storage$Enter, scrolledDistance: 0, showMobileNav: false});
};
var $author$project$Pages$Electronics$init = function (shared) {
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'1',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(20),
							false)),
						_Utils_Tuple2(
						'2',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'3',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			localShared: $author$project$Shared$reset(shared),
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Electronics$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Electronics$OpenVimeo)),
					A5($author$project$Pages$Electronics$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Electronics$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Electronics$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Electronics$OpenContactUs)),
					A5($author$project$Pages$Electronics$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			subTexts: _List_fromArray(
				[
					A5($author$project$Pages$Electronics$SubText, 1, 'Wide Array of Expertise.', '/img/subtext6.jpg', '', 'We Welcome Challenges.\nGCI’s tenacity to solve complex problems is what sets us apart. Where others have been unable to find a solution, GCI forges ahead to solve even the most difficult of problems. We persevere  to provide our customers with solutions to keep their assets functioning.'),
					A5($author$project$Pages$Electronics$SubText, 2, 'Solving COTS Reliability Issues.', '/img/subtext8.jpg', '', 'Commercial Off The Shelf (COTS) electronics fail to meet reliability requirements in certain demanding environments. GCI has the ability to repackage any die from a plastic package into a hermetic ceramic package as originally required. Hermetic packaging provides superior reliability to plastic packaging of integrated circuits (IC) and are able to meet full MIL‑STD‑883 qualification requirements.\nTypically, hermetic packaged ICs can last for many decades of use under extreme environmental conditions (e.g., salt atmosphere), often encountered with DoD applications.'),
					A5($author$project$Pages$Electronics$SubText, 3, 'GCI supports DoD needs.', '/img/subtext7.jpg', '', 'GCI often supports DoD needs through both SBIR/STTR and RIF funded projects. This has enabled GCI to provide solutions for myriad DoD applications where there were no other options.')
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Electronics$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Electronics$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Ports$recvScroll = _Platform_incomingPort('recvScroll', $elm$json$Json$Decode$int);
var $author$project$Pages$Electronics$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Electronics$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Electronics$WindowResized)
			]));
};
var $author$project$Shared$FormResponse = F2(
	function (next, ok) {
		return {next: next, ok: ok};
	});
var $author$project$Storage$Hide = {$: 'Hide'};
var $author$project$Storage$Send = {$: 'Send'};
var $author$project$Storage$SendError = {$: 'SendError'};
var $author$project$Storage$SendOk = {$: 'SendOk'};
var $author$project$Pages$Electronics$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Shared$UpdateModel = function (a) {
	return {$: 'UpdateModel', a: a};
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $author$project$Pages$Electronics$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$browser$Browser$Dom$getElement = _Browser_getElement;
var $author$project$Pages$Electronics$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Electronics$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Effect$batch = $author$project$Effect$Batch;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $mdgriffith$elm_ui$Element$BigDesktop = {$: 'BigDesktop'};
var $mdgriffith$elm_ui$Element$Desktop = {$: 'Desktop'};
var $mdgriffith$elm_ui$Element$Landscape = {$: 'Landscape'};
var $mdgriffith$elm_ui$Element$Phone = {$: 'Phone'};
var $mdgriffith$elm_ui$Element$Portrait = {$: 'Portrait'};
var $mdgriffith$elm_ui$Element$Tablet = {$: 'Tablet'};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Element$classifyDevice = function (window) {
	return {
		_class: function () {
			var shortSide = A2($elm$core$Basics$min, window.width, window.height);
			var longSide = A2($elm$core$Basics$max, window.width, window.height);
			return (shortSide < 600) ? $mdgriffith$elm_ui$Element$Phone : ((longSide <= 1200) ? $mdgriffith$elm_ui$Element$Tablet : (((longSide > 1200) && (longSide <= 1920)) ? $mdgriffith$elm_ui$Element$Desktop : $mdgriffith$elm_ui$Element$BigDesktop));
		}(),
		orientation: (_Utils_cmp(window.width, window.height) < 0) ? $mdgriffith$elm_ui$Element$Portrait : $mdgriffith$elm_ui$Element$Landscape
	};
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Ports$disableScrolling = _Platform_outgoingPort('disableScrolling', $elm$json$Json$Encode$bool);
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $author$project$Effect$fromShared = $author$project$Effect$Shared;
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Ports$save = _Platform_outgoingPort('save', $elm$core$Basics$identity);
var $author$project$Pages$Electronics$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Electronics$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Storage$toJson = function (state) {
	var nullable = function (a) {
		if (a.$ === 'Nothing') {
			return $elm$json$Json$Encode$null;
		} else {
			var str = a.a;
			return $elm$json$Json$Encode$string(str);
		}
	};
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'contactDialogState',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'name',
							$elm$json$Json$Encode$string(state.name)),
							_Utils_Tuple2(
							'nameError',
							$elm$json$Json$Encode$bool(state.nameError)),
							_Utils_Tuple2(
							'email',
							nullable(state.email)),
							_Utils_Tuple2(
							'emailError',
							$elm$json$Json$Encode$bool(state.emailError)),
							_Utils_Tuple2(
							'phone',
							nullable(state.phone)),
							_Utils_Tuple2(
							'phoneError',
							$elm$json$Json$Encode$bool(state.phoneError)),
							_Utils_Tuple2(
							'message',
							nullable(state.message)),
							_Utils_Tuple2(
							'messageError',
							$elm$json$Json$Encode$bool(state.messageError)),
							_Utils_Tuple2(
							'currentPage',
							$elm$json$Json$Encode$int(state.currentPage)),
							_Utils_Tuple2(
							'send',
							$elm$json$Json$Encode$string(
								function () {
									var _v0 = state.send;
									switch (_v0.$) {
										case 'Waiting':
											return 'Waiting';
										case 'Send':
											return 'Error';
										case 'SendOk':
											return 'Ok';
										default:
											return 'Error';
									}
								}()))
						])))
			]));
};
var $author$project$Pages$Home_$LeavesTop = {$: 'LeavesTop'};
var $author$project$Pages$Home_$Middle = {$: 'Middle'};
var $author$project$Pages$Home_$updateElement = F3(
	function (id, element, _v0) {
		var k = _v0.a;
		var v = _v0.b;
		if (_Utils_eq(id, k) && (!v.shouldAnimate)) {
			var _v1 = v.when;
			switch (_v1.$) {
				case 'PercentOfViewport':
					var p = _v1.a;
					return _Utils_Tuple2(
						id,
						{
							shouldAnimate: _Utils_cmp(element.element.y + (element.element.height * (p / 100)), element.viewport.y + element.viewport.height) < 1,
							when: $author$project$Pages$Home_$PercentOfViewport(p)
						});
				case 'Middle':
					return _Utils_Tuple2(
						id,
						{
							shouldAnimate: _Utils_cmp(element.element.y, element.viewport.y + (element.viewport.height * 0.5)) < 1,
							when: $author$project$Pages$Home_$Middle
						});
				default:
					return _Utils_Tuple2(
						id,
						{
							shouldAnimate: _Utils_cmp(element.element.y + element.element.height, element.viewport.y) < 0,
							when: $author$project$Pages$Home_$LeavesTop
						});
			}
		} else {
			return _Utils_Tuple2(k, v);
		}
	});
var $author$project$Pages$Electronics$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Electronics$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Electronics$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						A2(
							$elm$core$List$map,
							$author$project$Pages$Electronics$animationTrackerToCmd,
							A2(
								$elm$core$List$filter,
								function (_v1) {
									var v = _v1.b;
									return !v.shouldAnimate;
								},
								$elm$core$Dict$toList(model.animationTracker)))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Electronics$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			default:
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
		}
	});
var $author$project$Palette$Lg = {$: 'Lg'};
var $author$project$Pages$Electronics$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Palette$Sm = {$: 'Sm'};
var $author$project$Palette$Xsm = {$: 'Xsm'};
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $author$project$Internal$Animation$joinWith = function (f) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(f),
		$elm$core$String$concat);
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$Internal$Animation$Property$escapedChars_ = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('.'),
			_Utils_chr(' '),
			_Utils_chr(','),
			_Utils_chr('#'),
			_Utils_chr('$'),
			_Utils_chr('%'),
			_Utils_chr('('),
			_Utils_chr(')'),
			_Utils_chr('&'),
			_Utils_chr(';'),
			_Utils_chr(':'),
			_Utils_chr('\"'),
			_Utils_chr('\''),
			_Utils_chr('*'),
			_Utils_chr('~'),
			_Utils_chr('!'),
			_Utils_chr('@'),
			_Utils_chr('^'),
			_Utils_chr('+'),
			_Utils_chr('='),
			_Utils_chr('/'),
			_Utils_chr('?'),
			_Utils_chr('>'),
			_Utils_chr('<'),
			_Utils_chr('['),
			_Utils_chr(']'),
			_Utils_chr('{'),
			_Utils_chr('}'),
			_Utils_chr('|'),
			_Utils_chr('`')
		]));
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $author$project$Internal$Animation$Property$escapedChars = function (c) {
	return !A2($elm$core$Set$member, c, $author$project$Internal$Animation$Property$escapedChars_);
};
var $elm$core$String$filter = _String_filter;
var $author$project$Internal$Animation$Property$escape = $elm$core$String$filter($author$project$Internal$Animation$Property$escapedChars);
var $elm$core$Basics$round = _Basics_round;
var $author$project$Internal$Transform$rounded = F2(
	function (n, val) {
		return $elm$core$String$fromInt(
			$elm$core$Basics$round(val) * n);
	});
var $author$project$Internal$Transform$name = function (t) {
	switch (t.$) {
		case 'Translate':
			switch (t.a.$) {
				case 'Y':
					var y_ = t.a.a;
					return 'y' + A2($author$project$Internal$Transform$rounded, 1, y_);
				case 'X':
					var x_ = t.a.a;
					return 'x' + A2($author$project$Internal$Transform$rounded, 1, x_);
				default:
					var _v1 = t.a;
					var x_ = _v1.a;
					var y_ = _v1.b;
					return 'x' + (A2($author$project$Internal$Transform$rounded, 1, x_) + ('y' + A2($author$project$Internal$Transform$rounded, 1, y_)));
			}
		case 'Rotate':
			var r_ = t.a;
			return 'r' + A2($author$project$Internal$Transform$rounded, 1, r_);
		default:
			var x_ = t.a;
			var y_ = t.b;
			return 'sx' + (A2($author$project$Internal$Transform$rounded, 100, x_) + ('sy' + A2($author$project$Internal$Transform$rounded, 100, y_)));
	}
};
var $author$project$Internal$Animation$Property$rounded = F2(
	function (n, val) {
		return $elm$core$String$fromInt(
			$elm$core$Basics$round(val * n));
	});
var $author$project$Internal$Animation$Property$name = function (prop) {
	switch (prop.$) {
		case 'Opacity':
			var n = prop.a;
			return 'o' + A2($author$project$Internal$Animation$Property$rounded, 100, n);
		case 'Transform':
			var t = prop.a;
			return $author$project$Internal$Transform$name(t);
		default:
			var n = prop.a;
			var p = prop.b;
			return _Utils_ap(
				$author$project$Internal$Animation$Property$escape(n),
				$author$project$Internal$Animation$Property$escape(p));
	}
};
var $author$project$Internal$Animation$frameName = function (_v0) {
	var dur = _v0.a;
	var props = _v0.b;
	return 'f' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(dur)) + A2($author$project$Internal$Animation$joinWith, $author$project$Internal$Animation$Property$name, props));
};
var $author$project$Internal$Animation$framesNames = $author$project$Internal$Animation$joinWith($author$project$Internal$Animation$frameName);
var $author$project$Internal$Animation$iterationName = function (i) {
	if (i.$ === 'Loop') {
		return 'infinite';
	} else {
		var count = i.a;
		return 'count-' + $elm$core$String$fromInt(count);
	}
};
var $author$project$Internal$Ease$toString = function (e) {
	switch (e.$) {
		case 'Cubic':
			var a = e.a;
			var b = e.b;
			var c = e.c;
			var d = e.d;
			return 'cubic-bezier(' + (A2(
				$elm$core$String$join,
				',',
				_List_fromArray(
					[
						$elm$core$String$fromFloat(a),
						$elm$core$String$fromFloat(b),
						$elm$core$String$fromFloat(c),
						$elm$core$String$fromFloat(d)
					])) + ')');
		case 'Linear':
			return 'linear';
		case 'Ease':
			return 'ease';
		case 'EaseIn':
			return 'ease-in';
		case 'EaseOut':
			return 'ease-out';
		default:
			return 'ease-in-out';
	}
};
var $author$project$Internal$Animation$optionName = function (o) {
	switch (o.$) {
		case 'Delay':
			var n = o.a;
			return 'd' + $elm$core$String$fromInt(n);
		case 'Ease':
			var ease = o.a;
			return $author$project$Internal$Animation$Property$escape(
				$author$project$Internal$Ease$toString(ease));
		default:
			var i = o.a;
			return $author$project$Internal$Animation$iterationName(i);
	}
};
var $author$project$Internal$Animation$optionNames = $author$project$Internal$Animation$joinWith($author$project$Internal$Animation$optionName);
var $author$project$Internal$Animation$name_ = function (_v0) {
	var d = _v0.a;
	var options = _v0.b;
	var frames = _v0.c;
	return 'anim-' + ($elm$core$String$fromInt(d) + ($author$project$Internal$Animation$optionNames(options) + $author$project$Internal$Animation$framesNames(frames)));
};
var $author$project$Internal$Animation$duration_ = function (_v0) {
	var d = _v0.a;
	return d;
};
var $author$project$Internal$Unit$ms = function (n) {
	return $elm$core$String$fromInt(n) + 'ms';
};
var $author$project$Internal$Animation$animationDuration = function (anim) {
	return $author$project$Internal$Unit$ms(
		$author$project$Internal$Animation$duration_(anim));
};
var $author$project$Internal$Animation$options_ = function (_v0) {
	var o = _v0.b;
	return o;
};
var $author$project$Internal$Animation$renderIteration = function (i) {
	if (i.$ === 'Loop') {
		return 'infinite';
	} else {
		var count = i.a;
		return $elm$core$String$fromInt(count);
	}
};
var $author$project$Internal$Animation$renderOption = function (o) {
	switch (o.$) {
		case 'Delay':
			var n = o.a;
			return _List_fromArray(
				[
					'animation-delay: ' + $author$project$Internal$Unit$ms(n)
				]);
		case 'Ease':
			var e = o.a;
			return _List_fromArray(
				[
					'animation-timing-function: ' + $author$project$Internal$Ease$toString(e)
				]);
		default:
			var i = o.a;
			return _List_fromArray(
				[
					'animation-iteration-count: ' + $author$project$Internal$Animation$renderIteration(i)
				]);
	}
};
var $author$project$Internal$Animation$renderOptions = A2(
	$elm$core$Basics$composeR,
	$author$project$Internal$Animation$options_,
	$elm$core$List$concatMap($author$project$Internal$Animation$renderOption));
var $author$project$Internal$Animation$classProperties = function (anim) {
	return A2(
		$elm$core$String$join,
		';\n',
		A2(
			$elm$core$List$append,
			_List_fromArray(
				[
					'animation-name: ' + $author$project$Internal$Animation$name_(anim),
					'animation-duration: ' + $author$project$Internal$Animation$animationDuration(anim),
					'animation-fill-mode: both'
				]),
			$author$project$Internal$Animation$renderOptions(anim)));
};
var $author$project$Internal$Animation$classDefinition_ = function (anim) {
	return '.' + ($author$project$Internal$Animation$name_(anim) + ('{\n' + ($author$project$Internal$Animation$classProperties(anim) + '\n};')));
};
var $author$project$Internal$Animation$frames_ = function (_v0) {
	var f = _v0.c;
	return f;
};
var $author$project$Internal$Unit$pc = function (n) {
	return $elm$core$String$fromFloat(n) + '%';
};
var $author$project$Internal$Animation$Property$filterMaybes = $elm$core$List$filterMap($elm$core$Basics$identity);
var $author$project$Internal$Animation$Property$getProp = function (f) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filterMap(f),
		$elm$core$List$head);
};
var $author$project$Internal$Animation$Property$opacity_ = function (p) {
	if (p.$ === 'Opacity') {
		var n = p.a;
		return $elm$core$Maybe$Just(
			'opacity:' + $elm$core$String$fromFloat(n));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Internal$Animation$Property$raw_ = function (p) {
	if (p.$ === 'Raw') {
		var k = p.a;
		var v = p.b;
		return $elm$core$Maybe$Just(k + (':' + v));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Internal$Animation$Property$collectTransforms = A2(
	$elm$core$List$foldl,
	F2(
		function (val, acc) {
			if (val.$ === 'Transform') {
				var t = val.a;
				return A2($elm$core$List$cons, t, acc);
			} else {
				return acc;
			}
		}),
	_List_Nil);
var $author$project$Internal$Transform$combine = F2(
	function (transform, combined) {
		switch (transform.$) {
			case 'Rotate':
				var n = transform.a;
				return _Utils_update(
					combined,
					{
						rotate: $elm$core$Maybe$Just(n)
					});
			case 'ScaleXY':
				var x_ = transform.a;
				var y_ = transform.b;
				return _Utils_update(
					combined,
					{
						scale: $elm$core$Maybe$Just(
							_Utils_Tuple2(x_, y_))
					});
			default:
				switch (transform.a.$) {
					case 'XY':
						var _v1 = transform.a;
						var x_ = _v1.a;
						var y_ = _v1.b;
						return _Utils_update(
							combined,
							{
								xy: $elm$core$Maybe$Just(
									_Utils_Tuple2(x_, y_))
							});
					case 'X':
						var n = transform.a.a;
						return _Utils_update(
							combined,
							{
								x: $elm$core$Maybe$Just(n)
							});
					default:
						var n = transform.a.a;
						return _Utils_update(
							combined,
							{
								y: $elm$core$Maybe$Just(n)
							});
				}
		}
	});
var $author$project$Internal$Transform$empty = {rotate: $elm$core$Maybe$Nothing, scale: $elm$core$Maybe$Nothing, x: $elm$core$Maybe$Nothing, xy: $elm$core$Maybe$Nothing, y: $elm$core$Maybe$Nothing};
var $author$project$Internal$Transform$render_ = function (f) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map(f),
		$elm$core$Maybe$withDefault(''));
};
var $author$project$Internal$Transform$deg = function (n) {
	return $elm$core$String$fromFloat(n) + 'deg';
};
var $author$project$Internal$Transform$join = $elm$core$String$join('');
var $author$project$Internal$Transform$rotate_ = function (n) {
	return $author$project$Internal$Transform$join(
		_List_fromArray(
			[
				'rotate(',
				$author$project$Internal$Transform$deg(n),
				')'
			]));
};
var $author$project$Internal$Transform$scale_ = function (_v0) {
	var x_ = _v0.a;
	var y_ = _v0.b;
	return $author$project$Internal$Transform$join(
		_List_fromArray(
			[
				'scale(',
				$elm$core$String$fromFloat(x_),
				',',
				$elm$core$String$fromFloat(y_),
				')'
			]));
};
var $author$project$Internal$Transform$px = function (n) {
	return $elm$core$String$fromFloat(n) + 'px';
};
var $author$project$Internal$Transform$translateX_ = function (n) {
	return $author$project$Internal$Transform$join(
		_List_fromArray(
			[
				'translateX(',
				$author$project$Internal$Transform$px(n),
				')'
			]));
};
var $author$project$Internal$Transform$translateY_ = function (n) {
	return $author$project$Internal$Transform$join(
		_List_fromArray(
			[
				'translateY(',
				$author$project$Internal$Transform$px(n),
				')'
			]));
};
var $author$project$Internal$Transform$translate_ = function (_v0) {
	var x_ = _v0.a;
	var y_ = _v0.b;
	return $author$project$Internal$Transform$join(
		_List_fromArray(
			[
				'translate(',
				$author$project$Internal$Transform$px(x_),
				',',
				$author$project$Internal$Transform$px(y_),
				')'
			]));
};
var $author$project$Internal$Transform$render = function (combined) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not),
			_List_fromArray(
				[
					A2($author$project$Internal$Transform$render_, $author$project$Internal$Transform$translate_, combined.xy),
					A2($author$project$Internal$Transform$render_, $author$project$Internal$Transform$translateX_, combined.x),
					A2($author$project$Internal$Transform$render_, $author$project$Internal$Transform$translateY_, combined.y),
					A2($author$project$Internal$Transform$render_, $author$project$Internal$Transform$scale_, combined.scale),
					A2($author$project$Internal$Transform$render_, $author$project$Internal$Transform$rotate_, combined.rotate)
				])));
};
var $author$project$Internal$Transform$toString = A2(
	$elm$core$Basics$composeR,
	A2($elm$core$List$foldl, $author$project$Internal$Transform$combine, $author$project$Internal$Transform$empty),
	$author$project$Internal$Transform$render);
var $author$project$Internal$Animation$Property$transform_ = function (props) {
	var _v0 = $author$project$Internal$Animation$Property$collectTransforms(props);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var transforms = _v0;
		return $elm$core$Maybe$Just(
			'transform:' + $author$project$Internal$Transform$toString(transforms));
	}
};
var $author$project$Internal$Animation$Property$render = function (props) {
	return A2(
		$elm$core$String$join,
		';',
		$author$project$Internal$Animation$Property$filterMaybes(
			$elm$core$List$concat(
				_List_fromArray(
					[
						A2($elm$core$List$map, $author$project$Internal$Animation$Property$raw_, props),
						_List_fromArray(
						[
							A2($author$project$Internal$Animation$Property$getProp, $author$project$Internal$Animation$Property$opacity_, props),
							$author$project$Internal$Animation$Property$transform_(props)
						])
					]))));
};
var $author$project$Internal$Animation$renderFrame = function (_v0) {
	var percent = _v0.a;
	var properties = _v0.b;
	return $author$project$Internal$Unit$pc(percent) + ('{' + ($author$project$Internal$Animation$Property$render(properties) + ';}'));
};
var $author$project$Internal$Animation$keyframes_ = A2(
	$elm$core$Basics$composeR,
	$author$project$Internal$Animation$frames_,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map($author$project$Internal$Animation$renderFrame),
		$elm$core$String$join('\n')));
var $author$project$Internal$Animation$keyframesAnimation_ = function (anim) {
	return '@keyframes ' + ($author$project$Internal$Animation$name_(anim) + ('{' + ($author$project$Internal$Animation$keyframes_(anim) + '}')));
};
var $author$project$Internal$Animation$stylesheet_ = function (anim) {
	return $author$project$Internal$Animation$keyframesAnimation_(anim) + ('\n' + $author$project$Internal$Animation$classDefinition_(anim));
};
var $author$project$Simple$Animation$Animated$toStylesheet_ = function (anim) {
	return A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(
				$author$project$Internal$Animation$stylesheet_(anim))
			]));
};
var $author$project$Simple$Animation$Animated$ui = F5(
	function (options, node_, anim, attrs, els) {
		return A2(
			node_,
			A2(
				$elm$core$List$append,
				_List_fromArray(
					[
						options.behindContent(
						options.html(
							$author$project$Simple$Animation$Animated$toStylesheet_(anim))),
						options.htmlAttribute(
						$elm$html$Html$Attributes$class(
							$author$project$Internal$Animation$name_(anim)))
					]),
				attrs),
			els);
	});
var $author$project$Shared$animatedUi = $author$project$Simple$Animation$Animated$ui(
	{behindContent: $mdgriffith$elm_ui$Element$behindContent, html: $mdgriffith$elm_ui$Element$html, htmlAttribute: $mdgriffith$elm_ui$Element$htmlAttribute});
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Shared$acol = $author$project$Shared$animatedUi($mdgriffith$elm_ui$Element$column);
var $mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Bottom);
var $author$project$Palette$Md = {$: 'Md'};
var $author$project$Pages$Electronics$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Electronics$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $author$project$Simple$Animation$Stepped = function (a) {
	return {$: 'Stepped', a: a};
};
var $author$project$Internal$Animation$Animation = F3(
	function (a, b, c) {
		return {$: 'Animation', a: a, b: b, c: c};
	});
var $author$project$Internal$Animation$Frame = F2(
	function (a, b) {
		return {$: 'Frame', a: a, b: b};
	});
var $author$project$Simple$Animation$duration = $author$project$Internal$Animation$duration_;
var $author$project$Simple$Animation$adjustCompleteWait = F2(
	function (anim, timePassed) {
		var duration_ = $author$project$Simple$Animation$duration(anim);
		return ((duration_ - timePassed) >= 1) ? duration_ : (timePassed + 1);
	});
var $author$project$Simple$Animation$frameProps = function (_v0) {
	var props = _v0.b;
	return props;
};
var $author$project$Simple$Animation$accumDuration = F2(
	function (step_, curr) {
		switch (step_.$) {
			case 'Step':
				var d = step_.a;
				return d + curr;
			case 'Wait':
				var d = step_.a;
				return d + curr;
			default:
				var anim = step_.a;
				return A2($author$project$Simple$Animation$adjustCompleteWait, anim, curr);
		}
	});
var $author$project$Simple$Animation$totalDuration = A2($elm$core$List$foldl, $author$project$Simple$Animation$accumDuration, 0);
var $author$project$Simple$Animation$toFrames = F2(
	function (firstFrame, steps_) {
		var percentPerMs = 100 / $author$project$Simple$Animation$totalDuration(steps_);
		var getFrame = F2(
			function (f, _v2) {
				var n = _v2.a;
				var xs = _v2.b;
				var cur = _v2.c;
				switch (f.$) {
					case 'Step':
						var d = f.a;
						var props = f.b;
						return _Utils_Tuple3(
							n + d,
							_Utils_ap(
								xs,
								_List_fromArray(
									[cur])),
							A2($author$project$Internal$Animation$Frame, percentPerMs * (n + d), props));
					case 'Wait':
						var d = f.a;
						return _Utils_Tuple3(
							n + d,
							_Utils_ap(
								xs,
								_List_fromArray(
									[cur])),
							A2(
								$author$project$Internal$Animation$Frame,
								percentPerMs * (n + d),
								$author$project$Simple$Animation$frameProps(cur)));
					default:
						var d = f.a;
						var dur = A2($author$project$Simple$Animation$adjustCompleteWait, d, n);
						return _Utils_Tuple3(
							dur,
							_Utils_ap(
								xs,
								_List_fromArray(
									[cur])),
							A2(
								$author$project$Internal$Animation$Frame,
								percentPerMs * dur,
								$author$project$Simple$Animation$frameProps(cur)));
				}
			});
		return function (_v0) {
			var xs = _v0.b;
			var curr = _v0.c;
			return _Utils_ap(
				xs,
				_List_fromArray(
					[curr]));
		}(
			A3(
				$elm$core$List$foldl,
				getFrame,
				_Utils_Tuple3(
					0,
					_List_Nil,
					A2($author$project$Internal$Animation$Frame, 0, firstFrame)),
				steps_));
	});
var $author$project$Simple$Animation$toAnimation = function (_v0) {
	var s = _v0.a;
	return A3(
		$author$project$Internal$Animation$Animation,
		$author$project$Simple$Animation$totalDuration(s.steps),
		s.options,
		A2($author$project$Simple$Animation$toFrames, s.startAt, s.steps));
};
var $author$project$Simple$Animation$empty = $author$project$Simple$Animation$toAnimation(
	$author$project$Simple$Animation$Stepped(
		{options: _List_Nil, startAt: _List_Nil, steps: _List_Nil}));
var $mdgriffith$elm_ui$Element$Font$extraLight = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textExtraLight);
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Palette$fontSize = F2(
	function (device, size) {
		return $mdgriffith$elm_ui$Element$Font$size(
			function () {
				switch (device.$) {
					case 'Phone':
						switch (size.$) {
							case 'Xsm':
								return 13;
							case 'Sm':
								return 20;
							case 'Md':
								return 25;
							case 'Lg':
								return 38;
							case 'Xlg':
								return 45;
							default:
								return 45;
						}
					case 'Tablet':
						switch (size.$) {
							case 'Xsm':
								return 13;
							case 'Sm':
								return 20;
							case 'Md':
								return 25;
							case 'Lg':
								return 38;
							case 'Xlg':
								return 45;
							default:
								return 60;
						}
					case 'Desktop':
						switch (size.$) {
							case 'Xsm':
								return 18;
							case 'Sm':
								return 25;
							case 'Md':
								return 30;
							case 'Lg':
								return 43;
							case 'Xlg':
								return 50;
							default:
								return 80;
						}
					default:
						switch (size.$) {
							case 'Xsm':
								return 18;
							case 'Sm':
								return 25;
							case 'Md':
								return 30;
							case 'Lg':
								return 43;
							case 'Xlg':
								return 50;
							default:
								return 80;
						}
				}
			}());
	});
var $author$project$Simple$Animation$Step = F2(
	function (a, b) {
		return {$: 'Step', a: a, b: b};
	});
var $author$project$Simple$Animation$step = $author$project$Simple$Animation$Step;
var $author$project$Simple$Animation$fromTo = F3(
	function (o, from_, to_) {
		return $author$project$Simple$Animation$toAnimation(
			$author$project$Simple$Animation$Stepped(
				{
					options: o.options,
					startAt: from_,
					steps: _List_fromArray(
						[
							A2($author$project$Simple$Animation$step, o.duration, to_)
						])
				}));
	});
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Palette$gciBlue = A3($mdgriffith$elm_ui$Element$rgb255, 29, 55, 108);
var $mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 'Heading', a: a};
};
var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseEnter = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseEnter);
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseLeave = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseLeave);
var $author$project$Internal$Animation$Property$Opacity = function (a) {
	return {$: 'Opacity', a: a};
};
var $author$project$Simple$Animation$Property$opacity = $author$project$Internal$Animation$Property$Opacity;
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $author$project$Palette$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $author$project$Internal$Animation$Property$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $author$project$Internal$Transform$Translate = function (a) {
	return {$: 'Translate', a: a};
};
var $author$project$Internal$Transform$Y = function (a) {
	return {$: 'Y', a: a};
};
var $author$project$Internal$Transform$y = A2($elm$core$Basics$composeL, $author$project$Internal$Transform$Translate, $author$project$Internal$Transform$Y);
var $author$project$Simple$Animation$Property$y = A2($elm$core$Basics$composeL, $author$project$Internal$Animation$Property$Transform, $author$project$Internal$Transform$y);
var $author$project$Pages$Electronics$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Electronics$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Electronics$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $elm$html$Html$br = _VirtualDom_node('br');
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $author$project$Storage$Waiting = {$: 'Waiting'};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $panthershark$email_parser$Email$EmailAddress = F2(
	function (local, domain) {
		return {domain: domain, local: local};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $panthershark$email_parser$Email$domainPart = function () {
	var checkLen = function (s) {
		return $elm$core$String$isEmpty(s) ? $elm$parser$Parser$problem('domain is empty') : ((!A2($elm$core$String$contains, '.', s)) ? $elm$parser$Parser$problem('domain is not valid') : $elm$parser$Parser$succeed(s));
	};
	return A2(
		$elm$parser$Parser$andThen,
		checkLen,
		$elm$parser$Parser$getChompedString(
			$elm$parser$Parser$chompWhile(
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || (_Utils_eq(
						c,
						_Utils_chr('-')) || _Utils_eq(
						c,
						_Utils_chr('.')));
				})));
}();
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$String$foldl = _String_foldl;
var $panthershark$email_parser$Email$checkLocal = function (str) {
	var isLocalChar = function (c) {
		return $elm$core$Char$isAlphaNum(c) || (_Utils_eq(
			c,
			_Utils_chr('!')) || (_Utils_eq(
			c,
			_Utils_chr('#')) || (_Utils_eq(
			c,
			_Utils_chr('$')) || (_Utils_eq(
			c,
			_Utils_chr('%')) || (_Utils_eq(
			c,
			_Utils_chr('&')) || (_Utils_eq(
			c,
			_Utils_chr('*')) || (_Utils_eq(
			c,
			_Utils_chr('_')) || (_Utils_eq(
			c,
			_Utils_chr('-')) || (_Utils_eq(
			c,
			_Utils_chr('~')) || (_Utils_eq(
			c,
			_Utils_chr('|')) || (_Utils_eq(
			c,
			_Utils_chr('+')) || (_Utils_eq(
			c,
			_Utils_chr('=')) || (_Utils_eq(
			c,
			_Utils_chr('`')) || (_Utils_eq(
			c,
			_Utils_chr('{')) || (_Utils_eq(
			c,
			_Utils_chr('}')) || _Utils_eq(
			c,
			_Utils_chr('.')))))))))))))))));
	};
	return $elm$core$String$isEmpty(str) ? $elm$parser$Parser$problem('local part is empty') : (A2($elm$core$String$startsWith, '.', str) ? $elm$parser$Parser$problem('local part cannot start with .') : (A2($elm$core$String$endsWith, '.', str) ? $elm$parser$Parser$problem('local part cannot end with .') : (A2($elm$core$String$contains, '..', str) ? $elm$parser$Parser$problem('local part cannot contain ..') : (A3(
		$elm$core$String$foldl,
		F2(
			function (c, acc) {
				return acc && isLocalChar(c);
			}),
		true,
		str) ? $elm$parser$Parser$succeed(str) : $elm$parser$Parser$problem('local part contains invalid characters')))));
};
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $panthershark$email_parser$Email$localPart = A2(
	$elm$parser$Parser$andThen,
	$panthershark$email_parser$Email$checkLocal,
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompUntil('@')));
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $panthershark$email_parser$Email$emailParser = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($panthershark$email_parser$Email$EmailAddress),
		A2(
			$elm$parser$Parser$ignorer,
			$panthershark$email_parser$Email$localPart,
			$elm$parser$Parser$symbol('@'))),
	A2($elm$parser$Parser$ignorer, $panthershark$email_parser$Email$domainPart, $elm$parser$Parser$end));
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $panthershark$email_parser$Email$isValid = function (s) {
	return A2(
		$elm$core$Result$withDefault,
		false,
		A2(
			$elm$core$Result$map,
			$elm$core$Basics$always(true),
			A2($elm$parser$Parser$run, $panthershark$email_parser$Email$emailParser, s)));
};
var $elm$core$String$trim = _String_trim;
var $author$project$Shared$contactEmail = F2(
	function (model, newEmail) {
		return model.contactDialogState.emailError ? _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{
							email: $elm$core$Maybe$Just(
								$elm$core$String$trim(newEmail)),
							emailError: !$panthershark$email_parser$Email$isValid(newEmail)
						});
				}(model.contactDialogState)
			}) : _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{
							email: $elm$core$Maybe$Just(
								$elm$core$String$trim(newEmail))
						});
				}(model.contactDialogState)
			});
	});
var $author$project$Shared$contactMsg = F2(
	function (model, newMessage) {
		return model.contactDialogState.messageError ? _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{
							message: $elm$core$Maybe$Just(newMessage),
							messageError: newMessage === ''
						});
				}(model.contactDialogState)
			}) : _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{
							message: $elm$core$Maybe$Just(newMessage)
						});
				}(model.contactDialogState)
			});
	});
var $author$project$Shared$contactName = F2(
	function (model, newName) {
		return model.contactDialogState.nameError ? _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{name: newName, nameError: newName === ''});
				}(model.contactDialogState)
			}) : _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{name: newName});
				}(model.contactDialogState)
			});
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Shared$prettyPhoneNumber = function (number) {
	var clean = A2(
		$elm$core$String$filter,
		$elm$core$Char$isDigit,
		A3($elm$core$String$replace, '+1', '', number));
	var _v0 = $elm$core$String$length(clean);
	switch (_v0) {
		case 0:
			return '+1 (';
		case 1:
			return '+1 (' + clean;
		case 2:
			return '+1 (' + clean;
		case 3:
			return '+1 (' + (clean + ')  ');
		case 4:
			return '+1 (' + (A2($elm$core$String$left, 3, clean) + (')  ' + A2($elm$core$String$right, 1, clean)));
		case 5:
			return '+1 (' + (A2($elm$core$String$left, 3, clean) + (')  ' + A2($elm$core$String$right, 2, clean)));
		default:
			return '+1 (' + (A2($elm$core$String$left, 3, clean) + (')  ' + (A3($elm$core$String$slice, 3, 6, clean) + (' - ' + A3($elm$core$String$slice, 6, 10, clean)))));
	}
};
var $robinheghan$elm_phone_numbers$PhoneNumber$CarrierSpecific = {$: 'CarrierSpecific'};
var $robinheghan$elm_phone_numbers$PhoneNumber$Emergency = {$: 'Emergency'};
var $robinheghan$elm_phone_numbers$PhoneNumber$FixedLine = {$: 'FixedLine'};
var $robinheghan$elm_phone_numbers$PhoneNumber$Mobile = {$: 'Mobile'};
var $robinheghan$elm_phone_numbers$PhoneNumber$NoInternationalDialling = {$: 'NoInternationalDialling'};
var $robinheghan$elm_phone_numbers$PhoneNumber$Pager = {$: 'Pager'};
var $robinheghan$elm_phone_numbers$PhoneNumber$PersonalNumber = {$: 'PersonalNumber'};
var $robinheghan$elm_phone_numbers$PhoneNumber$PremiumRate = {$: 'PremiumRate'};
var $robinheghan$elm_phone_numbers$PhoneNumber$SharedCost = {$: 'SharedCost'};
var $robinheghan$elm_phone_numbers$PhoneNumber$ShortCode = {$: 'ShortCode'};
var $robinheghan$elm_phone_numbers$PhoneNumber$SmsServices = {$: 'SmsServices'};
var $robinheghan$elm_phone_numbers$PhoneNumber$StandardRate = {$: 'StandardRate'};
var $robinheghan$elm_phone_numbers$PhoneNumber$TollFree = {$: 'TollFree'};
var $robinheghan$elm_phone_numbers$PhoneNumber$Uan = {$: 'Uan'};
var $robinheghan$elm_phone_numbers$PhoneNumber$Voicemail = {$: 'Voicemail'};
var $robinheghan$elm_phone_numbers$PhoneNumber$Voip = {$: 'Voip'};
var $robinheghan$elm_phone_numbers$PhoneNumber$anyType = _List_fromArray(
	[$robinheghan$elm_phone_numbers$PhoneNumber$FixedLine, $robinheghan$elm_phone_numbers$PhoneNumber$Mobile, $robinheghan$elm_phone_numbers$PhoneNumber$TollFree, $robinheghan$elm_phone_numbers$PhoneNumber$PremiumRate, $robinheghan$elm_phone_numbers$PhoneNumber$SharedCost, $robinheghan$elm_phone_numbers$PhoneNumber$PersonalNumber, $robinheghan$elm_phone_numbers$PhoneNumber$Voip, $robinheghan$elm_phone_numbers$PhoneNumber$Pager, $robinheghan$elm_phone_numbers$PhoneNumber$Uan, $robinheghan$elm_phone_numbers$PhoneNumber$Emergency, $robinheghan$elm_phone_numbers$PhoneNumber$Voicemail, $robinheghan$elm_phone_numbers$PhoneNumber$ShortCode, $robinheghan$elm_phone_numbers$PhoneNumber$StandardRate, $robinheghan$elm_phone_numbers$PhoneNumber$CarrierSpecific, $robinheghan$elm_phone_numbers$PhoneNumber$SmsServices, $robinheghan$elm_phone_numbers$PhoneNumber$NoInternationalDialling]);
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $robinheghan$elm_phone_numbers$PhoneNumber$Countries$countryUS = {
	countryCode: '1',
	generalNumberPattern: A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('[2-9]\\d{9}')),
	id: 'US',
	internationalPrefix: $elm$core$Maybe$Just('011'),
	nationalPrefix: $elm$core$Maybe$Just('1'),
	numberTypes: _List_fromArray(
		[
			{
			exampleNumber: '2015550123',
			numberType: $robinheghan$elm_phone_numbers$PhoneNumber$FixedLine,
			pattern: A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				$elm$regex$Regex$fromString('(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}'))
		},
			{
			exampleNumber: '2015550123',
			numberType: $robinheghan$elm_phone_numbers$PhoneNumber$Mobile,
			pattern: A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				$elm$regex$Regex$fromString('(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}'))
		},
			{
			exampleNumber: '8002345678',
			numberType: $robinheghan$elm_phone_numbers$PhoneNumber$TollFree,
			pattern: A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				$elm$regex$Regex$fromString('8(?:00|33|44|55|66|77|88)[2-9]\\d{6}'))
		},
			{
			exampleNumber: '9002345678',
			numberType: $robinheghan$elm_phone_numbers$PhoneNumber$PremiumRate,
			pattern: A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				$elm$regex$Regex$fromString('900[2-9]\\d{6}'))
		},
			{
			exampleNumber: '5002345678',
			numberType: $robinheghan$elm_phone_numbers$PhoneNumber$PersonalNumber,
			pattern: A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				$elm$regex$Regex$fromString('52(?:35(?:[02-46-9]\\d|1[02-9]|5[0-46-9])|45(?:[034]\\d|1[02-9]|2[024-9]|5[0-46-9]))\\d{4}|52(?:3[2-46-9]|4[2-4])(?:[02-9]\\d|1[02-9])\\d{4}|5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}'))
		}
		])
};
var $robinheghan$elm_phone_numbers$PhoneNumber$localizeNumber = F2(
	function (country, number) {
		var _v0 = country.internationalPrefix;
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Just(number);
		} else {
			var prefix = _v0.a;
			var prefixLength = $elm$core$String$length(prefix);
			var countryCodeLength = $elm$core$String$length(country.countryCode);
			return A2($elm$core$String$startsWith, '+', number) ? (_Utils_eq(
				country.countryCode,
				A2(
					$elm$core$String$left,
					countryCodeLength,
					A2($elm$core$String$dropLeft, 1, number))) ? $elm$core$Maybe$Just(
				A2($elm$core$String$dropLeft, countryCodeLength + 1, number)) : $elm$core$Maybe$Nothing) : (A2($elm$core$String$startsWith, prefix, number) ? (_Utils_eq(
				country.countryCode,
				A2(
					$elm$core$String$left,
					countryCodeLength,
					A2($elm$core$String$dropLeft, prefixLength, number))) ? $elm$core$Maybe$Just(
				A2($elm$core$String$dropLeft, prefixLength + countryCodeLength, number)) : $elm$core$Maybe$Nothing) : $elm$core$Maybe$Just(number));
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $robinheghan$elm_phone_numbers$PhoneNumber$regexExactMatch = F2(
	function (regex, str) {
		var _v0 = A2($elm$regex$Regex$find, regex, str);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			return _Utils_eq(match.match, str);
		} else {
			return false;
		}
	});
var $robinheghan$elm_phone_numbers$PhoneNumber$matchingCountry = F4(
	function (number, defaultCountry, relevantTypes, country) {
		var maybeLocalNumber = A2($robinheghan$elm_phone_numbers$PhoneNumber$localizeNumber, country, number);
		var matchesSpec = F2(
			function (localNumber, desc) {
				return A2($robinheghan$elm_phone_numbers$PhoneNumber$regexExactMatch, desc.pattern, localNumber);
			});
		var isDefaultCountry = _Utils_eq(defaultCountry.id, country.id);
		if (maybeLocalNumber.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var localNumber = maybeLocalNumber.a;
			if (_Utils_eq(localNumber, number) && (!isDefaultCountry)) {
				return $elm$core$Maybe$Nothing;
			} else {
				var matchingTypes = A2(
					$elm$core$List$map,
					function ($) {
						return $.numberType;
					},
					A2(
						$elm$core$List$filter,
						matchesSpec(localNumber),
						A2(
							$elm$core$List$filter,
							function (nt) {
								return A2($elm$core$List$member, nt.numberType, relevantTypes);
							},
							country.numberTypes)));
				if (!matchingTypes.b) {
					return A2($robinheghan$elm_phone_numbers$PhoneNumber$regexExactMatch, country.generalNumberPattern, localNumber) ? $elm$core$Maybe$Just(
						_Utils_Tuple2(country, _List_Nil)) : $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(country, matchingTypes));
				}
			}
		}
	});
var $robinheghan$elm_phone_numbers$PhoneNumber$sanitizeNumber = function (str) {
	return A2(
		$elm$core$String$filter,
		function (c) {
			return !_Utils_eq(
				c,
				_Utils_chr(' '));
		},
		str);
};
var $robinheghan$elm_phone_numbers$PhoneNumber$matches = F2(
	function (config, number) {
		var sanitizedNumber = $robinheghan$elm_phone_numbers$PhoneNumber$sanitizeNumber(number);
		return A2(
			$elm$core$List$filterMap,
			A3($robinheghan$elm_phone_numbers$PhoneNumber$matchingCountry, sanitizedNumber, config.defaultCountry, config.types),
			A2($elm$core$List$cons, config.defaultCountry, config.otherCountries));
	});
var $robinheghan$elm_phone_numbers$PhoneNumber$valid = F2(
	function (config, number) {
		var _v0 = A2($robinheghan$elm_phone_numbers$PhoneNumber$matches, config, number);
		if (!_v0.b) {
			return false;
		} else {
			return true;
		}
	});
var $author$project$Shared$validUSNumber = function (number) {
	return (number === '') ? true : A2(
		$robinheghan$elm_phone_numbers$PhoneNumber$valid,
		{defaultCountry: $robinheghan$elm_phone_numbers$PhoneNumber$Countries$countryUS, otherCountries: _List_Nil, types: $robinheghan$elm_phone_numbers$PhoneNumber$anyType},
		number);
};
var $author$project$Shared$contactPhone = F2(
	function (model, newPhone) {
		return model.contactDialogState.phoneError ? _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{
							phone: $elm$core$Maybe$Just(
								(newPhone === '+1 ( ') ? '' : ((_Utils_cmp(
									$elm$core$String$length(newPhone),
									$elm$core$String$length(
										A2($elm$core$Maybe$withDefault, newPhone, s.phone))) < 0) ? newPhone : $author$project$Shared$prettyPhoneNumber(newPhone))),
							phoneError: !$author$project$Shared$validUSNumber(
								A2(
									$elm$core$String$right,
									10,
									A2(
										$elm$core$String$filter,
										$elm$core$Char$isDigit,
										$author$project$Shared$prettyPhoneNumber(newPhone))))
						});
				}(model.contactDialogState)
			}) : _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{
							phone: $elm$core$Maybe$Just(
								(newPhone === '+1 ( ') ? '' : ((_Utils_cmp(
									$elm$core$String$length(newPhone),
									$elm$core$String$length(
										A2($elm$core$Maybe$withDefault, newPhone, s.phone))) < 0) ? newPhone : $author$project$Shared$prettyPhoneNumber(newPhone)))
						});
				}(model.contactDialogState)
			});
	});
var $author$project$Shared$contactUsBack = function (model) {
	return (!model.contactDialogState.currentPage) ? _Utils_update(
		model,
		{
			contactDialogState: function (c) {
				return _Utils_update(
					c,
					{showContactUs: false});
			}(model.contactDialogState),
			navHoverTracker: A2(
				$elm$core$List$map,
				function (b) {
					return _Utils_update(
						b,
						{hovered: false});
				},
				model.navHoverTracker)
		}) : _Utils_update(
		model,
		{
			contactDialogState: function (s) {
				return _Utils_update(
					s,
					{currentPage: s.currentPage - 1});
			}(model.contactDialogState)
		});
};
var $author$project$Shared$contactUsNext = function (model) {
	var _v0 = model.contactDialogState.currentPage;
	switch (_v0) {
		case 0:
			return (!($elm$core$String$trim(model.contactDialogState.name) === '')) ? _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{
								currentPage: s.currentPage + 1,
								name: $elm$core$String$trim(s.name),
								nameError: false
							});
					}(model.contactDialogState)
				}) : _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{name: s.name, nameError: true});
					}(model.contactDialogState)
				});
		case 1:
			return ($panthershark$email_parser$Email$isValid(
				A2($elm$core$Maybe$withDefault, '', model.contactDialogState.email)) && $author$project$Shared$validUSNumber(
				A2(
					$elm$core$String$right,
					10,
					A2(
						$elm$core$String$filter,
						$elm$core$Char$isDigit,
						A2($elm$core$Maybe$withDefault, '', model.contactDialogState.phone))))) ? _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{currentPage: s.currentPage + 1, emailError: false, phoneError: false});
					}(model.contactDialogState)
				}) : ((!$panthershark$email_parser$Email$isValid(
				A2($elm$core$Maybe$withDefault, '', model.contactDialogState.email))) ? _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{emailError: true, phoneError: false});
					}(model.contactDialogState)
				}) : ((!$author$project$Shared$validUSNumber(
				A2(
					$elm$core$String$right,
					10,
					A2(
						$elm$core$String$filter,
						$elm$core$Char$isDigit,
						A2($elm$core$Maybe$withDefault, '', model.contactDialogState.phone))))) ? _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{phoneError: true});
					}(model.contactDialogState)
				}) : _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{currentPage: s.currentPage + 1, emailError: false, phoneError: false});
					}(model.contactDialogState)
				})));
		default:
			return _Utils_update(
				model,
				{
					contactDialogState: function (s) {
						return _Utils_update(
							s,
							{currentPage: s.currentPage + 1});
					}(model.contactDialogState)
				});
	}
};
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$email = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('email'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('email')
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $author$project$Palette$gciBlueLight = A3($mdgriffith$elm_ui$Element$rgb255, 59, 85, 138);
var $mdgriffith$elm_ui$Internal$Flag$bgGradient = $mdgriffith$elm_ui$Internal$Flag$flag(10);
var $mdgriffith$elm_ui$Element$Background$gradient = function (_v0) {
	var angle = _v0.angle;
	var steps = _v0.steps;
	if (!steps.b) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		if (!steps.b.b) {
			var clr = steps.a;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$bgColor,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Colored,
					'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
					'background-color',
					clr));
		} else {
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$bgGradient,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Single,
					'bg-grad-' + A2(
						$elm$core$String$join,
						'-',
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$floatClass(angle),
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$formatColorClass, steps))),
					'background-image',
					'linear-gradient(' + (A2(
						$elm$core$String$join,
						', ',
						A2(
							$elm$core$List$cons,
							$elm$core$String$fromFloat(angle) + 'rad',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$formatColor, steps))) + ')')));
		}
	}
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Font$light = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textLight);
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$Shared$onEnter = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$on,
			'keyup',
			A2(
				$elm$json$Json$Decode$andThen,
				function (key) {
					return (key === 'Enter') ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
				},
				A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
};
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $author$project$Shared$setContactUs = F2(
	function (model, b) {
		return ((!b) && (_Utils_eq(model.contactDialogState.send, $author$project$Storage$SendError) || _Utils_eq(model.contactDialogState.send, $author$project$Storage$SendOk))) ? _Utils_update(
			model,
			{
				contactDialogState: function (c) {
					return _Utils_update(
						c,
						{currentPage: 0, email: $elm$core$Maybe$Nothing, message: $elm$core$Maybe$Nothing, name: '', phone: $elm$core$Maybe$Nothing, send: $author$project$Storage$Waiting, showContactUs: b});
				}(model.contactDialogState)
			}) : _Utils_update(
			model,
			{
				contactDialogState: function (c) {
					return _Utils_update(
						c,
						{showContactUs: b});
				}(model.contactDialogState)
			});
	});
var $author$project$Shared$setStateToSend = function (model) {
	var _v0 = model.contactDialogState.currentPage;
	if (_v0 === 2) {
		return (A2($elm$core$Maybe$withDefault, '', model.contactDialogState.message) === '') ? _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{messageError: true});
				}(model.contactDialogState)
			}) : _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{currentPage: s.currentPage + 1, messageError: false, send: $author$project$Storage$Send});
				}(model.contactDialogState)
			});
	} else {
		return _Utils_update(
			model,
			{
				contactDialogState: function (s) {
					return _Utils_update(
						s,
						{currentPage: s.currentPage + 1});
				}(model.contactDialogState)
			});
	}
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $elm$core$String$toUpper = _String_toUpper;
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$Palette$warning = A3($mdgriffith$elm_ui$Element$rgb255, 204, 51, 51);
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Shared$contactUs = F2(
	function (shared, message) {
		var w = shared.width;
		var state = shared.contactDialogState;
		var h = shared.height;
		var device = shared.device._class;
		var isBigDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$BigDesktop);
		var isDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$Desktop);
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var _break = $mdgriffith$elm_ui$Element$html(
			A2($elm$html$Html$br, _List_Nil, _List_Nil));
		var address = shared.address;
		var contactDialog = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = state.currentPage;
					switch (_v0) {
						case 0:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(150)),
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('backgroundGrow'))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$alignTop,
												$mdgriffith$elm_ui$Element$padding(10)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
														$mdgriffith$elm_ui$Element$centerX
													]),
												$mdgriffith$elm_ui$Element$text('Welcome to GCI!'))
											])),
										state.nameError ? A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning)
											]),
										$mdgriffith$elm_ui$Element$text('Please tell us who you are.')) : A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$padding(10)
											]),
										$mdgriffith$elm_ui$Element$text('Can we get a name?')),
										A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$rounded(100),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(
													A2($elm$core$Basics$min, 400, w))),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$author$project$Shared$onEnter(
												message(
													$author$project$Shared$contactUsNext(shared))),
												$mdgriffith$elm_ui$Element$Border$color(
												state.nameError ? $author$project$Palette$warning : $author$project$Palette$gciBlue),
												$mdgriffith$elm_ui$Element$Border$width(2),
												$mdgriffith$elm_ui$Element$Font$center
											]),
										{
											label: $mdgriffith$elm_ui$Element$Input$labelHidden('Name'),
											onChange: function (s) {
												return message(
													A2($author$project$Shared$contactName, shared, s));
											},
											placeholder: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$center]),
													$mdgriffith$elm_ui$Element$text('First & Last'))),
											text: state.name
										})
									]));
						case 1:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(300)),
										$mdgriffith$elm_ui$Element$padding(30),
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$spacing(25),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('backgroundGrow'))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$alignTop
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$paragraph,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
														$mdgriffith$elm_ui$Element$centerX,
														$mdgriffith$elm_ui$Element$Font$center
													]),
												_List_fromArray(
													[
														function () {
														var _v1 = $elm$core$String$trim(state.name);
														if (_v1 === '') {
															return $mdgriffith$elm_ui$Element$text('Thanks for reaching out!');
														} else {
															var n = _v1;
															var _v2 = $elm$core$List$head(
																A2($elm$core$String$split, ' ', n));
															if (_v2.$ === 'Just') {
																var first_name = _v2.a;
																var _v3 = $elm$core$String$uncons(first_name);
																if (_v3.$ === 'Just') {
																	var _v4 = _v3.a;
																	var first = _v4.a;
																	var tail = _v4.b;
																	return $mdgriffith$elm_ui$Element$text(
																		'Thanks for reaching out ' + (_Utils_ap(
																			$elm$core$String$toUpper(
																				$elm$core$String$fromChar(first)),
																			tail) + '!'));
																} else {
																	return $mdgriffith$elm_ui$Element$text('Thanks for reaching out!');
																}
															} else {
																return $mdgriffith$elm_ui$Element$text('Thanks for reaching out!');
															}
														}
													}()
													]))
											])),
										state.emailError ? A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning)
											]),
										$mdgriffith$elm_ui$Element$text('That email seems wrong.')) : (state.phoneError ? A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning)
											]),
										$mdgriffith$elm_ui$Element$text('That phone number seems wrong')) : A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$centerX
											]),
										$mdgriffith$elm_ui$Element$text('How can we contact you?'))),
										A2(
										$mdgriffith$elm_ui$Element$Input$email,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$rounded(100),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(
													A2($elm$core$Basics$min, w, 400))),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$center,
												$author$project$Shared$onEnter(
												message(
													$author$project$Shared$contactUsNext(shared))),
												$mdgriffith$elm_ui$Element$Border$color(
												state.emailError ? $author$project$Palette$warning : $author$project$Palette$gciBlue),
												$mdgriffith$elm_ui$Element$Border$width(2)
											]),
										{
											label: $mdgriffith$elm_ui$Element$Input$labelHidden('Email'),
											onChange: function (s) {
												return message(
													A2($author$project$Shared$contactEmail, shared, s));
											},
											placeholder: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$center]),
													$mdgriffith$elm_ui$Element$text('name@example.com'))),
											text: A2($elm$core$Maybe$withDefault, '', state.email)
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$rounded(100),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(
													A2($elm$core$Basics$min, w, 400))),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$center,
												$author$project$Shared$onEnter(
												message(
													$author$project$Shared$contactUsNext(shared))),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$elm$html$Html$Attributes$id('phoneInput')),
												$mdgriffith$elm_ui$Element$Border$color(
												state.phoneError ? $author$project$Palette$warning : $author$project$Palette$gciBlue),
												$mdgriffith$elm_ui$Element$Border$width(2)
											]),
										{
											label: $mdgriffith$elm_ui$Element$Input$labelHidden('Phone Number'),
											onChange: function (s) {
												return message(
													A2($author$project$Shared$contactPhone, shared, s));
											},
											placeholder: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$center]),
													$mdgriffith$elm_ui$Element$text('(123) 456 - 7890'))),
											text: A2($elm$core$Maybe$withDefault, '', state.phone)
										})
									]));
						case 2:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$padding(30),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(
											isPhone ? 310 : A2(
												$elm$core$Basics$min,
												$elm$core$Basics$floor(h * 0.87),
												530))),
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('backgroundGrow')),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('gciScroll'))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$alignTop,
												$mdgriffith$elm_ui$Element$padding(10)
											]),
										_List_fromArray(
											[
												state.messageError ? A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
														$mdgriffith$elm_ui$Element$centerX,
														$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning)
													]),
												$mdgriffith$elm_ui$Element$text('Use your words please!')) : A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
														$mdgriffith$elm_ui$Element$centerX
													]),
												$mdgriffith$elm_ui$Element$text('What can we do for you?'))
											])),
										A2(
										$mdgriffith$elm_ui$Element$Input$multiline,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$rounded(20),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(
													A2($elm$core$Basics$min, w, 500))),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(
													isPhone ? 200 : A2(
														$elm$core$Basics$min,
														$elm$core$Basics$floor(h * 0.72),
														415))),
												$mdgriffith$elm_ui$Element$alignTop,
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Border$color(
												state.messageError ? $author$project$Palette$warning : $author$project$Palette$gciBlue),
												$mdgriffith$elm_ui$Element$Border$width(2)
											]),
										{
											label: $mdgriffith$elm_ui$Element$Input$labelHidden('Message'),
											onChange: function (s) {
												return message(
													A2($author$project$Shared$contactMsg, shared, s));
											},
											placeholder: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													A2(
														$mdgriffith$elm_ui$Element$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$text('Type message here.')
															])))),
											spellcheck: true,
											text: A2($elm$core$Maybe$withDefault, '', state.message)
										})
									]));
						case 3:
							var _v5 = state.send;
							switch (_v5.$) {
								case 'SendOk':
									return A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(100)),
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$elm$html$Html$Attributes$class('backgroundGrow'))
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$alignTop,
														$mdgriffith$elm_ui$Element$centerY,
														$mdgriffith$elm_ui$Element$padding(10)
													]),
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
																$mdgriffith$elm_ui$Element$centerX,
																$mdgriffith$elm_ui$Element$centerY
															]),
														$mdgriffith$elm_ui$Element$text('Sent!'))
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
														$mdgriffith$elm_ui$Element$centerX
													]),
												A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$center]),
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text('We will reach back out to '),
															$mdgriffith$elm_ui$Element$html(
															A2($elm$html$Html$br, _List_Nil, _List_Nil)),
															$mdgriffith$elm_ui$Element$text(
															A2($elm$core$Maybe$withDefault, 'you', state.email) + ' soon!')
														])))
											]));
								case 'Waiting':
									return A2(
										$mdgriffith$elm_ui$Element$image,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(120)),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(120)),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$inFront(
												A2(
													$mdgriffith$elm_ui$Element$image,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(80)),
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(80)),
															$mdgriffith$elm_ui$Element$centerX,
															$mdgriffith$elm_ui$Element$centerY
														]),
													{description: 'logo', src: '/img/logo_sans_text.svg'}))
											]),
										{description: 'Loading...', src: '/img/loading.svg'});
								case 'SendError':
									return A2(
										$mdgriffith$elm_ui$Element$link,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(100)),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$elm$html$Html$Attributes$class('backgroundGrow')),
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
													])),
												$mdgriffith$elm_ui$Element$padding(25)
											]),
										{
											label: A2(
												$mdgriffith$elm_ui$Element$paragraph,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$center]),
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning),
																A2($author$project$Palette$fontSize, device, $author$project$Palette$Md)
															]),
														$mdgriffith$elm_ui$Element$text('Send Failed!')),
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil)),
														$mdgriffith$elm_ui$Element$text('Check that your email and phone entries are valid.'),
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil)),
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil)),
														$mdgriffith$elm_ui$Element$text('If that doesn\'t work please email us at:'),
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil)),
														$mdgriffith$elm_ui$Element$text(shared.address.email),
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil)),
														$mdgriffith$elm_ui$Element$text('Our appologies for the inconvenience.')
													])),
											url: shared.address.emailLink
										});
								default:
									return A2(
										$mdgriffith$elm_ui$Element$image,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(120)),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(120)),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$inFront(
												A2(
													$mdgriffith$elm_ui$Element$image,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(80)),
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(80)),
															$mdgriffith$elm_ui$Element$centerX,
															$mdgriffith$elm_ui$Element$centerY
														]),
													{description: 'logo', src: '/img/logo_sans_text.svg'}))
											]),
										{description: 'Loading...', src: '/img/loading.svg'});
							}
						default:
							return A2($mdgriffith$elm_ui$Element$row, _List_Nil, _List_Nil);
					}
				}(),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$padding(15),
							$mdgriffith$elm_ui$Element$alignBottom
						]),
					((state.currentPage < 3) || _Utils_eq(state.send, $author$project$Storage$SendError)) ? _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									$mdgriffith$elm_ui$Element$alignLeft,
									A2($mdgriffith$elm_ui$Element$paddingXY, 30, 10),
									$mdgriffith$elm_ui$Element$Border$rounded(100),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlueLight),
											$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlueLight)
										]))
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('Back'),
								onPress: $elm$core$Maybe$Just(
									message(
										$author$project$Shared$contactUsBack(shared)))
							}),
							(_Utils_eq(state.send, $author$project$Storage$SendError) && (state.currentPage === 3)) ? $mdgriffith$elm_ui$Element$none : A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									$mdgriffith$elm_ui$Element$alignRight,
									A2($mdgriffith$elm_ui$Element$paddingXY, 30, 10),
									$mdgriffith$elm_ui$Element$Border$rounded(100),
									$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlueLight),
											$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
										])),
									$mdgriffith$elm_ui$Element$Border$width(2)
								]),
							(state.currentPage === 2) ? {
								label: $mdgriffith$elm_ui$Element$text('Send!'),
								onPress: $elm$core$Maybe$Just(
									message(
										$author$project$Shared$setStateToSend(shared)))
							} : {
								label: $mdgriffith$elm_ui$Element$text('Next'),
								onPress: $elm$core$Maybe$Just(
									message(
										$author$project$Shared$contactUsNext(shared)))
							})
						]) : ((_Utils_eq(state.send, $author$project$Storage$Waiting) || _Utils_eq(state.send, $author$project$Storage$Send)) ? _List_fromArray(
						[$mdgriffith$elm_ui$Element$none]) : _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									A2($mdgriffith$elm_ui$Element$paddingXY, 100, 10),
									$mdgriffith$elm_ui$Element$Border$rounded(100),
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlueLight),
											$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
										])),
									$mdgriffith$elm_ui$Element$Border$width(2)
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('Close'),
								onPress: $elm$core$Maybe$Just(
									message(
										A2($author$project$Shared$setContactUs, shared, false)))
							})
						]))),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: 0, top: 1})
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$newTabLink,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text(address.street),
								url: address.mapsLink
							}),
							_break,
							A2(
							$mdgriffith$elm_ui$Element$newTabLink,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text(address.city),
								url: address.mapsLink
							}),
							_break,
							A2(
							$mdgriffith$elm_ui$Element$link,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
								]),
							{
								label: $mdgriffith$elm_ui$Element$text(address.phone),
								url: address.phoneLink
							}),
							$mdgriffith$elm_ui$Element$text('|'),
							A2(
							$mdgriffith$elm_ui$Element$link,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
								]),
							{
								label: $mdgriffith$elm_ui$Element$text(address.email),
								url: address.emailLink
							})
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('point_enter_down_long')),
					$mdgriffith$elm_ui$Element$behindContent(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$gradient(
								{
									angle: $elm$core$Basics$degrees(165),
									steps: _List_fromArray(
										[
											A4($mdgriffith$elm_ui$Element$rgba255, 87, 83, 78, 0.7),
											A4($mdgriffith$elm_ui$Element$rgba255, 17, 24, 39, 0.9)
										])
								}),
								$mdgriffith$elm_ui$Element$Events$onClick(
								message(
									A2($author$project$Shared$setContactUs, shared, false)))
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(
							A2($elm$core$Basics$min, 600, w))),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(
							A2($elm$core$Basics$min, h, 600))),
						$mdgriffith$elm_ui$Element$centerX,
						isPhone ? $mdgriffith$elm_ui$Element$alignTop : $mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$shadow(
						{
							blur: 20,
							color: A3($mdgriffith$elm_ui$Element$rgb, 0.25, 0.25, 0.3),
							offset: _Utils_Tuple2(0, 0),
							size: 1
						}),
						$mdgriffith$elm_ui$Element$Border$rounded(25),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(
									isPhone ? 0 : 5),
									$mdgriffith$elm_ui$Element$alignRight
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignRight,
											$mdgriffith$elm_ui$Element$Font$family(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$typeface('icons')
												])),
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
											$mdgriffith$elm_ui$Element$pointer,
											$mdgriffith$elm_ui$Element$Font$color(
											(isDesktop || isBigDesktop) ? $author$project$Palette$white : $author$project$Palette$warning),
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning)
												]))
										]),
									{
										label: $mdgriffith$elm_ui$Element$text('\uE800'),
										onPress: $elm$core$Maybe$Just(
											message(
												A2($author$project$Shared$setContactUs, shared, false)))
									})
								])))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$fillPortion(3)),
								$mdgriffith$elm_ui$Element$clip
							]),
						{description: 'Picutre of GCI\'s building', src: '/img/building2.jpg'}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$fillPortion(5))
							]),
						contactDialog)
					])));
	});
var $author$project$Shared$clearUser = function (model) {
	return _Utils_update(
		model,
		{user: $elm$core$Maybe$Nothing});
};
var $elm$html$Html$Attributes$download = function (fileName) {
	return A2($elm$html$Html$Attributes$stringProperty, 'download', fileName);
};
var $mdgriffith$elm_ui$Element$download = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$download('')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$ContentInfo = {$: 'ContentInfo'};
var $mdgriffith$elm_ui$Element$Region$footer = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$ContentInfo);
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$Shared$footer = F2(
	function (shared, message) {
		var year = shared.currentYear;
		var w = shared.width;
		var spacer = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 28, 10)
				]),
			$mdgriffith$elm_ui$Element$text('|'));
		var socials = shared.socialMedia;
		var navbtns = shared.navHoverTracker;
		var footerSocialBtn = function (item) {
			return A2(
				$mdgriffith$elm_ui$Element$newTabLink,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$family(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$typeface('icons')
							])),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(item.hoverColor)
							])),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$padding(10)
					]),
				{
					label: $mdgriffith$elm_ui$Element$text(item._char),
					url: item.link
				});
		};
		var footerNavBtn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
						])),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$padding(10)
				]);
			var _v1 = item.onClick;
			if (_v1.$ === 'Url') {
				var s = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$link,
					attr,
					{
						label: $mdgriffith$elm_ui$Element$text(item.name),
						url: s
					});
			} else {
				var b = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					attr,
					{
						label: $mdgriffith$elm_ui$Element$text(item.name),
						onPress: $elm$core$Maybe$Just(
							message(
								A2($author$project$Shared$setContactUs, shared, true)))
					});
			}
		};
		var footerCertification = function (item) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				(shared.width < 1000) ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]) : _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						$mdgriffith$elm_ui$Element$centerX
					]),
				A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(150)),
							$mdgriffith$elm_ui$Element$centerX
						]),
					{description: item.description, src: item.src}));
		};
		var device = shared.device._class;
		var isBigDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$BigDesktop);
		var isDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$Desktop);
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var certifications = shared.certifications;
		var address = shared.address;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Region$footer,
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 70, 70, 72)),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 0, left: 0, right: 0, top: 8})
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$minimum, shared.width, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$spacing(40),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$minimum, shared.width, $mdgriffith$elm_ui$Element$fill))
							]),
						A2($elm$core$List$map, footerCertification, certifications)),
						(isDesktop || isBigDesktop) ? A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$bold,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
								$mdgriffith$elm_ui$Element$centerX
							]),
						_Utils_ap(
							A2($elm$core$List$map, footerNavBtn, navbtns),
							A2(
								$elm$core$List$cons,
								spacer,
								A2($elm$core$List$map, footerSocialBtn, socials)))) : A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Font$bold,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$minimum, w, $mdgriffith$elm_ui$Element$fill))
									]),
								A2(
									$elm$core$List$map,
									function (btn) {
										return A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
												]),
											footerNavBtn(btn));
									},
									navbtns)),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Md)
									]),
								A2($elm$core$List$map, footerSocialBtn, socials))
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Border$widthEach(
								{bottom: 1, left: 0, right: 0, top: 1}),
								$mdgriffith$elm_ui$Element$padding(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$newTabLink,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										{
											label: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$padding(10),
														$mdgriffith$elm_ui$Element$centerX
													]),
												$mdgriffith$elm_ui$Element$text(address.street)),
											url: address.mapsLink
										}),
										A2(
										$mdgriffith$elm_ui$Element$newTabLink,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										{
											label: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$padding(10),
														$mdgriffith$elm_ui$Element$centerX
													]),
												$mdgriffith$elm_ui$Element$text(address.city)),
											url: address.mapsLink
										}),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										A2(
											$mdgriffith$elm_ui$Element$link,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$padding(10),
													$mdgriffith$elm_ui$Element$centerX
												]),
											{
												label: $mdgriffith$elm_ui$Element$text(address.phone),
												url: address.phoneLink
											})),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										A2(
											$mdgriffith$elm_ui$Element$link,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$padding(10),
													$mdgriffith$elm_ui$Element$centerX
												]),
											{
												label: $mdgriffith$elm_ui$Element$text(address.email),
												url: address.emailLink
											}))
									])),
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$spacing(20),
										$mdgriffith$elm_ui$Element$padding(10)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm)
											]),
										$mdgriffith$elm_ui$Element$text('Cage: 7DGP6')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm)
											]),
										$mdgriffith$elm_ui$Element$text('Duns: 80126549')),
										function () {
										var _v0 = shared.user;
										if (_v0.$ === 'Nothing') {
											return A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
														$mdgriffith$elm_ui$Element$inFront(
														A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$centerX,
																	$mdgriffith$elm_ui$Element$alignBottom,
																	$mdgriffith$elm_ui$Element$transparent(true),
																	$mdgriffith$elm_ui$Element$mouseOver(
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$transparent(false)
																		])),
																	$mdgriffith$elm_ui$Element$htmlAttribute(
																	$elm$html$Html$Attributes$class('g-signin2')),
																	$mdgriffith$elm_ui$Element$htmlAttribute(
																	A2($elm$html$Html$Attributes$attribute, 'data-onsuccess', 'onSignIn'))
																]),
															$mdgriffith$elm_ui$Element$none))
													]),
												$mdgriffith$elm_ui$Element$text('Login'));
										} else {
											return A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
														$mdgriffith$elm_ui$Element$mouseOver(
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
															]))
													]),
												{
													label: $mdgriffith$elm_ui$Element$text('Sign Out'),
													onPress: $elm$core$Maybe$Just(
														message(
															$author$project$Shared$clearUser(shared)))
												});
										}
									}()
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
								A2($mdgriffith$elm_ui$Element$paddingXY, 200, 20),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								isPhone ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$padding(2),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX]),
											$mdgriffith$elm_ui$Element$text(
												'©' + ($elm$core$String$fromInt(year) + ' Global Circuit Innovations, Inc.')))),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$padding(2),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
													]))
											]),
										A2(
											$mdgriffith$elm_ui$Element$download,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX]),
											{
												label: $mdgriffith$elm_ui$Element$text('Sitemap'),
												url: '/sitemap.xml'
											})),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$padding(2),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
													]))
											]),
										A2(
											$mdgriffith$elm_ui$Element$link,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX]),
											{
												label: $mdgriffith$elm_ui$Element$text('Terms and Conditions'),
												url: '/terms'
											})),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$padding(2),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
													]))
											]),
										A2(
											$mdgriffith$elm_ui$Element$download,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$mouseOver(
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue)
														])),
													$mdgriffith$elm_ui$Element$pointer,
													$mdgriffith$elm_ui$Element$centerX
												]),
											{
												label: $mdgriffith$elm_ui$Element$text('Press Materials'),
												url: '/download/press.zip'
											}))
									])),
								A2(
								$mdgriffith$elm_ui$Element$newTabLink,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(5),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb255, 144, 0, 255))
											]))
									]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(5),
												A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$image,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(20))
													]),
												{description: 'Regal Tech Support, LLC Logo', src: 'https://regaltechsupport.com/img/favicon.ico'}),
												$mdgriffith$elm_ui$Element$text('Website made by Regal Tech Support')
											])),
									url: 'https://regaltechsupport.com'
								})
							]))
					])));
	});
var $author$project$Palette$XXlg = {$: 'XXlg'};
var $mdgriffith$elm_ui$Element$Font$extraBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textExtraBold);
var $author$project$Pages$Electronics$head = function (shared) {
	var w = shared.width;
	var h = shared.height;
	var device = shared.device._class;
	var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
	return A2(
		$mdgriffith$elm_ui$Element$image,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(h)),
				$mdgriffith$elm_ui$Element$clip,
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3))
						]),
					$mdgriffith$elm_ui$Element$none)),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$Font$extraBold,
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$padding(
							isPhone ? 3 : $elm$core$Basics$floor(
								A2($elm$core$Basics$min, 150, w * 0.1)))
						]),
					A2(
						$elm$core$List$intersperse,
						$mdgriffith$elm_ui$Element$html(
							A2($elm$html$Html$br, _List_Nil, _List_Nil)),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('GCI'),
								$mdgriffith$elm_ui$Element$text('Delivers'),
								$mdgriffith$elm_ui$Element$text('Electronic Solutions.')
							]))))
			]),
		{description: 'Photo of circuit manufacturing.', src: '/img/electronics.jpg'});
};
var $mdgriffith$elm_ui$Element$Border$innerShadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: true, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Internal$Model$Main = {$: 'Main'};
var $mdgriffith$elm_ui$Element$Region$mainContent = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Main);
var $author$project$Palette$Xlg = {$: 'Xlg'};
var $author$project$Pages$Electronics$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('GCI’s technology can generate a broad range of solutions.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('mainText'))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Our engineering experience enables us to provide solutions for electronics ranging from a resistor assembly on a B‑52 Windshield Wiper Speed Control to a Variable Frequency Driver solution in a Patriot Missile Battery Environmental Control Unit.')
						]))
				]));
	});
var $author$project$Palette$maxWidth = 2000;
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $elm$core$Basics$modBy = _Basics_modBy;
var $author$project$Shared$ael = $author$project$Shared$animatedUi($mdgriffith$elm_ui$Element$el);
var $author$project$Shared$arow = $author$project$Shared$animatedUi($mdgriffith$elm_ui$Element$row);
var $mdgriffith$elm_ui$Internal$Model$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Element$below = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Below, element);
};
var $author$project$Palette$black = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0);
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $author$project$Internal$Animation$Ease = function (a) {
	return {$: 'Ease', a: a};
};
var $author$project$Internal$Ease$EaseIn = {$: 'EaseIn'};
var $author$project$Simple$Animation$easeIn = $author$project$Internal$Animation$Ease($author$project$Internal$Ease$EaseIn);
var $author$project$Shared$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Shared$navBtnHover = F2(
	function (model, id) {
		return _Utils_update(
			model,
			{
				navHoverTracker: A2(
					$elm$core$List$indexedMap,
					$author$project$Shared$setHovered(id),
					model.navHoverTracker)
			});
	});
var $author$project$Shared$navBtnUnHover = F2(
	function (model, id) {
		return _Utils_update(
			model,
			{
				navHoverTracker: A2(
					$elm$core$List$map,
					function (i) {
						return _Utils_update(
							i,
							{hovered: false});
					},
					model.navHoverTracker)
			});
	});
var $mdgriffith$elm_ui$Internal$Model$Navigation = {$: 'Navigation'};
var $mdgriffith$elm_ui$Element$Region$navigation = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Navigation);
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $mdgriffith$elm_ui$Element$spaceEvenly = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$spacing, $mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly);
var $author$project$Shared$toggleMobileNav = function (model) {
	return _Utils_update(
		model,
		{showMobileNav: !model.showMobileNav});
};
var $author$project$Shared$navbar = F2(
	function (shared, message) {
		var spacer = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
				]),
			_List_Nil);
		var navbarBtn = F2(
			function (_v6, shouldOnClick) {
				var id = _v6.a;
				var item = _v6.b;
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(80)),
							$mdgriffith$elm_ui$Element$pointer,
							A2($mdgriffith$elm_ui$Element$paddingXY, 80, 0),
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class(
											item.hovered ? 'wipe_point_active' : 'wipe_point')),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$black)
											]),
										$mdgriffith$elm_ui$Element$text(item.name))
									]))),
							$mdgriffith$elm_ui$Element$behindContent(
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
										$mdgriffith$elm_ui$Element$Border$innerShadow(
										{
											blur: 8,
											color: A3($mdgriffith$elm_ui$Element$rgb255, 13, 25, 48),
											offset: _Utils_Tuple2(0, 0),
											size: 0.15
										})
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white)
											]),
										$mdgriffith$elm_ui$Element$text(item.name))
									]))),
							shouldOnClick ? $mdgriffith$elm_ui$Element$Events$onClick(
							message(
								A2($author$project$Shared$setContactUs, shared, true))) : $mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							message(
								A2($author$project$Shared$navBtnHover, shared, id))),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							message(
								A2($author$project$Shared$navBtnUnHover, shared, id)))
						]),
					_List_Nil);
			});
		var navBtn = function (_v5) {
			var id = _v5.a;
			var item = _v5.b;
			var _v4 = item.onClick;
			if (_v4.$ === 'Url') {
				var s = _v4.a;
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_Nil,
					{
						label: A2(
							navbarBtn,
							_Utils_Tuple2(id, item),
							false),
						url: s
					});
			} else {
				return A2(
					navbarBtn,
					_Utils_Tuple2(id, item),
					true);
			}
		};
		var display = shared.navbarDisplay;
		var device = shared.device._class;
		var isBigDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$BigDesktop);
		var isDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$Desktop);
		var logo = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$pointer
						]),
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(50)),
								A2(
								$mdgriffith$elm_ui$Element$paddingXY,
								_Utils_eq(device, $mdgriffith$elm_ui$Element$Phone) ? 10 : 24,
								0),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						{
							description: 'Global Circuit Innovations',
							src: (shared.width < 350) ? '/img/logo_sans_text.svg' : '/img/logo_sans_ring.svg'
						})),
				url: '/'
			});
		var mobileNavBtn = function (item) {
			var attr = _List_fromArray(
				[
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 2, left: 0, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('letterSpacing')),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$padding(5)
				]);
			var _v3 = item.onClick;
			if (_v3.$ === 'Url') {
				var s = _v3.a;
				return A2(
					$mdgriffith$elm_ui$Element$link,
					attr,
					{
						label: $mdgriffith$elm_ui$Element$text(item.name),
						url: s
					});
			} else {
				var b = _v3.a;
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					attr,
					{
						label: $mdgriffith$elm_ui$Element$text(item.name),
						onPress: $elm$core$Maybe$Just(
							message(
								A2($author$project$Shared$setContactUs, shared, true)))
					});
			}
		};
		var animationTracker = shared.navHoverTracker;
		return A3(
			$author$project$Shared$arow,
			function () {
				switch (display.$) {
					case 'Show':
						return $author$project$Simple$Animation$empty;
					case 'Hide':
						return A3(
							$author$project$Simple$Animation$fromTo,
							{
								duration: 300,
								options: _List_fromArray(
									[$author$project$Simple$Animation$easeIn])
							},
							_List_fromArray(
								[
									$author$project$Simple$Animation$Property$y(0)
								]),
							_List_fromArray(
								[
									$author$project$Simple$Animation$Property$y(-100)
								]));
					default:
						return A3(
							$author$project$Simple$Animation$fromTo,
							{
								duration: 300,
								options: _List_fromArray(
									[$author$project$Simple$Animation$easeIn])
							},
							_List_fromArray(
								[
									$author$project$Simple$Animation$Property$y(-100)
								]),
							_List_fromArray(
								[
									$author$project$Simple$Animation$Property$y(0)
								]));
				}
			}(),
			function (_v1) {
				var m = _v1.a;
				var a = _v1.b;
				return (!(isDesktop || isBigDesktop)) ? A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$behindContent(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$below(
									A3(
										$author$project$Shared$ael,
										shared.showMobileNav ? A3(
											$author$project$Simple$Animation$fromTo,
											{duration: 500, options: _List_Nil},
											_List_fromArray(
												[
													$author$project$Simple$Animation$Property$y(-300)
												]),
											_List_fromArray(
												[
													$author$project$Simple$Animation$Property$y(0)
												])) : A3(
											$author$project$Simple$Animation$fromTo,
											{duration: 500, options: _List_Nil},
											_List_fromArray(
												[
													$author$project$Simple$Animation$Property$y(0)
												]),
											_List_fromArray(
												[
													$author$project$Simple$Animation$Property$y(-300)
												])),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$Border$shadow(
												{
													blur: 3,
													color: $author$project$Palette$black,
													offset: _Utils_Tuple2(0, 2),
													size: 0.15
												})
											]),
										A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$Font$light,
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
													$mdgriffith$elm_ui$Element$padding(20),
													$mdgriffith$elm_ui$Element$spacing(20)
												]),
											A2($elm$core$List$map, mobileNavBtn, animationTracker))))
								]),
							$mdgriffith$elm_ui$Element$none)),
					a) : a;
			}(
				_Utils_Tuple2(
					shared.showMobileNav,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							$mdgriffith$elm_ui$Element$Font$family(
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$sansSerif])),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
							$mdgriffith$elm_ui$Element$Region$navigation,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$Border$shadow(
							{
								blur: 5,
								color: $author$project$Palette$black,
								offset: _Utils_Tuple2(0, 0),
								size: 0.15
							})
						]))),
			_List_fromArray(
				[
					function () {
					switch (device.$) {
						case 'Desktop':
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$centerX
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$spaceEvenly
											]),
										$elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[logo, spacer]),
													A2(
													$elm$core$List$map,
													navBtn,
													A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, animationTracker))
												])))
									]));
						case 'BigDesktop':
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$centerX
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$spaceEvenly
											]),
										$elm$core$List$concat(
											_List_fromArray(
												[
													_List_fromArray(
													[logo, spacer]),
													A2(
													$elm$core$List$map,
													navBtn,
													A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, animationTracker))
												])))
									]));
						default:
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(80)),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
											]),
										logo),
										_Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet) ? A2(
										$mdgriffith$elm_ui$Element$Input$button,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$alignRight,
												$mdgriffith$elm_ui$Element$centerY
											]),
										{
											label: A2(
												$mdgriffith$elm_ui$Element$image,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$height(
														$mdgriffith$elm_ui$Element$px(50))
													]),
												{
													description: 'contact button',
													src: shared.contactDialogState.showContactUs ? '/img/email-open.svg' : '/img/email.svg'
												}),
											onPress: $elm$core$Maybe$Just(
												message(
													A2($author$project$Shared$setContactUs, shared, true)))
										}) : $mdgriffith$elm_ui$Element$none,
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$alignRight]),
										{
											label: $mdgriffith$elm_ui$Element$html(
												A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$classList(
															_List_fromArray(
																[
																	_Utils_Tuple2('hamburger', true),
																	_Utils_Tuple2('hamburger--collapse', true),
																	_Utils_Tuple2('is-active', shared.showMobileNav)
																]))
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$div,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('hamburger-box')
																]),
															_List_fromArray(
																[
																	A2(
																	$elm$html$Html$div,
																	_List_fromArray(
																		[
																			$elm$html$Html$Attributes$class('hamburger-inner')
																		]),
																	_List_Nil)
																]))
														]))),
											onPress: $elm$core$Maybe$Just(
												message(
													$author$project$Shared$toggleMobileNav(shared)))
										})
									]));
					}
				}()
				]));
	});
var $author$project$Pages$Electronics$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Electronics$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var subtext = function (item) {
			var img = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$rounded(10),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Border$innerShadow(
									{
										blur: 18,
										color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
										offset: _Utils_Tuple2(1, 8),
										size: 8
									})
								]),
							$mdgriffith$elm_ui$Element$none))
					]),
				(item.description === '') ? A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{description: item.title, src: item.image}) : A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$padding(10),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.85))
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(item.description)
									])))
						]),
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						{description: item.title, src: item.image})));
			var content = A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
						$mdgriffith$elm_ui$Element$Font$light
					]),
				$elm$core$List$concat(
					A2(
						$elm$core$List$intersperse,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil))
							]),
						A2(
							$elm$core$List$map,
							function (t) {
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(t)
									]);
							},
							A2($elm$core$String$split, '\n', item.text)))));
			return A3(
				$author$project$Shared$acol,
				A2(
					$author$project$Pages$Electronics$shouldAnimate,
					$elm$core$String$fromInt(item.id),
					model) ? A3(
					$author$project$Simple$Animation$fromTo,
					{duration: 500, options: _List_Nil},
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(0),
							$author$project$Simple$Animation$Property$y(100)
						]),
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(100),
							$author$project$Simple$Animation$Property$y(0)
						])) : $author$project$Simple$Animation$empty,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id(
							$elm$core$String$fromInt(item.id))),
						$mdgriffith$elm_ui$Element$transparent(
						!A2(
							$author$project$Pages$Electronics$shouldAnimate,
							$elm$core$String$fromInt(item.id),
							model))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Region$heading(3),
								$mdgriffith$elm_ui$Element$Font$extraLight,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(item.title)
							])),
						A2(
						isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						((!A2($elm$core$Basics$modBy, 2, item.id)) || isMobile) ? _List_fromArray(
							[img, content]) : _List_fromArray(
							[content, img]))
					]));
		};
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Electronics$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Electronics$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								$author$project$Pages$Electronics$head(model.localShared),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$maximum,
											$elm$core$Basics$round($author$project$Palette$maxWidth * 0.7),
											$mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(100)
									]),
								A2(
									$elm$core$List$cons,
									A2(
										$author$project$Pages$Electronics$mainText,
										shared,
										A2($author$project$Pages$Electronics$shouldAnimate, 'mainText', model)),
									A2($elm$core$List$map, subtext, model.subTexts))),
								A3(
								$author$project$Pages$Electronics$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Electronics$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Electronics$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Electronics$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Electronics$init(shared),
				subscriptions: $author$project$Pages$Electronics$subscriptions,
				update: $author$project$Pages$Electronics$update(shared),
				view: $author$project$Pages$Electronics$view(shared)
			});
	});
var $author$project$Pages$Home_$BoxesItem = F6(
	function (name, link, img_default, img_hover, hovered, _class) {
		return {_class: _class, hovered: hovered, img_default: img_default, img_hover: img_hover, link: link, name: name};
	});
var $author$project$Pages$Home_$InitBoxes = function (a) {
	return {$: 'InitBoxes', a: a};
};
var $author$project$Pages$Home_$OnScreenItem = F2(
	function (id, onScreen) {
		return {id: id, onScreen: onScreen};
	});
var $author$project$Pages$Home_$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Home_$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Home_$Testimonial = F6(
	function (addQuotes, title, img, quote, attribution, job) {
		return {addQuotes: addQuotes, attribution: attribution, img: img, job: job, quote: quote, title: title};
	});
var $author$project$Ports$controlVideo = _Platform_outgoingPort('controlVideo', $elm$json$Json$Encode$bool);
var $marshallformula$elm_swiper$Swiper$InternalState = function (touchStarted) {
	return {touchStarted: touchStarted};
};
var $marshallformula$elm_swiper$Swiper$SwipingState = function (a) {
	return {$: 'SwipingState', a: a};
};
var $marshallformula$elm_swiper$Swiper$initialSwipingState = $marshallformula$elm_swiper$Swiper$SwipingState(
	$marshallformula$elm_swiper$Swiper$InternalState($elm$core$Maybe$Nothing));
var $elm$core$Process$sleep = _Process_sleep;
var $author$project$Pages$Home_$init = function (shared) {
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'gciBar',
						A2($author$project$Pages$Home_$AnimationState, $author$project$Pages$Home_$Middle, false)),
						_Utils_Tuple2(
						'whatwedo',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(30),
							false)),
						_Utils_Tuple2(
						'grayQuote',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(50),
							false)),
						_Utils_Tuple2(
						'testimonials',
						A2($author$project$Pages$Home_$AnimationState, $author$project$Pages$Home_$Middle, false)),
						_Utils_Tuple2(
						'finalText',
						A2($author$project$Pages$Home_$AnimationState, $author$project$Pages$Home_$Middle, false)),
						_Utils_Tuple2(
						'cleanRoom',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			boxes: _List_fromArray(
				[
					A6($author$project$Pages$Home_$BoxesItem, 'Electronic Obsolescence Solutions', '/obsolescence', '/img/plane1.png', '/img/plane2.png', false, 'point_enter_down'),
					A6($author$project$Pages$Home_$BoxesItem, 'Electronic Systems Solutions', '/electronics', '/img/circuit1.png', '/img/circuit2.png', false, 'point_enter_down'),
					A6($author$project$Pages$Home_$BoxesItem, 'Electronics in Harsh Environments', '/oil', '/img/oil1.png', '/img/oil2.png', false, 'point_enter_down'),
					A6($author$project$Pages$Home_$BoxesItem, 'Research and Development', '/rnd', '/img/heat1.png', '/img/heat2.png', false, 'point_enter_down')
				]),
			easterEgg: 0,
			finalText: 'GCI\'s hermetic products provide reliable solutions for electronic systems.',
			getMouse: false,
			localShared: $author$project$Shared$reset(shared),
			name: '',
			onScreenTracker: _List_fromArray(
				[
					A2($author$project$Pages$Home_$OnScreenItem, 'earthVideo', true)
				]),
			showContactUs: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5($author$project$Pages$Home_$SimpleBtn, 0, 'Play', '#', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Home_$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Home_$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Home_$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Home_$OpenContactUs)),
					A5($author$project$Pages$Home_$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			swipingState: $marshallformula$elm_swiper$Swiper$initialSwipingState,
			testimonial_viewNum: 1,
			testimonials: _List_fromArray(
				[
					A6($author$project$Pages$Home_$Testimonial, true, 'Sikorsky Aircraft Corperation', '/img/helicopter1.jpg', 'Global Circuit Innovations provided a form, fit and function solution to keep our Black Hawk helicopters flying.', '- Peter Kubik', 'Sikorsky Senior Staff Engineer'),
					A6($author$project$Pages$Home_$Testimonial, false, '', '/img/AGM-65.jpg', 'GCI is currently engineering Circuit Card solutions for the DSM‑157 Test Box for Maverick Missile testing.', '', ''),
					A6($author$project$Pages$Home_$Testimonial, true, 'USAF', '/img/f16.jpg', 'GCI offers cost effective, proven obsolescence solutions to keep planes flying and save the USAF tens of millions of dollars.', '- Jeffery Sillart', 'USAF Chief Avionics Engineer, F‑16')
				]),
			userVisible: true
		},
		$author$project$Effect$batch(
			_List_fromArray(
				[
					$author$project$Effect$fromCmd(
					$author$project$Ports$controlVideo(true)),
					$author$project$Effect$fromCmd(
					A2(
						$elm$core$Task$perform,
						$author$project$Pages$Home_$InitBoxes,
						$elm$core$Process$sleep(100)))
				])));
};
var $author$project$Pages$Home_$Down = {$: 'Down'};
var $author$project$Pages$Home_$GotMouse = function (a) {
	return {$: 'GotMouse', a: a};
};
var $author$project$Pages$Home_$Left = {$: 'Left'};
var $author$project$Pages$Home_$Right = {$: 'Right'};
var $author$project$Pages$Home_$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Home_$Up = {$: 'Up'};
var $author$project$Pages$Home_$VisibilityChanged = function (a) {
	return {$: 'VisibilityChanged', a: a};
};
var $author$project$Pages$Home_$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mousemove');
var $elm$browser$Browser$Events$Hidden = {$: 'Hidden'};
var $elm$browser$Browser$Events$Visible = {$: 'Visible'};
var $elm$browser$Browser$Events$withHidden = F2(
	function (func, isHidden) {
		return func(
			isHidden ? $elm$browser$Browser$Events$Hidden : $elm$browser$Browser$Events$Visible);
	});
var $elm$browser$Browser$Events$onVisibilityChange = function (func) {
	var info = _Browser_visibilityInfo(_Utils_Tuple0);
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Document,
		info.change,
		A2(
			$elm$json$Json$Decode$map,
			$elm$browser$Browser$Events$withHidden(func),
			A2(
				$elm$json$Json$Decode$field,
				'target',
				A2($elm$json$Json$Decode$field, info.hidden, $elm$json$Json$Decode$bool))));
};
var $author$project$Pages$Home_$subscriptions = function (model) {
	var parseMouse = F2(
		function (x, y) {
			return (_Utils_cmp(
				$elm$core$Basics$abs(x),
				$elm$core$Basics$abs(y)) > 0) ? ((x > 0) ? $author$project$Pages$Home_$GotMouse($author$project$Pages$Home_$Left) : $author$project$Pages$Home_$GotMouse($author$project$Pages$Home_$Right)) : ((y > 0) ? $author$project$Pages$Home_$GotMouse($author$project$Pages$Home_$Down) : $author$project$Pages$Home_$GotMouse($author$project$Pages$Home_$Up));
		});
	return model.userVisible ? (model.getMouse ? $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$elm$browser$Browser$Events$onMouseMove(
				A3(
					$elm$json$Json$Decode$map2,
					parseMouse,
					A2($elm$json$Json$Decode$field, 'movementX', $elm$json$Json$Decode$int),
					A2($elm$json$Json$Decode$field, 'movementY', $elm$json$Json$Decode$int))),
				$author$project$Ports$recvScroll($author$project$Pages$Home_$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Home_$WindowResized)
			])) : $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$elm$browser$Browser$Events$onVisibilityChange(
				function (v) {
					return $author$project$Pages$Home_$VisibilityChanged(v);
				}),
				$author$project$Ports$recvScroll($author$project$Pages$Home_$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Home_$WindowResized)
			]))) : $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$elm$browser$Browser$Events$onVisibilityChange(
				function (v) {
					return $author$project$Pages$Home_$VisibilityChanged(v);
				}),
				$author$project$Ports$recvScroll($author$project$Pages$Home_$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Home_$WindowResized)
			]));
};
var $author$project$Pages$Home_$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Home_$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Home_$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Home_$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $marshallformula$elm_swiper$Swiper$Down = {$: 'Down'};
var $marshallformula$elm_swiper$Swiper$checkSwiped = F3(
	function (start, end, dir) {
		switch (dir.$) {
			case 'Left':
				return _Utils_cmp(start.clientX, end.clientX) < 0;
			case 'Right':
				return _Utils_cmp(start.clientX, end.clientX) > 0;
			case 'Up':
				return _Utils_cmp(start.clientY, end.clientY) > 0;
			default:
				return _Utils_cmp(start.clientY, end.clientY) < 0;
		}
	});
var $marshallformula$elm_swiper$Swiper$startTouchSequence = function (coords) {
	return $marshallformula$elm_swiper$Swiper$SwipingState(
		{
			touchStarted: $elm$core$Maybe$Just(coords)
		});
};
var $marshallformula$elm_swiper$Swiper$hasSwiped = F3(
	function (dir, evt, _v0) {
		var touchStarted = _v0.a.touchStarted;
		if (evt.$ === 'TouchStart') {
			var coords = evt.a;
			return _Utils_Tuple2(
				$marshallformula$elm_swiper$Swiper$startTouchSequence(coords),
				false);
		} else {
			var coords = evt.a;
			if (touchStarted.$ === 'Nothing') {
				return _Utils_Tuple2($marshallformula$elm_swiper$Swiper$initialSwipingState, false);
			} else {
				var firstTouch = touchStarted.a;
				return _Utils_Tuple2(
					$marshallformula$elm_swiper$Swiper$initialSwipingState,
					A3($marshallformula$elm_swiper$Swiper$checkSwiped, firstTouch, coords, dir));
			}
		}
	});
var $marshallformula$elm_swiper$Swiper$hasSwipedDown = $marshallformula$elm_swiper$Swiper$hasSwiped($marshallformula$elm_swiper$Swiper$Down);
var $marshallformula$elm_swiper$Swiper$Left = {$: 'Left'};
var $marshallformula$elm_swiper$Swiper$hasSwipedLeft = $marshallformula$elm_swiper$Swiper$hasSwiped($marshallformula$elm_swiper$Swiper$Left);
var $marshallformula$elm_swiper$Swiper$Right = {$: 'Right'};
var $marshallformula$elm_swiper$Swiper$hasSwipedRight = $marshallformula$elm_swiper$Swiper$hasSwiped($marshallformula$elm_swiper$Swiper$Right);
var $author$project$Pages$Home_$isOnScreen = F2(
	function (id, list) {
		return A2(
			$elm$core$List$any,
			function (item) {
				return item.onScreen;
			},
			A2(
				$elm$core$List$filter,
				function (item) {
					return _Utils_eq(item.id, id);
				},
				list));
	});
var $author$project$Pages$Home_$GotOnScreenItem = F2(
	function (a, b) {
		return {$: 'GotOnScreenItem', a: a, b: b};
	});
var $author$project$Pages$Home_$onScreenItemtoCmd = function (id) {
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Home_$GotOnScreenItem(id),
			$elm$browser$Browser$Dom$getElement(id)));
};
var $author$project$Pages$Home_$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Home_$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Home_$updateBoxes = F2(
	function (direction, box) {
		return box.hovered ? _Utils_update(
			box,
			{
				_class: function () {
					switch (direction.$) {
						case 'Up':
							return 'point_enter_up';
						case 'Down':
							return 'point_enter_down';
						case 'Left':
							return 'point_enter_left';
						default:
							return 'point_enter_right';
					}
				}()
			}) : (A2($elm$core$String$contains, 'enter', box._class) ? _Utils_update(
			box,
			{
				_class: function () {
					switch (direction.$) {
						case 'Up':
							return 'point_leave_up';
						case 'Down':
							return 'point_leave_down';
						case 'Left':
							return 'point_leave_left';
						default:
							return 'point_leave_right';
					}
				}()
			}) : box);
	});
var $author$project$Pages$Home_$updateOnScreenElement = F3(
	function (id, e, item) {
		return _Utils_eq(id, item.id) ? _Utils_update(
			item,
			{
				onScreen: ((_Utils_cmp(e.element.y, e.viewport.y + e.viewport.height) > 0) && (_Utils_cmp(e.element.y + e.element.height, e.viewport.y) < 0)) || ((_Utils_cmp(e.element.y + e.element.height, e.viewport.y) > 0) && (_Utils_cmp(e.element.y, e.viewport.y + e.viewport.height) < 0))
			}) : item;
	});
var $author$project$Pages$Home_$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						_Utils_ap(
							A2(
								$elm$core$List$map,
								$author$project$Pages$Home_$animationTrackerToCmd,
								A2(
									$elm$core$List$filter,
									function (_v1) {
										var v = _v1.b;
										return !v.shouldAnimate;
									},
									$elm$core$Dict$toList(model.animationTracker))),
							A2(
								$elm$core$List$map,
								function (i) {
									return $author$project$Pages$Home_$onScreenItemtoCmd(i.id);
								},
								model.onScreenTracker))));
			case 'GotElement':
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'GotOnScreenItem':
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								onScreenTracker: A2(
									$elm$core$List$map,
									A2($author$project$Pages$Home_$updateOnScreenElement, id, e),
									model.onScreenTracker)
							}),
						A2(
							$author$project$Pages$Home_$isOnScreen,
							'earthVideo',
							A2(
								$elm$core$List$map,
								A2($author$project$Pages$Home_$updateOnScreenElement, id, e),
								model.onScreenTracker)) ? $author$project$Effect$fromCmd(
							$author$project$Ports$controlVideo(true)) : $author$project$Effect$fromCmd(
							$author$project$Ports$controlVideo(false)));
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'VisibilityChanged':
				var visibility = msg.a;
				return _Utils_eq(visibility, $elm$browser$Browser$Events$Visible) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{userVisible: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$controlVideo(true))) : _Utils_Tuple2(
					_Utils_update(
						model,
						{userVisible: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$controlVideo(false)));
			case 'BoxHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							boxes: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Home_$setHovered(id),
								model.boxes),
							getMouse: true
						}),
					$author$project$Effect$none);
			case 'BoxUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							boxes: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Home_$setUnHovered(id),
								model.boxes),
							getMouse: true
						}),
					$author$project$Effect$none);
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Home_$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Home_$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'GotMouse':
				var direction = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							boxes: A2(
								$elm$core$List$map,
								$author$project$Pages$Home_$updateBoxes(direction),
								model.boxes),
							getMouse: false
						}),
					$author$project$Effect$none);
			case 'TestimonialLeft':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							testimonial_viewNum: (!(!model.testimonial_viewNum)) ? (model.testimonial_viewNum - 1) : model.testimonial_viewNum
						}),
					$author$project$Effect$none);
			case 'TestimonialRight':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							testimonial_viewNum: (!_Utils_eq(
								model.testimonial_viewNum,
								$elm$core$List$length(model.testimonials) - 1)) ? (model.testimonial_viewNum + 1) : model.testimonial_viewNum
						}),
					$author$project$Effect$none);
			case 'TestimonialSwiped':
				var event = msg.a;
				var test = function (fn) {
					return A2(fn, event, model.swipingState).b;
				};
				return test($marshallformula$elm_swiper$Swiper$hasSwipedLeft) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							swipingState: A2($marshallformula$elm_swiper$Swiper$hasSwipedLeft, event, model.swipingState).a,
							testimonial_viewNum: (!(!model.testimonial_viewNum)) ? (model.testimonial_viewNum - 1) : model.testimonial_viewNum
						}),
					$author$project$Effect$none) : (test($marshallformula$elm_swiper$Swiper$hasSwipedRight) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							swipingState: A2($marshallformula$elm_swiper$Swiper$hasSwipedRight, event, model.swipingState).a,
							testimonial_viewNum: (!_Utils_eq(
								model.testimonial_viewNum,
								$elm$core$List$length(model.testimonials) - 1)) ? (model.testimonial_viewNum + 1) : model.testimonial_viewNum
						}),
					$author$project$Effect$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{
							swipingState: A2($marshallformula$elm_swiper$Swiper$hasSwipedDown, event, model.swipingState).a
						}),
					$author$project$Effect$none));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Home_$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			case 'InitBoxes':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							boxes: A2(
								$elm$core$List$map,
								function (b) {
									return _Utils_update(
										b,
										{_class: 'point_leave_down'});
								},
								model.boxes)
						}),
					$author$project$Effect$none);
			default:
				return (model.easterEgg >= 4) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							animationTracker: A3(
								$elm$core$Dict$update,
								'testimonials',
								$elm$core$Maybe$map(
									function (_v6) {
										return A2($author$project$Pages$Home_$AnimationState, $author$project$Pages$Home_$Middle, true);
									}),
								model.animationTracker),
							localShared: function (l) {
								return _Utils_update(
									l,
									{navbarDisplay: $author$project$Storage$Hide});
							}(model.localShared)
						}),
					$author$project$Effect$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{easterEgg: model.easterEgg + 1}),
					$author$project$Effect$none);
		}
	});
var $author$project$Pages$Home_$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Home_$BoxHover = function (a) {
	return {$: 'BoxHover', a: a};
};
var $author$project$Pages$Home_$BoxUnHover = function (a) {
	return {$: 'BoxUnHover', a: a};
};
var $mdgriffith$elm_ui$Element$Font$alignLeft = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textLeft);
var $author$project$Pages$Home_$finalText = F4(
	function (shared, t, animateBoxes, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var pad = isPhone ? 20 : 50;
		return A3(
			$author$project$Shared$ael,
			animateBoxes ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 1000, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('finalText')),
					$mdgriffith$elm_ui$Element$transparent(!animateBoxes),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$Background$gradient(
								{
									angle: $elm$core$Basics$degrees(180),
									steps: _List_fromArray(
										[
											A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1),
											A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1),
											A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0)
										])
								}),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(w)),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$Font$light,
									$mdgriffith$elm_ui$Element$Font$center,
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
									$mdgriffith$elm_ui$Element$padding(pad),
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$maximum, 800, $mdgriffith$elm_ui$Element$fill))
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(t)
								]))))
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$class(
							animateSelf ? 'animate_tag' : '')),
						$mdgriffith$elm_ui$Element$centerX
					]),
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class('tag')),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$Font$center,
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
							$mdgriffith$elm_ui$Element$padding(pad),
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$maximum, 800, $mdgriffith$elm_ui$Element$fill))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$transparent(true)
								]),
							$mdgriffith$elm_ui$Element$text(t))
						]))));
	});
var $mdgriffith$elm_ui$Element$Background$image = function (src) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / cover no-repeat')));
};
var $elm$html$Html$wbr = _VirtualDom_node('wbr');
var $author$project$Pages$Home_$boxes = F4(
	function (animateSelf, animateFinalText, model, shared) {
		var w = shared.width;
		var maxW = A2($elm$core$Basics$min, w, $author$project$Palette$maxWidth);
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var content = model.boxes;
		var eachWidth = A2(
			$elm$core$Basics$max,
			250,
			($elm$core$Basics$floor(maxW * 0.9) / $elm$core$List$length(content)) | 0);
		var box = function (_v0) {
			var id = _v0.a;
			var item = _v0.b;
			return A2(
				$mdgriffith$elm_ui$Element$link,
				_List_Nil,
				{
					label: A3(
						$author$project$Shared$arow,
						animateSelf ? A3(
							$author$project$Simple$Animation$fromTo,
							{duration: 500 + ((id + 1) * 200), options: _List_Nil},
							_List_fromArray(
								[
									$author$project$Simple$Animation$Property$opacity(0),
									$author$project$Simple$Animation$Property$y(100)
								]),
							_List_fromArray(
								[
									$author$project$Simple$Animation$Property$opacity(100),
									$author$project$Simple$Animation$Property$y(0)
								])) : $author$project$Simple$Animation$empty,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(eachWidth)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(eachWidth)),
								$mdgriffith$elm_ui$Element$Background$image(item.img_default),
								$mdgriffith$elm_ui$Element$inFront(
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$image(item.img_hover),
											$mdgriffith$elm_ui$Element$htmlAttribute(
											$elm$html$Html$Attributes$class(item._class))
										]),
									A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$alignBottom,
												$mdgriffith$elm_ui$Element$alignLeft,
												$mdgriffith$elm_ui$Element$padding(20)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(item.name)
											])))),
								$mdgriffith$elm_ui$Element$Events$onMouseEnter(
								$author$project$Pages$Home_$BoxHover(id)),
								$mdgriffith$elm_ui$Element$Events$onMouseLeave(
								$author$project$Pages$Home_$BoxUnHover(id))
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
										$mdgriffith$elm_ui$Element$Font$alignLeft,
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$alignLeft,
										$mdgriffith$elm_ui$Element$padding(10)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(item.name)
									]))
							])),
					url: item.link
				});
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('whatwedo'))
				]),
			_List_fromArray(
				[
					A3(
					$author$project$Shared$ael,
					animateSelf ? A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 1000, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100)
							])) : $author$project$Simple$Animation$empty,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 24, left: 0, right: 0, top: 24}),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$center]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('What do we do? '),
								$mdgriffith$elm_ui$Element$html(
								isMobile ? A2($elm$html$Html$br, _List_Nil, _List_Nil) : A2($elm$html$Html$wbr, _List_Nil, _List_Nil)),
								$mdgriffith$elm_ui$Element$text(
								(isPhone ? 'Tap' : 'Click') + ' below to find out more.')
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(eachWidth * ((shared.width / eachWidth) | 0))),
							$mdgriffith$elm_ui$Element$centerX
						]),
					A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A2(
							$elm$core$List$map,
							box,
							A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, content)))),
					A4($author$project$Pages$Home_$finalText, shared, model.finalText, animateSelf, animateFinalText)
				]));
	});
var $author$project$Pages$Home_$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Home_$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Home_$cleanRoom = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$white),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Home_$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Home_$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(500)),
					$mdgriffith$elm_ui$Element$Background$image('/img/clean_room2.jpg'),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('cleanRoom')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class(
						animateSelf ? 'point_enter_left_long' : 'point_idle'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Home_$grayQuote = F2(
	function (animateSelf, shared) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var dynamicPadding = isPhone ? 20 : $elm$core$Basics$round(
			A2($elm$core$Basics$min, shared.width, $author$project$Palette$maxWidth) * 0.1);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(
						(_Utils_cmp(w, $author$project$Palette$maxWidth) > 0) ? $elm$core$Basics$ceiling($author$project$Palette$maxWidth * 0.9) : w)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 100),
					$mdgriffith$elm_ui$Element$Background$gradient(
					{
						angle: $elm$core$Basics$degrees(180),
						steps: _List_fromArray(
							[
								$author$project$Palette$white,
								$author$project$Palette$white,
								A3($mdgriffith$elm_ui$Element$rgb255, 214, 218, 219)
							])
					}),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('grayQuote'))
				]),
			_List_fromArray(
				[
					A3(
					$author$project$Shared$ael,
					animateSelf ? A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 1000, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100)
							])) : $author$project$Simple$Animation$empty,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$paddingXY, dynamicPadding, 0),
								$mdgriffith$elm_ui$Element$Font$alignLeft,
								$mdgriffith$elm_ui$Element$Font$extraLight,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb255, 85, 96, 134)),
								$mdgriffith$elm_ui$Element$transparent(!animateSelf)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Broad Expertise in Electronic Systems.')
							]))),
					A3(
					$author$project$Shared$ael,
					animateSelf ? A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 1000, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100)
							])) : $author$project$Simple$Animation$empty,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$alignLeft,
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$light,
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb255, 85, 96, 134)),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$transparent(!animateSelf),
								A2($mdgriffith$elm_ui$Element$paddingXY, dynamicPadding, 40)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Global Circuit Innovations has a range of digital and analog circuitry experience over many decades. This knowledge base is applied to develop electronic obsolescence solutions for legacy systems. Our device physics skills and experience enable us to provide environmental hardening for extremely demanding applications.')
							])))
				]));
	});
var $author$project$Pages$Home_$EasterEgg = {$: 'EasterEgg'};
var $elm$html$Html$Attributes$autoplay = $elm$html$Html$Attributes$boolProperty('autoplay');
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$Attributes$loop = $elm$html$Html$Attributes$boolProperty('loop');
var $elm$html$Html$video = _VirtualDom_node('video');
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Pages$Home_$head = function (shared) {
	var w = shared.width;
	var h = shared.height;
	var videoHeight = h;
	var logo = A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(w)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(videoHeight)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Home_$EasterEgg)
			]),
		A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					_Utils_eq(shared.device._class, $mdgriffith$elm_ui$Element$Phone) ? $mdgriffith$elm_ui$Element$fill : A2(
						$mdgriffith$elm_ui$Element$maximum,
						($author$project$Palette$maxWidth / 2) | 0,
						$mdgriffith$elm_ui$Element$px((w / 2) | 0))),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$padding(
					_Utils_eq(shared.device._class, $mdgriffith$elm_ui$Element$Phone) ? $elm$core$Basics$floor(w * 0.1) : 0)
				]),
			{description: 'Global Circuit Innovations', src: '/img/logo_sans_ring.svg'}));
	var scaleByHeight = _Utils_cmp((w / videoHeight) | 0, (16 / 9) | 0) < 1;
	var glassLogo = A2(
		$mdgriffith$elm_ui$Element$image,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(
					_Utils_eq(shared.device._class, $mdgriffith$elm_ui$Element$Phone) ? (w * 2) : w)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(h)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY
			]),
		{description: 'GCI logo on glass', src: '/img/glass_1080.png'});
	var earthVideo = $mdgriffith$elm_ui$Element$html(
		A2(
			$elm$html$Html$video,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$src('/videos/earth_720p.webm'),
					$elm$html$Html$Attributes$alt('Earth from Space'),
					$elm$html$Html$Attributes$autoplay(true),
					$elm$html$Html$Attributes$loop(true),
					scaleByHeight ? $elm$html$Html$Attributes$height(h) : $elm$html$Html$Attributes$width(w),
					A2($elm$html$Html$Attributes$attribute, 'poster', '/img/earthVideo.jpg'),
					$elm$html$Html$Attributes$id('earthVideo')
				]),
			_List_Nil));
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(videoHeight)),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
				$mdgriffith$elm_ui$Element$clip
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
						$mdgriffith$elm_ui$Element$inFront(glassLogo),
						$mdgriffith$elm_ui$Element$inFront(logo),
						$mdgriffith$elm_ui$Element$clip
					]),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					earthVideo))
			]));
};
var $author$project$Palette$gciBlueExtraLight = A3($mdgriffith$elm_ui$Element$rgb255, 84, 116, 182);
var $author$project$Pages$Home_$innovations = F2(
	function (animateSelf, shared) {
		var device = shared.device._class;
		var border = {bottom: 3, left: 0, right: 0, top: 0};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Region$heading(1),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('testimonials')),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Font$light,
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Our '),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$widthEach(border),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue)
								]),
							$mdgriffith$elm_ui$Element$text('Innovations')),
							$mdgriffith$elm_ui$Element$text(' are Your '),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$widthEach(border),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlueExtraLight)
								]),
							$mdgriffith$elm_ui$Element$text('Solutions.'))
						]))
				]));
	});
var $author$project$Internal$Ease$Cubic = F4(
	function (a, b, c, d) {
		return {$: 'Cubic', a: a, b: b, c: c, d: d};
	});
var $author$project$Internal$Ease$easeInOutQuad = A4($author$project$Internal$Ease$Cubic, 0.45, 0, 0.55, 1);
var $author$project$Simple$Animation$easeInOutQuad = $author$project$Internal$Animation$Ease($author$project$Internal$Ease$easeInOutQuad);
var $author$project$Internal$Animation$Iteration = function (a) {
	return {$: 'Iteration', a: a};
};
var $author$project$Internal$Animation$Loop = {$: 'Loop'};
var $author$project$Simple$Animation$loop = $author$project$Internal$Animation$Iteration($author$project$Internal$Animation$Loop);
var $author$project$Simple$Animation$steps = F2(
	function (_v0, steps_) {
		var options = _v0.options;
		var startAt = _v0.startAt;
		return $author$project$Simple$Animation$toAnimation(
			$author$project$Simple$Animation$Stepped(
				{options: options, startAt: startAt, steps: steps_}));
	});
var $author$project$Pages$Home_$point_down = function (scrolled) {
	var bounce = A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$Border$rounded(20),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 8,
					color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5),
					offset: _Utils_Tuple2(-5, 8),
					size: 1
				})
			]),
		A3(
			$author$project$Shared$ael,
			A2(
				$author$project$Simple$Animation$steps,
				{
					options: _List_fromArray(
						[$author$project$Simple$Animation$loop, $author$project$Simple$Animation$easeInOutQuad]),
					startAt: _List_fromArray(
						[
							$author$project$Simple$Animation$Property$y(-10)
						])
				},
				_List_fromArray(
					[
						A2(
						$author$project$Simple$Animation$step,
						550,
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$y(10)
							])),
						A2(
						$author$project$Simple$Animation$step,
						700,
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$y(-10)
							]))
					])),
			_List_Nil,
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40))
					]),
				{description: 'down arrow', src: '/img/down_arrow.svg'})));
	return A3(
		$author$project$Shared$acol,
		scrolled ? A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 500, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$opacity(1),
					$author$project$Simple$Animation$Property$y(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$opacity(0),
					$author$project$Simple$Animation$Property$y(20)
				])) : $author$project$Simple$Animation$empty,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$alignBottom,
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(150))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(50))
					]),
				_List_Nil),
				scrolled ? bounce : A2(
				$mdgriffith$elm_ui$Element$link,
				_List_Nil,
				{label: bounce, url: '/#testimonials'})
			]));
};
var $author$project$Pages$Home_$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Home_$TestimonialLeft = {$: 'TestimonialLeft'};
var $author$project$Pages$Home_$TestimonialRight = {$: 'TestimonialRight'};
var $author$project$Pages$Home_$TestimonialSwiped = function (a) {
	return {$: 'TestimonialSwiped', a: a};
};
var $mdgriffith$elm_ui$Element$Font$alignRight = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textRight);
var $mdgriffith$elm_ui$Element$Font$medium = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textMedium);
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $marshallformula$elm_swiper$Swiper$TouchEnd = function (a) {
	return {$: 'TouchEnd', a: a};
};
var $marshallformula$elm_swiper$Swiper$Coords = F2(
	function (clientX, clientY) {
		return {clientX: clientX, clientY: clientY};
	});
var $marshallformula$elm_swiper$Swiper$coordDecoder = A3(
	$elm$json$Json$Decode$map2,
	$marshallformula$elm_swiper$Swiper$Coords,
	A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$float));
var $marshallformula$elm_swiper$Swiper$touchDecoder = function (eventType) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			[eventType, '0']),
		$marshallformula$elm_swiper$Swiper$coordDecoder);
};
var $marshallformula$elm_swiper$Swiper$onTouchEnd = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchend',
		A2(
			$elm$json$Json$Decode$map,
			msg,
			A2(
				$elm$json$Json$Decode$map,
				$marshallformula$elm_swiper$Swiper$TouchEnd,
				$marshallformula$elm_swiper$Swiper$touchDecoder('changedTouches'))));
};
var $marshallformula$elm_swiper$Swiper$TouchStart = function (a) {
	return {$: 'TouchStart', a: a};
};
var $marshallformula$elm_swiper$Swiper$onTouchStart = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchstart',
		A2(
			$elm$json$Json$Decode$map,
			msg,
			A2(
				$elm$json$Json$Decode$map,
				$marshallformula$elm_swiper$Swiper$TouchStart,
				$marshallformula$elm_swiper$Swiper$touchDecoder('targetTouches'))));
};
var $marshallformula$elm_swiper$Swiper$onSwipeEvents = function (msg) {
	return _List_fromArray(
		[
			$marshallformula$elm_swiper$Swiper$onTouchStart(msg),
			$marshallformula$elm_swiper$Swiper$onTouchEnd(msg)
		]);
};
var $author$project$Pages$Home_$testimonials = F4(
	function (ts, viewNum, animateSelf, shared) {
		var device = shared.device._class;
		var isDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$Desktop) || _Utils_eq(device, $mdgriffith$elm_ui$Element$BigDesktop);
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var quotePadding = isPhone ? 5 : 48;
		var testimonial_width = isPhone ? $elm$core$Basics$floor(shared.width * 0.7) : 370;
		var numberToShow = isPhone ? 1 : ((shared.width / $elm$core$Basics$floor(testimonial_width * 1.2)) | 0);
		var testimonial = F2(
			function (i, t) {
				return A3(
					$author$project$Shared$acol,
					animateSelf ? A3(
						$author$project$Simple$Animation$fromTo,
						{duration: (i + 1) * 300, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0),
								$author$project$Simple$Animation$Property$y(100)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100),
								$author$project$Simple$Animation$Property$y(0)
							])) : $author$project$Simple$Animation$empty,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							(_Utils_cmp(
								numberToShow,
								$elm$core$List$length(ts)) > -1) ? A2($mdgriffith$elm_ui$Element$maximum, testimonial_width, $mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$px(testimonial_width)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Border$shadow(
							{
								blur: 8,
								color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.4),
								offset: _Utils_Tuple2(-5, 8),
								size: 1
							}),
							$mdgriffith$elm_ui$Element$transparent(!animateSelf)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$image(t.img),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_Nil),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: quotePadding, left: quotePadding, right: quotePadding, top: quotePadding}),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$medium,
											$mdgriffith$elm_ui$Element$Font$center,
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
											A2($mdgriffith$elm_ui$Element$paddingXY, 0, 18)
										]),
									t.addQuotes ? _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('\"' + (t.quote + '\"'))
										]) : _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(t.quote)
										])),
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$extraLight,
											$mdgriffith$elm_ui$Element$Font$alignRight,
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
											$mdgriffith$elm_ui$Element$alignBottom
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(t.attribution)
										])),
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$extraLight,
											$mdgriffith$elm_ui$Element$Font$alignRight,
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
											$mdgriffith$elm_ui$Element$alignBottom
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(t.job)
										]))
								]))
						]));
			});
		return (_Utils_cmp(
			numberToShow,
			$elm$core$List$length(ts)) > -1) ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2(
						$mdgriffith$elm_ui$Element$maximum,
						$elm$core$Basics$ceiling($author$project$Palette$maxWidth * 0.9),
						$mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					$mdgriffith$elm_ui$Element$spacing(48),
					A2($mdgriffith$elm_ui$Element$paddingXY, 48, 0)
				]),
			A2($elm$core$List$indexedMap, testimonial, ts)) : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A3(
					$author$project$Shared$ael,
					((!viewNum) || (!animateSelf)) ? A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 200, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100),
								$author$project$Simple$Animation$Property$y(0)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0),
								$author$project$Simple$Animation$Property$y(10)
							])) : A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 200, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0),
								$author$project$Simple$Animation$Property$y(10)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100),
								$author$project$Simple$Animation$Property$y(0)
							])),
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_Nil,
						{
							label: A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(30)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(30)),
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$moveLeft(5)
											]))
									]),
								{description: 'left button', src: '/img/left.svg'}),
							onPress: (!viewNum) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Pages$Home_$TestimonialLeft)
						})),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$centerX
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(((testimonial_width * numberToShow) + (48 * (numberToShow - 1))) + 10)),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$clip
								]),
							A2(
								$elm$core$List$map,
								function (a) {
									return $mdgriffith$elm_ui$Element$htmlAttribute(a);
								},
								$marshallformula$elm_swiper$Swiper$onSwipeEvents($author$project$Pages$Home_$TestimonialSwiped))),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$moveLeft((testimonial_width * viewNum) + (48 * viewNum)),
									$mdgriffith$elm_ui$Element$width(
									A2(
										$mdgriffith$elm_ui$Element$maximum,
										$elm$core$Basics$ceiling($author$project$Palette$maxWidth * 0.9),
										$mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
									$mdgriffith$elm_ui$Element$spacing(48),
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 20, left: 10, right: 0, top: 20}),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('animateTransform'))
								]),
							A2($elm$core$List$indexedMap, testimonial, ts)))),
					A3(
					$author$project$Shared$ael,
					((_Utils_cmp(
						viewNum + numberToShow,
						$elm$core$List$length(ts)) > -1) || (!animateSelf)) ? A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 200, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100),
								$author$project$Simple$Animation$Property$y(0)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0),
								$author$project$Simple$Animation$Property$y(10)
							])) : A3(
						$author$project$Simple$Animation$fromTo,
						{duration: 200, options: _List_Nil},
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(0),
								$author$project$Simple$Animation$Property$y(10)
							]),
						_List_fromArray(
							[
								$author$project$Simple$Animation$Property$opacity(100),
								$author$project$Simple$Animation$Property$y(0)
							])),
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_Nil,
						{
							label: A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(30)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(30)),
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$moveRight(5)
											]))
									]),
								{description: 'right button', src: '/img/right.svg'}),
							onPress: (_Utils_cmp(
								viewNum + numberToShow,
								$elm$core$List$length(ts)) > -1) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Pages$Home_$TestimonialRight)
						}))
				]));
	});
var $author$project$Pages$Home_$view = F2(
	function (shared, model) {
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Home_$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					$author$project$Pages$Home_$point_down(
						A2($author$project$Pages$Home_$shouldAnimate, 'testimonials', model))),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Home_$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id('home')),
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(80)
							]),
						_List_fromArray(
							[
								$author$project$Pages$Home_$head(shared),
								A2(
								$author$project$Pages$Home_$innovations,
								A2($author$project$Pages$Home_$shouldAnimate, 'testimonials', model),
								shared),
								A4(
								$author$project$Pages$Home_$testimonials,
								model.testimonials,
								model.testimonial_viewNum,
								A2($author$project$Pages$Home_$shouldAnimate, 'testimonials', model),
								shared),
								A2(
								$author$project$Pages$Home_$grayQuote,
								A2($author$project$Pages$Home_$shouldAnimate, 'grayQuote', model),
								shared),
								A4(
								$author$project$Pages$Home_$boxes,
								A2($author$project$Pages$Home_$shouldAnimate, 'whatwedo', model),
								A2($author$project$Pages$Home_$shouldAnimate, 'finalText', model),
								model,
								shared),
								A3(
								$author$project$Pages$Home_$cleanRoom,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Home_$shouldAnimate, 'cleanRoom', model))
							])),
						A2($author$project$Shared$footer, shared, $author$project$Pages$Home_$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Home_$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Home_$init(shared),
				subscriptions: $author$project$Pages$Home_$subscriptions,
				update: $author$project$Pages$Home_$update(shared),
				view: $author$project$Pages$Home_$view(shared)
			});
	});
var $author$project$Pages$Ip$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Ip$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Ip$Patent = F8(
	function (id, active, number, date, inventor, name, image, link) {
		return {active: active, date: date, id: id, image: image, inventor: inventor, link: link, name: name, number: number};
	});
var $author$project$Pages$Ip$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Ip$Trademark = F8(
	function (id, active, name, number, _class, registered, firstUse, link) {
		return {active: active, _class: _class, firstUse: firstUse, id: id, link: link, name: name, number: number, registered: registered};
	});
var $author$project$Pages$Ip$init = function (shared) {
	var device = shared.device._class;
	var isMobile = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'patents',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(
								isMobile ? 2 : 5),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			hideAirlock: false,
			localShared: $author$project$Shared$reset(shared),
			patents: _List_fromArray(
				[
					A8($author$project$Pages$Ip$Patent, 0, false, '9,966,319', '8/21/11', 'Erick M. Spory', 'Environmental Hardened Integrated Circuit Method and Apparatus', '/img/9966319.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9966319.PN.&OS=PN/9966319&RS=PN/9966319'),
					A8($author$project$Pages$Ip$Patent, 1, false, '8,466,371', '6/18/13', 'Erick M. Spory', 'Printed circuit board interconnecting structure with compliant cantilever interposers', '/img/8466371.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=8466371.PN.&OS=PN/8466371&RS=PN/8466371'),
					A8($author$project$Pages$Ip$Patent, 2, false, '9,935,028', '11/23/13', 'Erick M. Spory', 'Method and Apparatus for Printing Integrated Circuit Bond Connections', '/img/9935028.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9935028.PN.&OS=PN/9935028&RS=PN/9935028'),
					A8($author$project$Pages$Ip$Patent, 3, false, '9,711,480', '11/28/11', 'Erick M. Spory', 'Environmental Hardened Packaged Integrated Circuit', '/img/9711480.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9711480.PN.&OS=PN/9711480&RS=PN/9711480'),
					A8($author$project$Pages$Ip$Patent, 4, false, '9,824,948', '11/20/13', 'Erick M. Spory', 'Integrated Circuit with Printed Bond Connections', '/img/9824948.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9824948.PN.&OS=PN/9824948&RS=PN/9824948'),
					A8($author$project$Pages$Ip$Patent, 5, false, '9,870,968', '1/28/16', 'Erick M. Spory\nTimothy M. Barry', 'Repackaged Integrated Circuit and Assembly Method', '/img/9870968.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=9870968.PN.&OS=PN/9870968&RS=PN/9870968'),
					A8($author$project$Pages$Ip$Patent, 6, false, '10,128,161', '6/19/17', 'Erick M. Spory', '3D Printed Hermetic Package Assembly and Method', '/img/10128161.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10128161.PN.&OS=PN/10128161&RS=PN/10128161'),
					A8($author$project$Pages$Ip$Patent, 7, false, '10,177,056', '1/28/16', 'Erick M. Spory', 'Repackaged Integrated Circuit Assembly Method', '/img/10177056.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10177056.PN.&OS=PN/10177056&RS=PN/10177056'),
					A8($author$project$Pages$Ip$Patent, 8, false, '10,654,259', '1/28/16', 'Erick M. Spory', 'Conductive Diamond Application Method and System', '/img/10654259.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10,654,259.PN.&OS=PN/10,654,259&RS=PN/10,654,259'),
					A8($author$project$Pages$Ip$Patent, 9, false, '10,109,606', '1/28/16', 'Erick M. Spory', 'Remapped Packaged Extracted Die', '/img/10109606.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10109606.PN.&OS=PN/10109606&RS=PN/10109606'),
					A8($author$project$Pages$Ip$Patent, 10, false, '10,177,054', '1/28/16', 'Erick M. Spory\nTimothy M. Barry', 'Method for Remapping a Packaged Extracted Die', '/img/10177054.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10177054.PN.&OS=PN/10177054&RS=PN/10177054'),
					A8($author$project$Pages$Ip$Patent, 11, false, '10,147,660', '1/28/16', 'Erick M. Spory', 'Repackaged Integrated Circuit with 3D Printed Bond Connections', '/img/10147660.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10147660.PN.&OS=PN/10147660&RS=PN/10147660'),
					A8($author$project$Pages$Ip$Patent, 12, false, '10,002,846', '1/28/16', 'Erick M. Spory', '3D Printed Bond Connection Method for Repackaged Integrated Circuit', '/img/10002846.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10002846.PN.&OS=PN/10002846&RS=PN/10002846'),
					A8($author$project$Pages$Ip$Patent, 13, false, '10,460,326', '1/28/16', 'Erick M. Spory', 'IDD Signature', '/img/10460326.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10460326.PN.&OS=PN/10460326&RS=PN/10460326'),
					A8($author$project$Pages$Ip$Patent, 14, false, '10,431,510', '10/3/17', 'Erick M. Spory', 'Hermetic Lid Seal Method and Apparatus', '/img/10431510.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10431510.PN.&OS=PN/10431510&RS=PN/10431510'),
					A8($author$project$Pages$Ip$Patent, 15, false, '10,115,645', '10/27/17', 'Erick M. Spory', 'Repackaged Reconditioned Die Method and Assembly', '/img/10115645.png', 'https://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=10115645.PN.&OS=PN/10115645&RS=PN/10115645')
				]),
			patentsPerRow: 3,
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Ip$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Ip$OpenVimeo)),
					A5($author$project$Pages$Ip$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Ip$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Ip$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Ip$OpenContactUs)),
					A5($author$project$Pages$Ip$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			trademarks: _List_fromArray(
				[
					A8($author$project$Pages$Ip$Trademark, 0, false, 'DER', '5,278,571', 'CLASS 37: Repair or Maintenance of Integrated Circuits Manufacturing Machines and Systems', '8/29/17', '6/15/10', '/download/5278571.pdf'),
					A8($author$project$Pages$Ip$Trademark, 1, false, 'DEER', '5,400,012', 'CLASS 9: Semiconductor Devices', '2/13/18', '11/1/13', '/download/5400012.pdf'),
					A8($author$project$Pages$Ip$Trademark, 2, false, 'DER', '5,215,549', 'CLASS 9: Electronic Chips for the Manufacture of Integrated Circuits', '5/30/17', '11/1/13', '/download/5400012.pdf')
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Ip$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Ip$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Pages$Ip$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Ip$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Ip$WindowResized)
			]));
};
var $author$project$Pages$Ip$HideAirlock = function (a) {
	return {$: 'HideAirlock', a: a};
};
var $author$project$Pages$Ip$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Ip$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Ip$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Ip$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Ip$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Ip$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Ip$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Ip$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Ip$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Ip$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'GotElement':
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						_Utils_ap(
							A2(
								$elm$core$List$map,
								$author$project$Pages$Ip$animationTrackerToCmd,
								A2(
									$elm$core$List$filter,
									function (_v2) {
										var v = _v2.b;
										return !v.shouldAnimate;
									},
									$elm$core$Dict$toList(model.animationTracker))),
							(A2($author$project$Pages$Ip$shouldAnimate, 'patents', model) && (!model.hideAirlock)) ? _List_fromArray(
								[
									$author$project$Effect$fromCmd(
									A2(
										$elm$core$Task$perform,
										$author$project$Pages$Ip$HideAirlock,
										$elm$core$Process$sleep(1000)))
								]) : _List_fromArray(
								[$author$project$Effect$none]))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Ip$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			case 'PatentActive':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							patents: A2(
								$elm$core$List$map,
								function (l) {
									return _Utils_eq(l.id, id) ? _Utils_update(
										l,
										{active: true}) : _Utils_update(
										l,
										{active: false});
								},
								model.patents)
						}),
					$author$project$Effect$none);
			case 'PatentDeactive':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							patents: A2(
								$elm$core$List$map,
								function (l) {
									return _Utils_update(
										l,
										{active: false});
								},
								model.patents)
						}),
					$author$project$Effect$none);
			case 'TrademarkActive':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							trademarks: A2(
								$elm$core$List$map,
								function (l) {
									return _Utils_eq(l.id, id) ? _Utils_update(
										l,
										{active: true}) : _Utils_update(
										l,
										{active: false});
								},
								model.trademarks)
						}),
					$author$project$Effect$none);
			case 'TrademarkDeactive':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							trademarks: A2(
								$elm$core$List$map,
								function (l) {
									return _Utils_update(
										l,
										{active: false});
								},
								model.trademarks)
						}),
					$author$project$Effect$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{hideAirlock: true}),
					$author$project$Effect$none);
		}
	});
var $author$project$Pages$Ip$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Ip$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Ip$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Ip$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Ip$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Ip$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Ip$head = F2(
	function (shared, model) {
		var w = shared.width;
		var simpleBtns = model.simpleBtnHoverTracker;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.4))
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$padding(
								isPhone ? 3 : $elm$core$Basics$floor(
									A2($elm$core$Basics$min, 150, w * 0.1)))
							]),
						A2(
							$elm$core$List$intersperse,
							$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Our'),
									$mdgriffith$elm_ui$Element$text('Patents and'),
									$mdgriffith$elm_ui$Element$text('Trademarks.')
								]))))
				]),
			{description: 'Picture of GCI\'s head quarters', src: '/img/patents.jpg'});
	});
var $author$project$Pages$Ip$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('16 issued patents and counting.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('mainText')),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('GCI’s innovations are recognized with 16 patents, 3 trademarks, and additional patents currently in process.  These technological advancements set GCI apart from its competitors.'),
							$mdgriffith$elm_ui$Element$html(
							A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							$mdgriffith$elm_ui$Element$html(
							A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							$mdgriffith$elm_ui$Element$text('We continue to push the boundaries.')
						]))
				]));
	});
var $author$project$Pages$Ip$PatentActive = function (a) {
	return {$: 'PatentActive', a: a};
};
var $author$project$Pages$Ip$PatentDeactive = function (a) {
	return {$: 'PatentDeactive', a: a};
};
var $author$project$Pages$Ip$TrademarkActive = function (a) {
	return {$: 'TrademarkActive', a: a};
};
var $author$project$Pages$Ip$TrademarkDeactive = function (a) {
	return {$: 'TrademarkDeactive', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$letterSpacing = $mdgriffith$elm_ui$Internal$Flag$flag(16);
var $mdgriffith$elm_ui$Element$Font$letterSpacing = function (offset) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$letterSpacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'ls-' + $mdgriffith$elm_ui$Internal$Model$floatClass(offset),
			'letter-spacing',
			$elm$core$String$fromFloat(offset) + 'px'));
};
var $author$project$Internal$Transform$ScaleXY = F2(
	function (a, b) {
		return {$: 'ScaleXY', a: a, b: b};
	});
var $author$project$Internal$Transform$scaleXY = $author$project$Internal$Transform$ScaleXY;
var $author$project$Simple$Animation$Property$scaleXY = F2(
	function (x_, y_) {
		return $author$project$Internal$Animation$Property$Transform(
			A2($author$project$Internal$Transform$scaleXY, x_, y_));
	});
var $author$project$Internal$Transform$X = function (a) {
	return {$: 'X', a: a};
};
var $author$project$Internal$Transform$x = A2($elm$core$Basics$composeL, $author$project$Internal$Transform$Translate, $author$project$Internal$Transform$X);
var $author$project$Simple$Animation$Property$x = A2($elm$core$Basics$composeL, $author$project$Internal$Animation$Property$Transform, $author$project$Internal$Transform$x);
var $author$project$Pages$Ip$patents = F3(
	function (shared, model, animateSelf) {
		var zoom = animateSelf ? A2(
			$author$project$Simple$Animation$steps,
			{
				options: _List_fromArray(
					[$author$project$Simple$Animation$easeInOutQuad]),
				startAt: _List_fromArray(
					[
						A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
					])
			},
			_List_fromArray(
				[
					A2(
					$author$project$Simple$Animation$step,
					1000,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						])),
					A2(
					$author$project$Simple$Animation$step,
					500,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 1, 1)
						]))
				])) : A2(
			$author$project$Simple$Animation$steps,
			{
				options: _List_fromArray(
					[$author$project$Simple$Animation$easeInOutQuad]),
				startAt: _List_fromArray(
					[
						A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
					])
			},
			_List_fromArray(
				[
					A2(
					$author$project$Simple$Animation$step,
					10,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						])),
					A2(
					$author$project$Simple$Animation$step,
					10,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						]))
				]));
		var w = shared.width;
		var shadowSettings = animateSelf ? {
			blur: 10,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
			offset: _Utils_Tuple2(-5, 5),
			size: 5
		} : {
			blur: 0,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
			offset: _Utils_Tuple2(0, 0),
			size: 0
		};
		var patentsPerRow = model.patentsPerRow;
		var hideAirlock = model.hideAirlock;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var cardWidth = 300;
		var cardSpacing = 50;
		var cardHeight = 500;
		var patent = function (l) {
			return A3(
				$author$project$Shared$ael,
				zoom,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(cardWidth)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(cardHeight)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$Ip$PatentActive(l.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Ip$PatentActive(l.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							$author$project$Pages$Ip$PatentDeactive(l.id)),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('animateTransform')),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(
										$elm$core$Basics$round(cardHeight * (2.0 / 3.0))))
								]),
							{description: l.name, src: l.image}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(
											$elm$core$Basics$round(cardHeight * (1.0 / 3.0)))),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 3,
											color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
											offset: _Utils_Tuple2(0, 0),
											size: 1
										})
									]),
								l.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$spacing(20)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$Font$center
											]),
										$mdgriffith$elm_ui$Element$text(l.inventor)),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
											]),
										$mdgriffith$elm_ui$Element$text('#' + (l.number + (' - ' + l.date))))
									]))),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(cardHeight)),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
									]),
								l.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
											$mdgriffith$elm_ui$Element$padding(20),
											$mdgriffith$elm_ui$Element$Font$center,
											$mdgriffith$elm_ui$Element$centerY
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$center,
													A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
													$mdgriffith$elm_ui$Element$Font$light
												]),
											$mdgriffith$elm_ui$Element$text(l.name)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Patent number: ' + l.number)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Issued on: ' + l.date)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil))
										])),
									A2(
									$mdgriffith$elm_ui$Element$newTabLink,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlueLight)
												])),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$Font$bold
										]),
									{
										label: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Read More')),
										url: l.link
									})
								]))
						])));
		};
		var trademark = function (l) {
			return A3(
				$author$project$Shared$ael,
				zoom,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(cardWidth)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(cardHeight)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$Ip$TrademarkActive(l.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Ip$TrademarkActive(l.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							$author$project$Pages$Ip$TrademarkDeactive(l.id)),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('animateTransform')),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(
										$elm$core$Basics$round(cardHeight * (2.0 / 3.0))))
								]),
							{description: 'USPTO logo', src: '/img/uspto.jpg'}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(
											$elm$core$Basics$round(cardHeight * (1.0 / 3.0)))),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 3,
											color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
											offset: _Utils_Tuple2(0, 0),
											size: 1
										})
									]),
								l.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$spacing(20)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$Font$center
											]),
										$mdgriffith$elm_ui$Element$text(l.name)),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
											]),
										$mdgriffith$elm_ui$Element$text('#' + (l.number + (' - ' + l.registered))))
									]))),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(cardHeight)),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
									]),
								l.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
											$mdgriffith$elm_ui$Element$padding(20),
											$mdgriffith$elm_ui$Element$Font$center,
											$mdgriffith$elm_ui$Element$centerY
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$center,
													A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
													$mdgriffith$elm_ui$Element$Font$light
												]),
											$mdgriffith$elm_ui$Element$text(l._class)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Reg. No.: ' + l.number)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('First Use: ' + l.firstUse)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil))
										])),
									A2(
									$mdgriffith$elm_ui$Element$download,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlueLight)
												])),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$Font$bold
										]),
									{
										label: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Read More')),
										url: l.link
									})
								]))
						])));
		};
		var airlock2 = A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 3000, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(-w)
				]));
		var airlock = A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 3000, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(w)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('circuit_board')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('patents')),
					$mdgriffith$elm_ui$Element$spacing(50),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$inFront(
					hideAirlock ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('ignore_pointer'))
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Shared$ael,
								animateSelf ? airlock2 : $author$project$Simple$Animation$empty,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(shadowSettings)
									]),
								$mdgriffith$elm_ui$Element$none),
								A3(
								$author$project$Shared$ael,
								animateSelf ? airlock : $author$project$Simple$Animation$empty,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(shadowSettings)
									]),
								$mdgriffith$elm_ui$Element$none)
							]))),
					$mdgriffith$elm_ui$Element$Border$innerShadow(
					{
						blur: 10,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
						offset: _Utils_Tuple2(-5, 5),
						size: 5
					})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					A3(
						$author$project$Shared$acol,
						zoom,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(3),
								isPhone ? A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20) : $mdgriffith$elm_ui$Element$padding(55),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
									]),
								$mdgriffith$elm_ui$Element$text('Global Circuit Innovations')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$extraLight,
										$mdgriffith$elm_ui$Element$Font$letterSpacing(5),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
									]),
								$mdgriffith$elm_ui$Element$text('Patents'))
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								A2(
									$elm$core$Basics$min,
									$elm$core$Basics$round(w * 0.8),
									(patentsPerRow * cardWidth) + (patentsPerRow * cardSpacing)))),
							$mdgriffith$elm_ui$Element$centerX
						]),
					A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(cardSpacing)
							]),
						A2($elm$core$List$map, patent, model.patents))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					A3(
						$author$project$Shared$acol,
						zoom,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(3),
								isPhone ? A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20) : $mdgriffith$elm_ui$Element$padding(55),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
									]),
								$mdgriffith$elm_ui$Element$text('Global Circuit Innovations')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$extraLight,
										$mdgriffith$elm_ui$Element$Font$letterSpacing(5),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
									]),
								$mdgriffith$elm_ui$Element$text('Trademarks'))
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								A2(
									$elm$core$Basics$min,
									$elm$core$Basics$round(w * 0.8),
									(patentsPerRow * cardWidth) + (patentsPerRow * cardSpacing)))),
							$mdgriffith$elm_ui$Element$centerX
						]),
					A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(cardSpacing)
							]),
						A2($elm$core$List$map, trademark, model.trademarks)))
				]));
	});
var $author$project$Pages$Ip$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Ip$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Ip$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Ip$head, shared, model),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(100)
									]),
								_List_fromArray(
									[
										A2(
										$author$project$Pages$Ip$mainText,
										shared,
										A2($author$project$Pages$Ip$shouldAnimate, 'mainText', model))
									])),
								A3(
								$author$project$Pages$Ip$patents,
								shared,
								model,
								A2($author$project$Pages$Ip$shouldAnimate, 'patents', model)),
								A3(
								$author$project$Pages$Ip$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Ip$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Ip$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Ip$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Ip$init(shared),
				subscriptions: $author$project$Pages$Ip$subscriptions,
				update: $author$project$Pages$Ip$update(shared),
				view: $author$project$Pages$Ip$view(shared)
			});
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Pages$Newsroom$GotDate = function (a) {
	return {$: 'GotDate', a: a};
};
var $author$project$Pages$Newsroom$GotPosts = function (a) {
	return {$: 'GotPosts', a: a};
};
var $author$project$Pages$Newsroom$Idle = {$: 'Idle'};
var $author$project$Pages$Newsroom$None = {$: 'None'};
var $author$project$Pages$Newsroom$Post = function (id) {
	return function (title) {
		return function (editTitle) {
			return function (images) {
				return function (editImages) {
					return function (content) {
						return function (editContent) {
							return function (posttime) {
								return function (editPosttime) {
									return function (date) {
										return function (viewNum) {
											return function (state) {
												return {content: content, date: date, editContent: editContent, editImages: editImages, editPosttime: editPosttime, editTitle: editTitle, id: id, images: images, posttime: posttime, state: state, title: title, viewNum: viewNum};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Pages$Newsroom$StartLoading = {$: 'StartLoading'};
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $author$project$Pages$Newsroom$serverUrl = '';
var $justinmimbs$date$Date$RD = function (a) {
	return {$: 'RD', a: a};
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
				$elm$core$Basics$clamp,
				1,
				A2($justinmimbs$date$Date$daysInMonth, y, m),
				d));
	});
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $justinmimbs$date$Date$today = A3($elm$core$Task$map2, $justinmimbs$date$Date$fromPosix, $elm$time$Time$here, $elm$time$Time$now);
var $author$project$Pages$Newsroom$init = F2(
	function (shared, linkedPost) {
		return _Utils_Tuple2(
			{
				alertCopy: $author$project$Pages$Newsroom$None,
				animationTracker: $elm$core$Dict$fromList(_List_Nil),
				confirmDelete: $elm$core$Maybe$Nothing,
				loadingState: $author$project$Pages$Newsroom$StartLoading,
				localShared: $author$project$Shared$reset(shared),
				postIndex: 0,
				postRecvError: false,
				posts: _List_Nil,
				swipingState: $marshallformula$elm_swiper$Swiper$initialSwipingState,
				thumbnails: _List_Nil,
				today: $elm$core$Maybe$Nothing
			},
			$author$project$Effect$batch(
				_List_fromArray(
					[
						$author$project$Effect$fromCmd(
						$elm$http$Http$post(
							{
								body: $elm$http$Http$emptyBody,
								expect: A2(
									$elm$http$Http$expectJson,
									$author$project$Pages$Newsroom$GotPosts,
									$elm$json$Json$Decode$list(
										A6(
											$elm$json$Json$Decode$map5,
											F5(
												function (id, title, images, content, posttime) {
													return $author$project$Pages$Newsroom$Post(id)(title)($elm$core$Maybe$Nothing)(images)(_List_Nil)(content)($elm$core$Maybe$Nothing)(posttime)($elm$core$Maybe$Nothing)($elm$core$Maybe$Nothing)(0)($author$project$Pages$Newsroom$Idle);
												}),
											A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
											A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
											A2(
												$elm$json$Json$Decode$field,
												'images',
												$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
											A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
											A2($elm$json$Json$Decode$field, 'posttime', $elm$json$Json$Decode$string)))),
								url: _Utils_ap(
									$author$project$Pages$Newsroom$serverUrl,
									function () {
										if (linkedPost.$ === 'Just') {
											var id = linkedPost.a;
											return '/newsroom/posts?linked_post=' + $elm$core$String$fromInt(id);
										} else {
											return '/newsroom/posts?i=0&range=3';
										}
									}())
							})),
						$author$project$Effect$fromCmd(
						A2($elm$core$Task$perform, $author$project$Pages$Newsroom$GotDate, $justinmimbs$date$Date$today))
					])));
	});
var $author$project$Pages$Newsroom$AlertCopy = function (a) {
	return {$: 'AlertCopy', a: a};
};
var $author$project$Pages$Newsroom$Google = function (a) {
	return {$: 'Google', a: a};
};
var $author$project$Pages$Newsroom$IdFailed = function (a) {
	return {$: 'IdFailed', a: a};
};
var $author$project$Pages$Newsroom$IdLoaded = function (a) {
	return {$: 'IdLoaded', a: a};
};
var $author$project$Pages$Newsroom$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Newsroom$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Ports$google = _Platform_incomingPort('google', $elm$json$Json$Decode$string);
var $author$project$Ports$idFailed = _Platform_incomingPort('idFailed', $elm$json$Json$Decode$string);
var $author$project$Ports$idLoaded = _Platform_incomingPort('idLoaded', $elm$json$Json$Decode$string);
var $author$project$Ports$successfulCopy = _Platform_incomingPort('successfulCopy', $elm$json$Json$Decode$bool);
var $author$project$Pages$Newsroom$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Newsroom$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Newsroom$WindowResized),
				$author$project$Ports$idLoaded($author$project$Pages$Newsroom$IdLoaded),
				$author$project$Ports$idFailed($author$project$Pages$Newsroom$IdFailed),
				$author$project$Ports$google($author$project$Pages$Newsroom$Google),
				$author$project$Ports$successfulCopy(
				function (c) {
					return $author$project$Pages$Newsroom$AlertCopy(c);
				})
			]));
};
var $author$project$Pages$Newsroom$Bad = function (a) {
	return {$: 'Bad', a: a};
};
var $author$project$Pages$Newsroom$ClearCopy = function (a) {
	return {$: 'ClearCopy', a: a};
};
var $author$project$Pages$Newsroom$Editing = {$: 'Editing'};
var $author$project$Pages$Newsroom$Good = function (a) {
	return {$: 'Good', a: a};
};
var $author$project$Pages$Newsroom$GotImages = function (a) {
	return {$: 'GotImages', a: a};
};
var $author$project$Pages$Newsroom$GotUpload = function (a) {
	return {$: 'GotUpload', a: a};
};
var $author$project$Pages$Newsroom$LoadingDone = {$: 'LoadingDone'};
var $author$project$Pages$Newsroom$LoadingFailed = {$: 'LoadingFailed'};
var $author$project$Pages$Newsroom$Posts = F2(
	function (posts, show) {
		return {posts: posts, show: show};
	});
var $author$project$Pages$Newsroom$RecvImg = {$: 'RecvImg'};
var $author$project$Pages$Newsroom$RecvPosts = {$: 'RecvPosts'};
var $author$project$Pages$Newsroom$Reload = function (a) {
	return {$: 'Reload', a: a};
};
var $author$project$Pages$Newsroom$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Newsroom$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Newsroom$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Newsroom$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Ports$copyText = _Platform_outgoingPort('copyText', $elm$json$Json$Encode$string);
var $elm$http$Http$expectBytesResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'arraybuffer',
			_Http_toDataView,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$expectWhatever = function (toMsg) {
	return A2(
		$elm$http$Http$expectBytesResponse,
		toMsg,
		$elm$http$Http$resolve(
			function (_v0) {
				return $elm$core$Result$Ok(_Utils_Tuple0);
			}));
};
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $elm$http$Http$fileBody = _Http_pair('');
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $justinmimbs$date$Date$deadEndToString = function (_v0) {
	var problem = _v0.problem;
	if (problem.$ === 'Problem') {
		var message = problem.a;
		return message;
	} else {
		return 'Expected a date in ISO 8601 format';
	}
};
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $justinmimbs$date$Date$MonthAndDay = F2(
	function (a, b) {
		return {$: 'MonthAndDay', a: a, b: b};
	});
var $justinmimbs$date$Date$OrdinalDay = function (a) {
	return {$: 'OrdinalDay', a: a};
};
var $justinmimbs$date$Date$WeekAndWeekday = F2(
	function (a, b) {
		return {$: 'WeekAndWeekday', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$Advanced$commit = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, true, a, s);
		});
};
var $elm$parser$Parser$commit = $elm$parser$Parser$Advanced$commit;
var $elm$parser$Parser$mapChompedString = $elm$parser$Parser$Advanced$mapChompedString;
var $justinmimbs$date$Date$int1 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$elm$parser$Parser$chompIf($elm$core$Char$isDigit));
var $justinmimbs$date$Date$int2 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
		$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
var $justinmimbs$date$Date$int3 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
			$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
		$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $justinmimbs$date$Date$dayOfYear = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$token('-')),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$backtrackable(
						A2(
							$elm$parser$Parser$andThen,
							$elm$parser$Parser$commit,
							A2($elm$parser$Parser$map, $justinmimbs$date$Date$OrdinalDay, $justinmimbs$date$Date$int3))),
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed($justinmimbs$date$Date$MonthAndDay),
							$justinmimbs$date$Date$int2),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$token('-')),
									$justinmimbs$date$Date$int2),
									$elm$parser$Parser$succeed(1)
								]))),
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($justinmimbs$date$Date$WeekAndWeekday),
								$elm$parser$Parser$token('W')),
							$justinmimbs$date$Date$int2),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$token('-')),
									$justinmimbs$date$Date$int1),
									$elm$parser$Parser$succeed(1)
								])))
					]))),
			$elm$parser$Parser$backtrackable(
			A2(
				$elm$parser$Parser$andThen,
				$elm$parser$Parser$commit,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed($justinmimbs$date$Date$MonthAndDay),
						$justinmimbs$date$Date$int2),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$justinmimbs$date$Date$int2,
								$elm$parser$Parser$succeed(1)
							]))))),
			A2($elm$parser$Parser$map, $justinmimbs$date$Date$OrdinalDay, $justinmimbs$date$Date$int3),
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($justinmimbs$date$Date$WeekAndWeekday),
					$elm$parser$Parser$token('W')),
				$justinmimbs$date$Date$int2),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$justinmimbs$date$Date$int1,
						$elm$parser$Parser$succeed(1)
					]))),
			$elm$parser$Parser$succeed(
			$justinmimbs$date$Date$OrdinalDay(1))
		]));
var $justinmimbs$date$Date$isBetweenInt = F3(
	function (a, b, x) {
		return (_Utils_cmp(a, x) < 1) && (_Utils_cmp(x, b) < 1);
	});
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		default:
			return $elm$time$Time$Dec;
	}
};
var $justinmimbs$date$Date$fromCalendarParts = F3(
	function (y, mn, d) {
		return (A3($justinmimbs$date$Date$isBetweenInt, 1, 12, mn) && A3(
			$justinmimbs$date$Date$isBetweenInt,
			1,
			A2(
				$justinmimbs$date$Date$daysInMonth,
				y,
				$justinmimbs$date$Date$numberToMonth(mn)),
			d)) ? $elm$core$Result$Ok(
			$justinmimbs$date$Date$RD(
				($justinmimbs$date$Date$daysBeforeYear(y) + A2(
					$justinmimbs$date$Date$daysBeforeMonth,
					y,
					$justinmimbs$date$Date$numberToMonth(mn))) + d)) : $elm$core$Result$Err(
			'Invalid calendar date (' + ($elm$core$String$fromInt(y) + (', ' + ($elm$core$String$fromInt(mn) + (', ' + ($elm$core$String$fromInt(d) + ')'))))));
	});
var $justinmimbs$date$Date$fromOrdinalParts = F2(
	function (y, od) {
		return (A3($justinmimbs$date$Date$isBetweenInt, 1, 365, od) || ((od === 366) && $justinmimbs$date$Date$isLeapYear(y))) ? $elm$core$Result$Ok(
			$justinmimbs$date$Date$RD(
				$justinmimbs$date$Date$daysBeforeYear(y) + od)) : $elm$core$Result$Err(
			'Invalid ordinal date (' + ($elm$core$String$fromInt(y) + (', ' + ($elm$core$String$fromInt(od) + ')'))));
	});
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$daysBeforeWeekYear = function (y) {
	var jan4 = $justinmimbs$date$Date$daysBeforeYear(y) + 4;
	return jan4 - $justinmimbs$date$Date$weekdayNumber(
		$justinmimbs$date$Date$RD(jan4));
};
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$RD(
		$justinmimbs$date$Date$daysBeforeYear(y) + 1);
};
var $justinmimbs$date$Date$is53WeekYear = function (y) {
	var wdnJan1 = $justinmimbs$date$Date$weekdayNumber(
		$justinmimbs$date$Date$firstOfYear(y));
	return (wdnJan1 === 4) || ((wdnJan1 === 3) && $justinmimbs$date$Date$isLeapYear(y));
};
var $justinmimbs$date$Date$fromWeekParts = F3(
	function (wy, wn, wdn) {
		return (A3($justinmimbs$date$Date$isBetweenInt, 1, 7, wdn) && (A3($justinmimbs$date$Date$isBetweenInt, 1, 52, wn) || ((wn === 53) && $justinmimbs$date$Date$is53WeekYear(wy)))) ? $elm$core$Result$Ok(
			$justinmimbs$date$Date$RD(
				($justinmimbs$date$Date$daysBeforeWeekYear(wy) + ((wn - 1) * 7)) + wdn)) : $elm$core$Result$Err(
			'Invalid week date (' + ($elm$core$String$fromInt(wy) + (', ' + ($elm$core$String$fromInt(wn) + (', ' + ($elm$core$String$fromInt(wdn) + ')'))))));
	});
var $justinmimbs$date$Date$fromYearAndDayOfYear = function (_v0) {
	var y = _v0.a;
	var doy = _v0.b;
	switch (doy.$) {
		case 'MonthAndDay':
			var mn = doy.a;
			var d = doy.b;
			return A3($justinmimbs$date$Date$fromCalendarParts, y, mn, d);
		case 'WeekAndWeekday':
			var wn = doy.a;
			var wdn = doy.b;
			return A3($justinmimbs$date$Date$fromWeekParts, y, wn, wdn);
		default:
			var od = doy.a;
			return A2($justinmimbs$date$Date$fromOrdinalParts, y, od);
	}
};
var $justinmimbs$date$Date$int4 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(_Utils_Tuple0),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									$elm$parser$Parser$chompIf(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									}),
									$elm$parser$Parser$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
				$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
			$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
		$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
var $justinmimbs$date$Date$resultToParser = function (result) {
	if (result.$ === 'Ok') {
		var x = result.a;
		return $elm$parser$Parser$succeed(x);
	} else {
		var message = result.a;
		return $elm$parser$Parser$problem(message);
	}
};
var $justinmimbs$date$Date$parser = A2(
	$elm$parser$Parser$andThen,
	A2($elm$core$Basics$composeR, $justinmimbs$date$Date$fromYearAndDayOfYear, $justinmimbs$date$Date$resultToParser),
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			$justinmimbs$date$Date$int4),
		$justinmimbs$date$Date$dayOfYear));
var $justinmimbs$date$Date$fromIsoString = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run(
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			A2(
				$elm$parser$Parser$ignorer,
				$justinmimbs$date$Date$parser,
				A2(
					$elm$parser$Parser$andThen,
					$justinmimbs$date$Date$resultToParser,
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2($elm$parser$Parser$map, $elm$core$Result$Ok, $elm$parser$Parser$end),
								A2(
								$elm$parser$Parser$map,
								$elm$core$Basics$always(
									$elm$core$Result$Err('Expected a date only, not a date and time')),
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$eq(
										_Utils_chr('T')))),
								$elm$parser$Parser$succeed(
								$elm$core$Result$Err('Expected a date only'))
							])))))),
	$elm$core$Result$mapError(
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map($justinmimbs$date$Date$deadEndToString),
				$elm$core$Maybe$withDefault('')))));
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $CurrySoftware$elm_datepicker$DatePicker$CurrentDate = function (a) {
	return {$: 'CurrentDate', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$DatePicker = function (a) {
	return {$: 'DatePicker', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$Date$initDate = A3($justinmimbs$date$Date$fromCalendarDate, 1992, $elm$time$Time$May, 31);
var $CurrySoftware$elm_datepicker$DatePicker$init = _Utils_Tuple2(
	$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
		{
			focused: $elm$core$Maybe$Just($CurrySoftware$elm_datepicker$DatePicker$Date$initDate),
			forceOpen: false,
			inputText: $elm$core$Maybe$Nothing,
			open: false,
			today: $CurrySoftware$elm_datepicker$DatePicker$Date$initDate
		}),
	A2($elm$core$Task$perform, $CurrySoftware$elm_datepicker$DatePicker$CurrentDate, $justinmimbs$date$Date$today));
var $CurrySoftware$elm_datepicker$DatePicker$initFromDate = function (date) {
	return $CurrySoftware$elm_datepicker$DatePicker$DatePicker(
		{
			focused: $elm$core$Maybe$Just(date),
			forceOpen: false,
			inputText: $elm$core$Maybe$Nothing,
			open: false,
			today: date
		});
};
var $elm$file$File$name = _File_name;
var $elm$browser$Browser$Navigation$reload = _Browser_reload(false);
var $elm$time$Time$Sun = {$: 'Sun'};
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {day: d, month: m, year: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var y = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd));
	return {
		ordinalDay: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		year: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0.a;
	var date = $justinmimbs$date$Date$toOrdinalDate(
		$justinmimbs$date$Date$RD(rd));
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.year, $elm$time$Time$Jan, date.ordinalDay);
};
var $justinmimbs$date$Date$day = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.day;
	});
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.month;
	});
var $justinmimbs$date$Date$monthNumber = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToNumber);
var $justinmimbs$date$Date$ordinalDay = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toOrdinalDate,
	function ($) {
		return $.ordinalDay;
	});
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $justinmimbs$date$Date$padSignedInt = F2(
	function (length, _int) {
		return _Utils_ap(
			(_int < 0) ? '-' : '',
			A3(
				$elm$core$String$padLeft,
				length,
				_Utils_chr('0'),
				$elm$core$String$fromInt(
					$elm$core$Basics$abs(_int))));
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $justinmimbs$date$Date$numberToWeekday = function (wdn) {
	var _v0 = A2($elm$core$Basics$max, 1, wdn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Mon;
		case 2:
			return $elm$time$Time$Tue;
		case 3:
			return $elm$time$Time$Wed;
		case 4:
			return $elm$time$Time$Thu;
		case 5:
			return $elm$time$Time$Fri;
		case 6:
			return $elm$time$Time$Sat;
		default:
			return $elm$time$Time$Sun;
	}
};
var $justinmimbs$date$Date$toWeekDate = function (_v0) {
	var rd = _v0.a;
	var wdn = $justinmimbs$date$Date$weekdayNumber(
		$justinmimbs$date$Date$RD(rd));
	var wy = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd + (4 - wdn)));
	var week1Day1 = $justinmimbs$date$Date$daysBeforeWeekYear(wy) + 1;
	return {
		weekNumber: 1 + (((rd - week1Day1) / 7) | 0),
		weekYear: wy,
		weekday: $justinmimbs$date$Date$numberToWeekday(wdn)
	};
};
var $justinmimbs$date$Date$weekNumber = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toWeekDate,
	function ($) {
		return $.weekNumber;
	});
var $justinmimbs$date$Date$weekYear = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toWeekDate,
	function ($) {
		return $.weekYear;
	});
var $justinmimbs$date$Date$weekday = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekdayNumber, $justinmimbs$date$Date$numberToWeekday);
var $justinmimbs$date$Date$ordinalSuffix = function (n) {
	var nn = A2($elm$core$Basics$modBy, 100, n);
	var _v0 = A2(
		$elm$core$Basics$min,
		(nn < 20) ? nn : A2($elm$core$Basics$modBy, 10, nn),
		4);
	switch (_v0) {
		case 1:
			return 'st';
		case 2:
			return 'nd';
		case 3:
			return 'rd';
		default:
			return 'th';
	}
};
var $justinmimbs$date$Date$withOrdinalSuffix = function (n) {
	return _Utils_ap(
		$elm$core$String$fromInt(n),
		$justinmimbs$date$Date$ordinalSuffix(n));
};
var $justinmimbs$date$Date$formatField = F4(
	function (language, _char, length, date) {
		switch (_char.valueOf()) {
			case 'y':
				if (length === 2) {
					return A2(
						$elm$core$String$right,
						2,
						A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$year(date))));
				} else {
					return A2(
						$justinmimbs$date$Date$padSignedInt,
						length,
						$justinmimbs$date$Date$year(date));
				}
			case 'Y':
				if (length === 2) {
					return A2(
						$elm$core$String$right,
						2,
						A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$weekYear(date))));
				} else {
					return A2(
						$justinmimbs$date$Date$padSignedInt,
						length,
						$justinmimbs$date$Date$weekYear(date));
				}
			case 'Q':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					case 2:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					case 3:
						return 'Q' + $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					case 4:
						return $justinmimbs$date$Date$withOrdinalSuffix(
							$justinmimbs$date$Date$quarter(date));
					case 5:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					default:
						return '';
				}
			case 'M':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$monthNumber(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$monthNumber(date)));
					case 3:
						return language.monthNameShort(
							$justinmimbs$date$Date$month(date));
					case 4:
						return language.monthName(
							$justinmimbs$date$Date$month(date));
					case 5:
						return A2(
							$elm$core$String$left,
							1,
							language.monthNameShort(
								$justinmimbs$date$Date$month(date)));
					default:
						return '';
				}
			case 'w':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$weekNumber(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$weekNumber(date)));
					default:
						return '';
				}
			case 'd':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$day(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$day(date)));
					case 3:
						return language.dayWithSuffix(
							$justinmimbs$date$Date$day(date));
					default:
						return '';
				}
			case 'D':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$ordinalDay(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$ordinalDay(date)));
					case 3:
						return A3(
							$elm$core$String$padLeft,
							3,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$ordinalDay(date)));
					default:
						return '';
				}
			case 'E':
				switch (length) {
					case 1:
						return language.weekdayNameShort(
							$justinmimbs$date$Date$weekday(date));
					case 2:
						return language.weekdayNameShort(
							$justinmimbs$date$Date$weekday(date));
					case 3:
						return language.weekdayNameShort(
							$justinmimbs$date$Date$weekday(date));
					case 4:
						return language.weekdayName(
							$justinmimbs$date$Date$weekday(date));
					case 5:
						return A2(
							$elm$core$String$left,
							1,
							language.weekdayNameShort(
								$justinmimbs$date$Date$weekday(date)));
					case 6:
						return A2(
							$elm$core$String$left,
							2,
							language.weekdayNameShort(
								$justinmimbs$date$Date$weekday(date)));
					default:
						return '';
				}
			case 'e':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$weekdayNumber(date));
					case 2:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$weekdayNumber(date));
					default:
						return A4(
							$justinmimbs$date$Date$formatField,
							language,
							_Utils_chr('E'),
							length,
							date);
				}
			default:
				return '';
		}
	});
var $justinmimbs$date$Date$formatWithTokens = F3(
	function (language, tokens, date) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (token, formatted) {
					if (token.$ === 'Field') {
						var _char = token.a;
						var length = token.b;
						return _Utils_ap(
							A4($justinmimbs$date$Date$formatField, language, _char, length, date),
							formatted);
					} else {
						var str = token.a;
						return _Utils_ap(str, formatted);
					}
				}),
			'',
			tokens);
	});
var $justinmimbs$date$Pattern$Literal = function (a) {
	return {$: 'Literal', a: a};
};
var $justinmimbs$date$Pattern$escapedQuote = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$justinmimbs$date$Pattern$Literal('\'')),
	$elm$parser$Parser$token('\'\''));
var $justinmimbs$date$Pattern$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $justinmimbs$date$Pattern$fieldRepeats = function (str) {
	var _v0 = $elm$core$String$toList(str);
	if (_v0.b && (!_v0.b.b)) {
		var _char = _v0.a;
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F2(
						function (x, y) {
							return A2($justinmimbs$date$Pattern$Field, _char, 1 + (y - x));
						})),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompWhile(
						$elm$core$Basics$eq(_char)))),
			$elm$parser$Parser$getOffset);
	} else {
		return $elm$parser$Parser$problem('expected exactly one char');
	}
};
var $justinmimbs$date$Pattern$field = A2(
	$elm$parser$Parser$andThen,
	$justinmimbs$date$Pattern$fieldRepeats,
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompIf($elm$core$Char$isAlpha)));
var $justinmimbs$date$Pattern$finalize = A2(
	$elm$core$List$foldl,
	F2(
		function (token, tokens) {
			var _v0 = _Utils_Tuple2(token, tokens);
			if (((_v0.a.$ === 'Literal') && _v0.b.b) && (_v0.b.a.$ === 'Literal')) {
				var x = _v0.a.a;
				var _v1 = _v0.b;
				var y = _v1.a.a;
				var rest = _v1.b;
				return A2(
					$elm$core$List$cons,
					$justinmimbs$date$Pattern$Literal(
						_Utils_ap(x, y)),
					rest);
			} else {
				return A2($elm$core$List$cons, token, tokens);
			}
		}),
	_List_Nil);
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $justinmimbs$date$Pattern$isLiteralChar = function (_char) {
	return (!_Utils_eq(
		_char,
		_Utils_chr('\''))) && (!$elm$core$Char$isAlpha(_char));
};
var $justinmimbs$date$Pattern$literal = A2(
	$elm$parser$Parser$map,
	$justinmimbs$date$Pattern$Literal,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$chompIf($justinmimbs$date$Pattern$isLiteralChar)),
			$elm$parser$Parser$chompWhile($justinmimbs$date$Pattern$isLiteralChar))));
var $justinmimbs$date$Pattern$quotedHelp = function (result) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (str) {
					return $justinmimbs$date$Pattern$quotedHelp(
						_Utils_ap(result, str));
				},
				$elm$parser$Parser$getChompedString(
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(_Utils_Tuple0),
							$elm$parser$Parser$chompIf(
								$elm$core$Basics$neq(
									_Utils_chr('\'')))),
						$elm$parser$Parser$chompWhile(
							$elm$core$Basics$neq(
								_Utils_chr('\'')))))),
				A2(
				$elm$parser$Parser$andThen,
				function (_v0) {
					return $justinmimbs$date$Pattern$quotedHelp(result + '\'');
				},
				$elm$parser$Parser$token('\'\'')),
				$elm$parser$Parser$succeed(result)
			]));
};
var $justinmimbs$date$Pattern$quoted = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($justinmimbs$date$Pattern$Literal),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq(
				_Utils_chr('\'')))),
	A2(
		$elm$parser$Parser$ignorer,
		$justinmimbs$date$Pattern$quotedHelp(''),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq(
						_Utils_chr('\''))),
					$elm$parser$Parser$end
				]))));
var $justinmimbs$date$Pattern$patternHelp = function (tokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (token) {
					return $justinmimbs$date$Pattern$patternHelp(
						A2($elm$core$List$cons, token, tokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$justinmimbs$date$Pattern$field, $justinmimbs$date$Pattern$literal, $justinmimbs$date$Pattern$escapedQuote, $justinmimbs$date$Pattern$quoted]))),
				$elm$parser$Parser$lazy(
				function (_v0) {
					return $elm$parser$Parser$succeed(
						$justinmimbs$date$Pattern$finalize(tokens));
				})
			]));
};
var $justinmimbs$date$Pattern$fromString = function (str) {
	return A2(
		$elm$core$Result$withDefault,
		_List_fromArray(
			[
				$justinmimbs$date$Pattern$Literal(str)
			]),
		A2(
			$elm$parser$Parser$run,
			$justinmimbs$date$Pattern$patternHelp(_List_Nil),
			str));
};
var $justinmimbs$date$Date$formatWithLanguage = F2(
	function (language, pattern) {
		var tokens = $elm$core$List$reverse(
			$justinmimbs$date$Pattern$fromString(pattern));
		return A2($justinmimbs$date$Date$formatWithTokens, language, tokens);
	});
var $justinmimbs$date$Date$monthToName = function (m) {
	switch (m.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $justinmimbs$date$Date$weekdayToName = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $justinmimbs$date$Date$language_en = {
	dayWithSuffix: $justinmimbs$date$Date$withOrdinalSuffix,
	monthName: $justinmimbs$date$Date$monthToName,
	monthNameShort: A2(
		$elm$core$Basics$composeR,
		$justinmimbs$date$Date$monthToName,
		$elm$core$String$left(3)),
	weekdayName: $justinmimbs$date$Date$weekdayToName,
	weekdayNameShort: A2(
		$elm$core$Basics$composeR,
		$justinmimbs$date$Date$weekdayToName,
		$elm$core$String$left(3))
};
var $justinmimbs$date$Date$format = function (pattern) {
	return A2($justinmimbs$date$Date$formatWithLanguage, $justinmimbs$date$Date$language_en, pattern);
};
var $CurrySoftware$elm_datepicker$DatePicker$formatCell = function (day) {
	return $elm$html$Html$text(day);
};
var $CurrySoftware$elm_datepicker$DatePicker$Date$formatDay = function (day) {
	switch (day.$) {
		case 'Mon':
			return 'Mo';
		case 'Tue':
			return 'Tu';
		case 'Wed':
			return 'We';
		case 'Thu':
			return 'Th';
		case 'Fri':
			return 'Fr';
		case 'Sat':
			return 'Sa';
		default:
			return 'Su';
	}
};
var $CurrySoftware$elm_datepicker$DatePicker$Date$formatMonth = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $CurrySoftware$elm_datepicker$DatePicker$Date$Off = {$: 'Off'};
var $CurrySoftware$elm_datepicker$DatePicker$off = $CurrySoftware$elm_datepicker$DatePicker$Date$Off;
var $elm$html$Html$Attributes$required = $elm$html$Html$Attributes$boolProperty('required');
var $CurrySoftware$elm_datepicker$DatePicker$defaultSettings = {
	cellFormatter: $CurrySoftware$elm_datepicker$DatePicker$formatCell,
	changeYear: $CurrySoftware$elm_datepicker$DatePicker$off,
	classNamespace: 'elm-datepicker--',
	containerClassList: _List_Nil,
	dateFormatter: $justinmimbs$date$Date$format('yyyy-MM-dd'),
	dayFormatter: $CurrySoftware$elm_datepicker$DatePicker$Date$formatDay,
	firstDayOfWeek: $elm$time$Time$Sun,
	inputAttributes: _List_fromArray(
		[
			$elm$html$Html$Attributes$required(false)
		]),
	inputClassList: _List_Nil,
	inputId: $elm$core$Maybe$Nothing,
	inputName: $elm$core$Maybe$Nothing,
	isDisabled: $elm$core$Basics$always(false),
	monthFormatter: $CurrySoftware$elm_datepicker$DatePicker$Date$formatMonth,
	parser: $justinmimbs$date$Date$fromIsoString,
	placeholder: 'Please pick a date...',
	yearFormatter: $elm$core$String$fromInt
};
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Pages$Newsroom$prettyDate = function (list) {
	var year = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(list));
	var month = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2(
				$elm$core$Maybe$withDefault,
				_List_fromArray(
					['', '']),
				$elm$core$List$tail(list))));
	var day = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2(
				$elm$core$Maybe$withDefault,
				_List_fromArray(
					['']),
				$elm$core$List$tail(
					A2(
						$elm$core$Maybe$withDefault,
						_List_fromArray(
							['', '']),
						$elm$core$List$tail(list))))));
	return function () {
		switch (month) {
			case '01':
				return 'January';
			case '02':
				return 'Febuary';
			case '03':
				return 'March';
			case '04':
				return 'April';
			case '05':
				return 'May';
			case '06':
				return 'June';
			case '07':
				return 'July';
			case '08':
				return 'August';
			case '09':
				return 'September';
			case '10':
				return 'October';
			case '11':
				return 'November';
			case '12':
				return 'December';
			default:
				return '';
		}
	}() + (' ' + (day + (', ' + year)));
};
var $justinmimbs$date$Date$toIsoString = $justinmimbs$date$Date$format('yyyy-MM-dd');
var $author$project$Pages$Newsroom$settings = _Utils_update(
	$CurrySoftware$elm_datepicker$DatePicker$defaultSettings,
	{
		dateFormatter: function (date) {
			return $author$project$Pages$Newsroom$prettyDate(
				A2(
					$elm$core$String$split,
					'-',
					$justinmimbs$date$Date$toIsoString(date)));
		}
	});
var $author$project$Pages$Newsroom$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $CurrySoftware$elm_datepicker$DatePicker$Disabled = function (a) {
	return {$: 'Disabled', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$EmptyString = {$: 'EmptyString'};
var $CurrySoftware$elm_datepicker$DatePicker$FailedInput = function (a) {
	return {$: 'FailedInput', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$Invalid = function (a) {
	return {$: 'Invalid', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$None = {$: 'None'};
var $CurrySoftware$elm_datepicker$DatePicker$Picked = function (a) {
	return {$: 'Picked', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$update = F3(
	function (settings, msg, _v0) {
		var model = _v0.a;
		var forceOpen = model.forceOpen;
		var focused = model.focused;
		switch (msg.$) {
			case 'CurrentDate':
				var date = msg.a;
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{
								focused: $elm$core$Maybe$Just(date),
								today: date
							})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
			case 'ChangeFocus':
				var date = msg.a;
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{
								focused: $elm$core$Maybe$Just(date)
							})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
			case 'Pick':
				var date = msg.a;
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{focused: $elm$core$Maybe$Nothing, inputText: $elm$core$Maybe$Nothing, open: false})),
					$CurrySoftware$elm_datepicker$DatePicker$Picked(date));
			case 'Text':
				var text = msg.a;
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{
								inputText: $elm$core$Maybe$Just(text)
							})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
			case 'SubmitText':
				if (forceOpen) {
					return _Utils_Tuple2(
						$CurrySoftware$elm_datepicker$DatePicker$DatePicker(model),
						$CurrySoftware$elm_datepicker$DatePicker$None);
				} else {
					var dateEvent = function () {
						var _v5 = model.inputText;
						if (_v5.$ === 'Nothing') {
							return $CurrySoftware$elm_datepicker$DatePicker$FailedInput($CurrySoftware$elm_datepicker$DatePicker$EmptyString);
						} else {
							if (_v5.a === '') {
								return $CurrySoftware$elm_datepicker$DatePicker$FailedInput($CurrySoftware$elm_datepicker$DatePicker$EmptyString);
							} else {
								var rawInput = _v5.a;
								var _v6 = settings.parser(rawInput);
								if (_v6.$ === 'Ok') {
									var date = _v6.a;
									return settings.isDisabled(date) ? $CurrySoftware$elm_datepicker$DatePicker$FailedInput(
										$CurrySoftware$elm_datepicker$DatePicker$Disabled(date)) : $CurrySoftware$elm_datepicker$DatePicker$Picked(date);
								} else {
									var e = _v6.a;
									return $CurrySoftware$elm_datepicker$DatePicker$FailedInput(
										$CurrySoftware$elm_datepicker$DatePicker$Invalid(e));
								}
							}
						}
					}();
					return _Utils_Tuple2(
						$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
							_Utils_update(
								model,
								{
									focused: function () {
										if (dateEvent.$ === 'Picked') {
											var date = dateEvent.a;
											return $elm$core$Maybe$Just(date);
										} else {
											return model.focused;
										}
									}(),
									inputText: function () {
										if (dateEvent.$ === 'Picked') {
											return $elm$core$Maybe$Nothing;
										} else {
											return model.inputText;
										}
									}()
								})),
						dateEvent);
				}
			case 'Focus':
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{forceOpen: false, open: true})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
			case 'Blur':
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{open: forceOpen})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
			case 'MouseDown':
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{forceOpen: true})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
			default:
				return _Utils_Tuple2(
					$CurrySoftware$elm_datepicker$DatePicker$DatePicker(
						_Utils_update(
							model,
							{forceOpen: false})),
					$CurrySoftware$elm_datepicker$DatePicker$None);
		}
	});
var $author$project$Ports$waitForId = _Platform_outgoingPort('waitForId', $elm$json$Json$Encode$string);
var $author$project$Pages$Newsroom$update = F4(
	function (shared, linkedPost, msg, model) {
		var getThumbnails = $author$project$Effect$fromCmd(
			$elm$http$Http$request(
				{
					body: $elm$http$Http$emptyBody,
					expect: A2(
						$elm$http$Http$expectJson,
						$author$project$Pages$Newsroom$GotImages,
						$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
					headers: _List_fromArray(
						[
							A2(
							$elm$http$Http$header,
							'idToken',
							A2($elm$core$Maybe$withDefault, '', model.localShared.user))
						]),
					method: 'POST',
					timeout: $elm$core$Maybe$Nothing,
					tracker: $elm$core$Maybe$Nothing,
					url: $author$project$Pages$Newsroom$serverUrl + '/newsroom/getimages'
				}));
		switch (msg.$) {
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							animationTracker: A3(
								$elm$core$Dict$update,
								'spinner',
								$elm$core$Maybe$map(
									function (_v1) {
										return A2(
											$author$project$Pages$Home_$AnimationState,
											$author$project$Pages$Home_$PercentOfViewport(1),
											false);
									}),
								model.animationTracker),
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						A2(
							$elm$core$List$cons,
							(A2($author$project$Pages$Newsroom$shouldAnimate, 'spinner', model) && (!_Utils_eq(model.loadingState, $author$project$Pages$Newsroom$LoadingDone))) ? $author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$emptyBody,
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Newsroom$GotPosts,
											$elm$json$Json$Decode$list(
												A6(
													$elm$json$Json$Decode$map5,
													F5(
														function (id, title, images, content, posttime) {
															return $author$project$Pages$Newsroom$Post(id)(title)($elm$core$Maybe$Nothing)(images)(_List_Nil)(content)($elm$core$Maybe$Nothing)(posttime)($elm$core$Maybe$Nothing)($elm$core$Maybe$Nothing)(0)($author$project$Pages$Newsroom$Idle);
														}),
													A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
													A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
													A2(
														$elm$json$Json$Decode$field,
														'images',
														$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
													A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
													A2($elm$json$Json$Decode$field, 'posttime', $elm$json$Json$Decode$string)))),
										url: $author$project$Pages$Newsroom$serverUrl + ('/newsroom/posts?i=' + ($elm$core$String$fromInt(
											function () {
												if (linkedPost.$ === 'Just') {
													var id = linkedPost.a;
													return (model.postIndex === 1) ? 0 : model.postIndex;
												} else {
													return model.postIndex;
												}
											}()) + '&range=3'))
									})) : $author$project$Effect$none,
							A2(
								$elm$core$List$map,
								$author$project$Pages$Newsroom$animationTrackerToCmd,
								A2(
									$elm$core$List$filter,
									function (_v3) {
										var v = _v3.b;
										return !v.shouldAnimate;
									},
									$elm$core$Dict$toList(model.animationTracker))))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Newsroom$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			case 'GotPosts':
				var response = msg.a;
				var postFilter = function (newPosts) {
					return A2(
						$elm$core$List$filter,
						function (newPost) {
							return !A2(
								$elm$core$List$member,
								newPost,
								A3(
									$elm$core$List$foldl,
									F2(
										function (a, b) {
											return _Utils_ap(b, a.posts);
										}),
									_List_Nil,
									model.posts));
						},
						newPosts);
				};
				if (response.$ === 'Ok') {
					var newPosts = response.a;
					return $elm$core$List$isEmpty(newPosts) ? _Utils_Tuple2(
						_Utils_update(
							model,
							{loadingState: $author$project$Pages$Newsroom$LoadingDone}),
						$author$project$Effect$none) : function (maybeId) {
						if (maybeId.$ === 'Just') {
							var id = maybeId.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										loadingState: $author$project$Pages$Newsroom$RecvPosts,
										postIndex: model.postIndex + $elm$core$List$length(
											postFilter(newPosts)),
										posts: _Utils_ap(
											model.posts,
											_List_fromArray(
												[
													A2(
													$author$project$Pages$Newsroom$Posts,
													postFilter(newPosts),
													false)
												]))
									}),
								$author$project$Effect$fromCmd(
									$author$project$Ports$waitForId(id)));
						} else {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										animationTracker: $elm$core$Dict$isEmpty(model.animationTracker) ? $elm$core$Dict$fromList(
											A2(
												$elm$core$List$cons,
												_Utils_Tuple2(
													'spinner',
													A2(
														$author$project$Pages$Home_$AnimationState,
														$author$project$Pages$Home_$PercentOfViewport(1),
														false)),
												A2(
													$elm$core$List$indexedMap,
													F2(
														function (i, p) {
															return _Utils_Tuple2(
																$elm$core$String$fromInt(p.id),
																A2(
																	$author$project$Pages$Home_$AnimationState,
																	$author$project$Pages$Home_$PercentOfViewport(20),
																	(!i) ? true : false));
														}),
													A3(
														$elm$core$List$foldl,
														F2(
															function (a, b) {
																return _Utils_ap(b, a.posts);
															}),
														_List_Nil,
														_Utils_ap(
															model.posts,
															_List_fromArray(
																[
																	A2(
																	$author$project$Pages$Newsroom$Posts,
																	postFilter(newPosts),
																	false)
																])))))) : A2(
											$elm$core$Dict$union,
											model.animationTracker,
											$elm$core$Dict$fromList(
												A2(
													$elm$core$List$indexedMap,
													F2(
														function (i, p) {
															return _Utils_Tuple2(
																$elm$core$String$fromInt(p.id),
																A2(
																	$author$project$Pages$Home_$AnimationState,
																	$author$project$Pages$Home_$PercentOfViewport(20),
																	(!i) ? true : false));
														}),
													A3(
														$elm$core$List$foldl,
														F2(
															function (a, b) {
																return _Utils_ap(b, a.posts);
															}),
														_List_Nil,
														A2(
															$elm$core$List$filter,
															function (p) {
																return !p.show;
															},
															_Utils_ap(
																model.posts,
																_List_fromArray(
																	[
																		A2(
																		$author$project$Pages$Newsroom$Posts,
																		postFilter(newPosts),
																		false)
																	]))))))),
										loadingState: $author$project$Pages$Newsroom$RecvImg,
										postIndex: model.postIndex + $elm$core$List$length(
											postFilter(newPosts)),
										posts: _Utils_ap(
											model.posts,
											_List_fromArray(
												[
													A2(
													$author$project$Pages$Newsroom$Posts,
													postFilter(newPosts),
													true)
												]))
									}),
								$author$project$Effect$none);
						}
					}(
						A2(
							$elm$core$Maybe$andThen,
							$elm$core$List$head,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.images;
								},
								$elm$core$List$head(
									postFilter(newPosts)))));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loadingState: $author$project$Pages$Newsroom$LoadingFailed, postRecvError: true}),
						$author$project$Effect$none);
				}
			case 'IdLoaded':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							animationTracker: $elm$core$Dict$isEmpty(model.animationTracker) ? $elm$core$Dict$fromList(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										'spinner',
										A2(
											$author$project$Pages$Home_$AnimationState,
											$author$project$Pages$Home_$PercentOfViewport(1),
											false)),
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, p) {
												return _Utils_Tuple2(
													$elm$core$String$fromInt(p.id),
													A2(
														$author$project$Pages$Home_$AnimationState,
														$author$project$Pages$Home_$PercentOfViewport(20),
														(!i) ? true : false));
											}),
										A3(
											$elm$core$List$foldl,
											F2(
												function (a, b) {
													return _Utils_ap(b, a.posts);
												}),
											_List_Nil,
											model.posts)))) : A2(
								$elm$core$Dict$union,
								model.animationTracker,
								$elm$core$Dict$fromList(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, p) {
												return _Utils_Tuple2(
													$elm$core$String$fromInt(p.id),
													A2(
														$author$project$Pages$Home_$AnimationState,
														$author$project$Pages$Home_$PercentOfViewport(20),
														(!i) ? true : false));
											}),
										A3(
											$elm$core$List$foldl,
											F2(
												function (a, b) {
													return _Utils_ap(b, a.posts);
												}),
											_List_Nil,
											A2(
												$elm$core$List$filter,
												function (p) {
													return !p.show;
												},
												model.posts))))),
							loadingState: $author$project$Pages$Newsroom$RecvImg,
							posts: A2(
								$elm$core$List$map,
								function (p) {
									return _Utils_update(
										p,
										{show: true});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'IdFailed':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Effect$fromCmd(
						$author$project$Ports$waitForId(id)));
			case 'GotElement':
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'MoveLeft':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return ((!(!p.viewNum)) && _Utils_eq(p.id, id)) ? _Utils_update(
														p,
														{viewNum: p.viewNum - 1}) : p;
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'MoveRight':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return ((!(_Utils_cmp(
														p.viewNum,
														$elm$core$List$length(p.images) - 2) > 0)) && _Utils_eq(p.id, id)) ? _Utils_update(
														p,
														{viewNum: p.viewNum + 1}) : p;
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'ImageSwiped':
				var id = msg.a;
				var event = msg.b;
				var test = function (fn) {
					return A2(fn, event, model.swipingState).b;
				};
				return test($marshallformula$elm_swiper$Swiper$hasSwipedLeft) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return ((!(!p.viewNum)) && _Utils_eq(p.id, id)) ? _Utils_update(
														p,
														{viewNum: p.viewNum - 1}) : p;
												},
												ps.posts)
										});
								},
								model.posts),
							swipingState: A2($marshallformula$elm_swiper$Swiper$hasSwipedLeft, event, model.swipingState).a
						}),
					$author$project$Effect$none) : (test($marshallformula$elm_swiper$Swiper$hasSwipedRight) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return ((!(_Utils_cmp(
														p.viewNum,
														$elm$core$List$length(p.images) - 2) > 0)) && _Utils_eq(p.id, id)) ? _Utils_update(
														p,
														{viewNum: p.viewNum + 1}) : p;
												},
												ps.posts)
										});
								},
								model.posts),
							swipingState: A2($marshallformula$elm_swiper$Swiper$hasSwipedRight, event, model.swipingState).a
						}),
					$author$project$Effect$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{
							swipingState: A2($marshallformula$elm_swiper$Swiper$hasSwipedDown, event, model.swipingState).a
						}),
					$author$project$Effect$none));
			case 'Google':
				var idToken = msg.a;
				var newSharedState = function (l) {
					return _Utils_update(
						l,
						{
							user: $elm$core$Maybe$Just(idToken)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'GetImages':
				return _Utils_Tuple2(model, getThumbnails);
			case 'GotImages':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var thumbnails = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{thumbnails: thumbnails}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'Edit':
				var id = msg.a;
				var _v10 = $CurrySoftware$elm_datepicker$DatePicker$init;
				var datePicker = _v10.a;
				var datePickerFx = _v10.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return _Utils_eq(p.id, id) ? _Utils_update(
														p,
														{
															date: function () {
																var _v11 = $justinmimbs$date$Date$fromIsoString(
																	A2(
																		$elm$core$Maybe$withDefault,
																		'',
																		$elm$core$List$head(
																			A2($elm$core$String$split, 'T', p.posttime))));
																if (_v11.$ === 'Ok') {
																	var date = _v11.a;
																	return $elm$core$Maybe$Just(date);
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															}(),
															editContent: $elm$core$Maybe$Just(p.content),
															editImages: p.images,
															editPosttime: $elm$core$Maybe$Just(
																function () {
																	var _v12 = $justinmimbs$date$Date$fromIsoString(
																		A2(
																			$elm$core$Maybe$withDefault,
																			'',
																			$elm$core$List$head(
																				A2($elm$core$String$split, 'T', p.posttime))));
																	if (_v12.$ === 'Ok') {
																		var date = _v12.a;
																		return $CurrySoftware$elm_datepicker$DatePicker$initFromDate(date);
																	} else {
																		return datePicker;
																	}
																}()),
															editTitle: $elm$core$Maybe$Just(p.title),
															state: $author$project$Pages$Newsroom$Editing
														}) : _Utils_update(
														p,
														{state: $author$project$Pages$Newsroom$Idle});
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					getThumbnails);
			case 'Cancel':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$filter,
								function (ps) {
									return A2(
										$elm$core$List$any,
										function (p) {
											return p.id > 0;
										},
										ps.posts);
								},
								A2(
									$elm$core$List$map,
									function (ps) {
										return _Utils_update(
											ps,
											{
												posts: A2(
													$elm$core$List$map,
													function (p) {
														return _Utils_update(
															p,
															{date: $elm$core$Maybe$Nothing, editPosttime: $elm$core$Maybe$Nothing, state: $author$project$Pages$Newsroom$Idle});
													},
													ps.posts)
											});
									},
									model.posts))
						}),
					getThumbnails);
			case 'Add':
				var id = msg.a;
				var img = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return _Utils_update(
														p,
														{
															editImages: _Utils_ap(
																p.editImages,
																_List_fromArray(
																	[img]))
														});
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'Subtract':
				var id = msg.a;
				var img = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return _Utils_update(
														p,
														{
															editImages: A2(
																$elm$core$List$filter,
																function (pi) {
																	return !_Utils_eq(pi, img);
																},
																p.editImages)
														});
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'TitleChanged':
				var id = msg.a;
				var newTitle = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return _Utils_update(
														p,
														{
															editTitle: $elm$core$Maybe$Just(newTitle)
														});
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'ContentChanged':
				var id = msg.a;
				var newContent = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$map,
												function (p) {
													return _Utils_update(
														p,
														{
															editContent: $elm$core$Maybe$Just(newContent)
														});
												},
												ps.posts)
										});
								},
								model.posts)
						}),
					$author$project$Effect$none);
			case 'SetDatePicker':
				var id = msg.a;
				var subMsg = msg.b;
				var picker = $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (p) {
							return _Utils_eq(p.id, id);
						},
						A3(
							$elm$core$List$foldl,
							F2(
								function (a, b) {
									return _Utils_ap(b, a.posts);
								}),
							_List_Nil,
							model.posts)));
				if (picker.$ === 'Just') {
					var picky = picker.a;
					var _v14 = picky.editPosttime;
					if (_v14.$ === 'Just') {
						var pik = _v14.a;
						var _v15 = A3($CurrySoftware$elm_datepicker$DatePicker$update, $author$project$Pages$Newsroom$settings, subMsg, pik);
						var newDatePicker = _v15.a;
						var dateEvent = _v15.b;
						var date = function () {
							if (dateEvent.$ === 'Picked') {
								var newDate = dateEvent.a;
								return $elm$core$Maybe$Just(newDate);
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}();
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									posts: A2(
										$elm$core$List$map,
										function (ps) {
											return _Utils_update(
												ps,
												{
													posts: A2(
														$elm$core$List$map,
														function (p) {
															return _Utils_eq(p.id, id) ? _Utils_update(
																p,
																{
																	date: date,
																	editPosttime: $elm$core$Maybe$Just(newDatePicker)
																}) : p;
														},
														ps.posts)
												});
										},
										model.posts)
								}),
							$author$project$Effect$none);
					} else {
						return _Utils_Tuple2(model, $author$project$Effect$none);
					}
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'GetUpload':
				return _Utils_Tuple2(
					model,
					$author$project$Effect$fromCmd(
						A2(
							$elm$file$File$Select$file,
							_List_fromArray(
								['image/png', 'image/jpg', 'image/gif']),
							$author$project$Pages$Newsroom$GotUpload)));
			case 'GotUpload':
				var file = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Effect$fromCmd(
						$elm$http$Http$request(
							{
								body: $elm$http$Http$fileBody(file),
								expect: A2(
									$elm$http$Http$expectJson,
									$author$project$Pages$Newsroom$GotImages,
									$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
								headers: _List_fromArray(
									[
										A2(
										$elm$http$Http$header,
										'idToken',
										A2($elm$core$Maybe$withDefault, '', model.localShared.user)),
										A2(
										$elm$http$Http$header,
										'File-Name',
										$elm$file$File$name(file))
									]),
								method: 'POST',
								timeout: $elm$core$Maybe$Nothing,
								tracker: $elm$core$Maybe$Nothing,
								url: $author$project$Pages$Newsroom$serverUrl + '/newsroom/upload/image'
							})));
			case 'PublishPost':
				var id = msg.a;
				var publishing = $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (p) {
							return _Utils_eq(p.id, id);
						},
						A3(
							$elm$core$List$foldl,
							F2(
								function (a, b) {
									return _Utils_ap(b, a.posts);
								}),
							_List_Nil,
							model.posts)));
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							posts: A2(
								$elm$core$List$map,
								function (ps) {
									return _Utils_update(
										ps,
										{
											posts: A2(
												$elm$core$List$filter,
												function (p) {
													return !(p.id < 0);
												},
												A2(
													$elm$core$List$map,
													function (p) {
														return _Utils_update(
															p,
															{date: $elm$core$Maybe$Nothing, editPosttime: $elm$core$Maybe$Nothing, state: $author$project$Pages$Newsroom$Idle});
													},
													ps.posts))
										});
								},
								model.posts)
						}),
					function () {
						if (publishing.$ === 'Just') {
							var editedPost = publishing.a;
							return $author$project$Effect$fromCmd(
								$elm$http$Http$request(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'id',
														$elm$json$Json$Encode$int(editedPost.id)),
														_Utils_Tuple2(
														'title',
														$elm$json$Json$Encode$string(
															A2($elm$core$Maybe$withDefault, '', editedPost.editTitle))),
														_Utils_Tuple2(
														'content',
														$elm$json$Json$Encode$string(
															A2($elm$core$Maybe$withDefault, '', editedPost.editContent))),
														_Utils_Tuple2(
														'posttime',
														nullable(
															A2(
																$elm$core$Maybe$map,
																function (date) {
																	return $justinmimbs$date$Date$toIsoString(date) + 'T13:00:00';
																},
																editedPost.date))),
														_Utils_Tuple2(
														'images',
														A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, editedPost.editImages))
													]))),
										expect: $elm$http$Http$expectWhatever($author$project$Pages$Newsroom$Reload),
										headers: _List_fromArray(
											[
												A2(
												$elm$http$Http$header,
												'idToken',
												A2($elm$core$Maybe$withDefault, '', model.localShared.user))
											]),
										method: 'POST',
										timeout: $elm$core$Maybe$Nothing,
										tracker: $elm$core$Maybe$Nothing,
										url: $author$project$Pages$Newsroom$serverUrl + '/newsroom/upload/post'
									}));
						} else {
							return $author$project$Effect$none;
						}
					}());
			case 'Reload':
				return _Utils_Tuple2(
					model,
					$author$project$Effect$fromCmd($elm$browser$Browser$Navigation$reload));
			case 'New':
				var _v19 = $CurrySoftware$elm_datepicker$DatePicker$init;
				var datePicker = _v19.a;
				var datePickerFx = _v19.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							animationTracker: A3(
								$elm$core$Dict$insert,
								'-1',
								A2($author$project$Pages$Home_$AnimationState, $author$project$Pages$Home_$Middle, true),
								model.animationTracker),
							posts: A2(
								$elm$core$List$cons,
								A2(
									$author$project$Pages$Newsroom$Posts,
									_List_fromArray(
										[
											$author$project$Pages$Newsroom$Post(-1)('')(
											$elm$core$Maybe$Just(''))(_List_Nil)(_List_Nil)('')(
											$elm$core$Maybe$Just(''))('')(
											A2($elm$core$Maybe$map, $CurrySoftware$elm_datepicker$DatePicker$initFromDate, model.today))(model.today)(0)($author$project$Pages$Newsroom$Editing)
										]),
									true),
								model.posts)
						}),
					getThumbnails);
			case 'GotDate':
				var date = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							today: $elm$core$Maybe$Just(date)
						}),
					$author$project$Effect$none);
			case 'Delete':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Effect$fromCmd(
						$elm$http$Http$request(
							{
								body: $elm$http$Http$emptyBody,
								expect: $elm$http$Http$expectWhatever($author$project$Pages$Newsroom$Reload),
								headers: _List_fromArray(
									[
										A2(
										$elm$http$Http$header,
										'idToken',
										A2($elm$core$Maybe$withDefault, '', model.localShared.user))
									]),
								method: 'POST',
								timeout: $elm$core$Maybe$Nothing,
								tracker: $elm$core$Maybe$Nothing,
								url: $author$project$Pages$Newsroom$serverUrl + ('/newsroom/delete/post?post_id=' + $elm$core$String$fromInt(id))
							})));
			case 'CopyText':
				var s = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Effect$fromCmd(
						$author$project$Ports$copyText(s)));
			case 'AlertCopy':
				var b = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							alertCopy: b ? $author$project$Pages$Newsroom$Good('') : $author$project$Pages$Newsroom$Bad('')
						}),
					$author$project$Effect$fromCmd(
						A2(
							$elm$core$Task$perform,
							$author$project$Pages$Newsroom$ClearCopy,
							$elm$core$Process$sleep(2000))));
			case 'ClearCopy':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{alertCopy: $author$project$Pages$Newsroom$None}),
					$author$project$Effect$none);
			case 'CancelDelete':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{confirmDelete: $elm$core$Maybe$Nothing}),
					$author$project$Effect$none);
			default:
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							confirmDelete: $elm$core$Maybe$Just(id)
						}),
					$author$project$Effect$none);
		}
	});
var $author$project$Pages$Newsroom$Add = F2(
	function (a, b) {
		return {$: 'Add', a: a, b: b};
	});
var $author$project$Pages$Newsroom$AskDelete = function (a) {
	return {$: 'AskDelete', a: a};
};
var $author$project$Pages$Newsroom$Cancel = {$: 'Cancel'};
var $author$project$Pages$Newsroom$ContentChanged = F2(
	function (a, b) {
		return {$: 'ContentChanged', a: a, b: b};
	});
var $author$project$Pages$Newsroom$CopyText = function (a) {
	return {$: 'CopyText', a: a};
};
var $author$project$Pages$Newsroom$Edit = function (a) {
	return {$: 'Edit', a: a};
};
var $author$project$Pages$Newsroom$GetUpload = {$: 'GetUpload'};
var $author$project$Pages$Newsroom$ImageSwiped = F2(
	function (a, b) {
		return {$: 'ImageSwiped', a: a, b: b};
	});
var $author$project$Pages$Newsroom$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Newsroom$MoveLeft = function (a) {
	return {$: 'MoveLeft', a: a};
};
var $author$project$Pages$Newsroom$MoveRight = function (a) {
	return {$: 'MoveRight', a: a};
};
var $author$project$Pages$Newsroom$New = {$: 'New'};
var $author$project$Pages$Newsroom$PublishPost = function (a) {
	return {$: 'PublishPost', a: a};
};
var $author$project$Pages$Newsroom$SetDatePicker = F2(
	function (a, b) {
		return {$: 'SetDatePicker', a: a, b: b};
	});
var $author$project$Pages$Newsroom$Subtract = F2(
	function (a, b) {
		return {$: 'Subtract', a: a, b: b};
	});
var $author$project$Pages$Newsroom$TitleChanged = F2(
	function (a, b) {
		return {$: 'TitleChanged', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$clipY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clipY);
var $author$project$Palette$green500 = A3($mdgriffith$elm_ui$Element$rgb255, 16, 185, 129);
var $author$project$Pages$Newsroom$copyalert = F2(
	function (device, state) {
		switch (state.$) {
			case 'Good':
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class('slide_up_and_out')),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 25),
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$green500)
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Link Copied to Clipboard!')
							])));
			case 'Bad':
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class('slide_up_and_out')),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 25),
							$mdgriffith$elm_ui$Element$alignBottom,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$warning)
						]),
					$mdgriffith$elm_ui$Element$text('Copy Failed.'));
			default:
				return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Pages$Newsroom$CancelDelete = {$: 'CancelDelete'};
var $author$project$Pages$Newsroom$Delete = function (a) {
	return {$: 'Delete', a: a};
};
var $author$project$Pages$Newsroom$deleteConfirm = F2(
	function (model, id) {
		var w = model.localShared.width;
		var h = model.localShared.height;
		var device = model.localShared.device._class;
		var isBigDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$BigDesktop);
		var isDesktop = _Utils_eq(device, $mdgriffith$elm_ui$Element$Desktop);
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$behindContent(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$gradient(
								{
									angle: $elm$core$Basics$degrees(165),
									steps: _List_fromArray(
										[
											A4($mdgriffith$elm_ui$Element$rgba255, 87, 83, 78, 0.7),
											A4($mdgriffith$elm_ui$Element$rgba255, 17, 24, 39, 0.9)
										])
								}),
								$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Newsroom$CancelDelete)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(
							A2($elm$core$Basics$min, 600, w))),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(
							A2($elm$core$Basics$min, h, 600))),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$padding(25),
						$mdgriffith$elm_ui$Element$spacing(50),
						$mdgriffith$elm_ui$Element$Border$shadow(
						{
							blur: 20,
							color: A3($mdgriffith$elm_ui$Element$rgb, 0.25, 0.25, 0.3),
							offset: _Utils_Tuple2(0, 0),
							size: 1
						}),
						$mdgriffith$elm_ui$Element$Border$rounded(25),
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$warning),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
							]),
						$mdgriffith$elm_ui$Element$text('DELETE?')),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$center,
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, 400, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								function () {
									var _v0 = A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.title;
										},
										$elm$core$List$head(
											A2(
												$elm$core$List$filter,
												function (p) {
													return _Utils_eq(p.id, id);
												},
												A3(
													$elm$core$List$foldl,
													F2(
														function (a, b) {
															return _Utils_ap(b, a.posts);
														}),
													_List_Nil,
													model.posts))));
									if (_v0.$ === 'Just') {
										var title = _v0.a;
										return title;
									} else {
										return 'Error: Failed to get post title. You probably don\'t want to delete this, the result is unpredictable.';
									}
								}())
							])),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$warning),
								$mdgriffith$elm_ui$Element$Border$rounded(6),
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb255, 224, 71, 71))
									]))
							]),
						{
							label: $mdgriffith$elm_ui$Element$text('DELETE.'),
							onPress: $elm$core$Maybe$Just(
								$author$project$Pages$Newsroom$Delete(id))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								$mdgriffith$elm_ui$Element$Border$rounded(6),
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
									]))
							]),
						{
							label: $mdgriffith$elm_ui$Element$text('Cancel!'),
							onPress: $elm$core$Maybe$Just($author$project$Pages$Newsroom$CancelDelete)
						})
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Element$onRight = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$OnRight, element);
};
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.topLeft;
	var topRight = _v0.topRight;
	var bottomLeft = _v0.bottomLeft;
	var bottomRight = _v0.bottomRight;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var $CurrySoftware$elm_datepicker$DatePicker$Blur = {$: 'Blur'};
var $CurrySoftware$elm_datepicker$DatePicker$Focus = {$: 'Focus'};
var $CurrySoftware$elm_datepicker$DatePicker$SubmitText = {$: 'SubmitText'};
var $CurrySoftware$elm_datepicker$DatePicker$Text = function (a) {
	return {$: 'Text', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$ChangeFocus = function (a) {
	return {$: 'ChangeFocus', a: a};
};
var $justinmimbs$date$Date$Months = {$: 'Months'};
var $CurrySoftware$elm_datepicker$DatePicker$MouseDown = {$: 'MouseDown'};
var $CurrySoftware$elm_datepicker$DatePicker$MouseUp = {$: 'MouseUp'};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0.a;
		switch (unit.$) {
			case 'Years':
				return A3(
					$justinmimbs$date$Date$add,
					$justinmimbs$date$Date$Months,
					12 * n,
					$justinmimbs$date$Date$RD(rd));
			case 'Months':
				var date = $justinmimbs$date$Date$toCalendarDate(
					$justinmimbs$date$Date$RD(rd));
				var wholeMonths = ((12 * (date.year - 1)) + ($justinmimbs$date$Date$monthToNumber(date.month) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return $justinmimbs$date$Date$RD(
					($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
						$elm$core$Basics$min,
						date.day,
						A2($justinmimbs$date$Date$daysInMonth, y, m)));
			case 'Weeks':
				return $justinmimbs$date$Date$RD(rd + (7 * n));
			default:
				return $justinmimbs$date$Date$RD(rd + n);
		}
	});
var $CurrySoftware$elm_datepicker$DatePicker$Date$changeYear = F2(
	function (current, newYear) {
		var _v0 = $elm$core$String$toInt(newYear);
		if (_v0.$ === 'Just') {
			var year = _v0.a;
			return A3(
				$justinmimbs$date$Date$fromCalendarDate,
				year,
				$justinmimbs$date$Date$month(current),
				$justinmimbs$date$Date$day(current));
		} else {
			return current;
		}
	});
var $CurrySoftware$elm_datepicker$DatePicker$groupDates = function (dates) {
	var go = F4(
		function (i, xs, racc, acc) {
			go:
			while (true) {
				if (!xs.b) {
					return $elm$core$List$reverse(acc);
				} else {
					var x = xs.a;
					var xxs = xs.b;
					if (i === 6) {
						var $temp$i = 0,
							$temp$xs = xxs,
							$temp$racc = _List_Nil,
							$temp$acc = A2(
							$elm$core$List$cons,
							$elm$core$List$reverse(
								A2($elm$core$List$cons, x, racc)),
							acc);
						i = $temp$i;
						xs = $temp$xs;
						racc = $temp$racc;
						acc = $temp$acc;
						continue go;
					} else {
						var $temp$i = i + 1,
							$temp$xs = xxs,
							$temp$racc = A2($elm$core$List$cons, x, racc),
							$temp$acc = acc;
						i = $temp$i;
						xs = $temp$xs;
						racc = $temp$racc;
						acc = $temp$acc;
						continue go;
					}
				}
			}
		});
	return A4(go, 0, dates, _List_Nil, _List_Nil);
};
var $CurrySoftware$elm_datepicker$DatePicker$maybeOr = F2(
	function (lhs, rhs) {
		if (rhs.$ === 'Just') {
			return rhs;
		} else {
			return lhs;
		}
	});
var $CurrySoftware$elm_datepicker$DatePicker$mkClass = F2(
	function (_v0, c) {
		var classNamespace = _v0.classNamespace;
		return $elm$html$Html$Attributes$class(
			_Utils_ap(classNamespace, c));
	});
var $elm$html$Html$option = _VirtualDom_node('option');
var $justinmimbs$date$Date$Day = {$: 'Day'};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1);
	});
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date.a;
		switch (interval.$) {
			case 'Year':
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 'Quarter':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 'Month':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 'Week':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Monday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Tuesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Tue, date));
			case 'Wednesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Wed, date));
			case 'Thursday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Thu, date));
			case 'Friday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Fri, date));
			case 'Saturday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sat, date));
			case 'Sunday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sun, date));
			default:
				return date;
		}
	});
var $justinmimbs$date$Date$Days = {$: 'Days'};
var $justinmimbs$date$Date$Weeks = {$: 'Weeks'};
var $justinmimbs$date$Date$Years = {$: 'Years'};
var $justinmimbs$date$Date$intervalToUnits = function (interval) {
	switch (interval.$) {
		case 'Year':
			return _Utils_Tuple2(1, $justinmimbs$date$Date$Years);
		case 'Quarter':
			return _Utils_Tuple2(3, $justinmimbs$date$Date$Months);
		case 'Month':
			return _Utils_Tuple2(1, $justinmimbs$date$Date$Months);
		case 'Day':
			return _Utils_Tuple2(1, $justinmimbs$date$Date$Days);
		default:
			var week = interval;
			return _Utils_Tuple2(1, $justinmimbs$date$Date$Weeks);
	}
};
var $justinmimbs$date$Date$ceiling = F2(
	function (interval, date) {
		var floored = A2($justinmimbs$date$Date$floor, interval, date);
		if (_Utils_eq(date, floored)) {
			return date;
		} else {
			var _v0 = $justinmimbs$date$Date$intervalToUnits(interval);
			var n = _v0.a;
			var unit = _v0.b;
			return A3($justinmimbs$date$Date$add, unit, n, floored);
		}
	});
var $justinmimbs$date$Date$rangeHelp = F5(
	function (unit, step, until, revList, current) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(current, until) < 0) {
				var _v0 = A3(
					$justinmimbs$date$Date$add,
					unit,
					step,
					$justinmimbs$date$Date$RD(current));
				var next = _v0.a;
				var $temp$unit = unit,
					$temp$step = step,
					$temp$until = until,
					$temp$revList = A2(
					$elm$core$List$cons,
					$justinmimbs$date$Date$RD(current),
					revList),
					$temp$current = next;
				unit = $temp$unit;
				step = $temp$step;
				until = $temp$until;
				revList = $temp$revList;
				current = $temp$current;
				continue rangeHelp;
			} else {
				return $elm$core$List$reverse(revList);
			}
		}
	});
var $justinmimbs$date$Date$range = F4(
	function (interval, step, _v0, _v1) {
		var start = _v0.a;
		var until = _v1.a;
		var _v2 = $justinmimbs$date$Date$intervalToUnits(interval);
		var n = _v2.a;
		var unit = _v2.b;
		var _v3 = A2(
			$justinmimbs$date$Date$ceiling,
			interval,
			$justinmimbs$date$Date$RD(start));
		var first = _v3.a;
		return (_Utils_cmp(first, until) < 0) ? A5(
			$justinmimbs$date$Date$rangeHelp,
			unit,
			A2($elm$core$Basics$max, 1, step) * n,
			until,
			_List_Nil,
			first) : _List_Nil;
	});
var $justinmimbs$date$Date$Friday = {$: 'Friday'};
var $justinmimbs$date$Date$Monday = {$: 'Monday'};
var $justinmimbs$date$Date$Saturday = {$: 'Saturday'};
var $justinmimbs$date$Date$Sunday = {$: 'Sunday'};
var $justinmimbs$date$Date$Thursday = {$: 'Thursday'};
var $justinmimbs$date$Date$Tuesday = {$: 'Tuesday'};
var $justinmimbs$date$Date$Wednesday = {$: 'Wednesday'};
var $CurrySoftware$elm_datepicker$DatePicker$Date$weekdayToInterval = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return $justinmimbs$date$Date$Monday;
		case 'Tue':
			return $justinmimbs$date$Date$Tuesday;
		case 'Wed':
			return $justinmimbs$date$Date$Wednesday;
		case 'Thu':
			return $justinmimbs$date$Date$Thursday;
		case 'Fri':
			return $justinmimbs$date$Date$Friday;
		case 'Sat':
			return $justinmimbs$date$Date$Saturday;
		default:
			return $justinmimbs$date$Date$Sunday;
	}
};
var $CurrySoftware$elm_datepicker$DatePicker$prepareDates = F2(
	function (date, firstDayOfWeek) {
		var weekdayAsInterval = $CurrySoftware$elm_datepicker$DatePicker$Date$weekdayToInterval(firstDayOfWeek);
		var start = A2(
			$justinmimbs$date$Date$floor,
			weekdayAsInterval,
			A3(
				$justinmimbs$date$Date$fromCalendarDate,
				$justinmimbs$date$Date$year(date),
				$justinmimbs$date$Date$month(date),
				1));
		var firstOfMonth = A3(
			$justinmimbs$date$Date$fromCalendarDate,
			$justinmimbs$date$Date$year(date),
			$justinmimbs$date$Date$month(date),
			1);
		var end = A2(
			$justinmimbs$date$Date$ceiling,
			weekdayAsInterval,
			A3($justinmimbs$date$Date$add, $justinmimbs$date$Date$Months, 1, firstOfMonth));
		return {
			currentDates: A4($justinmimbs$date$Date$range, $justinmimbs$date$Date$Day, 1, start, end),
			currentMonth: date
		};
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $elm$html$Html$table = _VirtualDom_node('table');
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm$html$Html$tbody = _VirtualDom_node('tbody');
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$thead = _VirtualDom_node('thead');
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0.a;
	return rd;
};
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $CurrySoftware$elm_datepicker$DatePicker$Pick = function (a) {
	return {$: 'Pick', a: a};
};
var $CurrySoftware$elm_datepicker$DatePicker$mkClassList = F2(
	function (_v0, cs) {
		var classNamespace = _v0.classNamespace;
		return $elm$html$Html$Attributes$classList(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var c = _v1.a;
					var b = _v1.b;
					return _Utils_Tuple2(
						_Utils_ap(classNamespace, c),
						b);
				},
				cs));
	});
var $CurrySoftware$elm_datepicker$DatePicker$viewDay = F5(
	function (settings, picked, isOtherMonth, isToday, d) {
		var disabled = settings.isDisabled(d);
		var props = (!disabled) ? _List_fromArray(
			[
				$elm$html$Html$Events$onClick(
				$CurrySoftware$elm_datepicker$DatePicker$Pick(d))
			]) : _List_Nil;
		var classList = $CurrySoftware$elm_datepicker$DatePicker$mkClassList(settings);
		return A2(
			$elm$html$Html$td,
			_Utils_ap(
				_List_fromArray(
					[
						classList(
						_List_fromArray(
							[
								_Utils_Tuple2('day', true),
								_Utils_Tuple2('disabled', disabled),
								_Utils_Tuple2(
								'picked',
								picked(d)),
								_Utils_Tuple2(
								'today',
								isToday(d)),
								_Utils_Tuple2(
								'other-month',
								isOtherMonth(d))
							]))
					]),
				props),
			_List_fromArray(
				[
					settings.cellFormatter(
					$elm$core$String$fromInt(
						$justinmimbs$date$Date$day(d)))
				]));
	});
var $CurrySoftware$elm_datepicker$DatePicker$Date$yearRange = F2(
	function (_v0, range) {
		var currentMonth = _v0.currentMonth;
		var today = _v0.today;
		switch (range.$) {
			case 'MoreOrLess':
				var num = range.a;
				return A2(
					$elm$core$List$range,
					$justinmimbs$date$Date$year(currentMonth) - num,
					$justinmimbs$date$Date$year(currentMonth) + num);
			case 'Between':
				var start = range.a;
				var end = range.b;
				return A2($elm$core$List$range, start, end);
			case 'From':
				var year_ = range.a;
				return A2(
					$elm$core$List$range,
					year_,
					$justinmimbs$date$Date$year(today));
			case 'To':
				var year_ = range.a;
				return A2(
					$elm$core$List$range,
					$justinmimbs$date$Date$year(today),
					year_);
			default:
				return _List_Nil;
		}
	});
var $CurrySoftware$elm_datepicker$DatePicker$yearRangeActive = function (yearRange) {
	return !_Utils_eq(yearRange, $CurrySoftware$elm_datepicker$DatePicker$Date$Off);
};
var $CurrySoftware$elm_datepicker$DatePicker$datePicker = F3(
	function (pickedDate, settings, model) {
		var focused = model.focused;
		var today = model.today;
		var picked = function (d) {
			return A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function (pdate) {
						return _Utils_eq(
							$justinmimbs$date$Date$toRataDie(pdate),
							$justinmimbs$date$Date$toRataDie(d));
					},
					pickedDate));
		};
		var onChange = function (handler) {
			return A2(
				$elm$html$Html$Events$on,
				'change',
				A2($elm$json$Json$Decode$map, handler, $elm$html$Html$Events$targetValue));
		};
		var isToday = function (d) {
			return _Utils_eq(
				$justinmimbs$date$Date$toRataDie(d),
				$justinmimbs$date$Date$toRataDie(today));
		};
		var firstDayOffset = $justinmimbs$date$Date$weekdayToNumber(settings.firstDayOfWeek) - 1;
		var dpClass = $CurrySoftware$elm_datepicker$DatePicker$mkClass(settings);
		var currentDate = A2(
			$elm$core$Maybe$withDefault,
			today,
			A2($CurrySoftware$elm_datepicker$DatePicker$maybeOr, pickedDate, focused));
		var isOtherMonth = function (d) {
			return !_Utils_eq(
				$justinmimbs$date$Date$month(currentDate),
				$justinmimbs$date$Date$month(d));
		};
		var arrow = F2(
			function (className, message) {
				return A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							dpClass(className),
							$elm$html$Html$Events$onClick(message),
							$elm$html$Html$Attributes$tabindex(-1),
							$elm$html$Html$Attributes$type_('button')
						]),
					_List_Nil);
			});
		var _v0 = A2($CurrySoftware$elm_datepicker$DatePicker$prepareDates, currentDate, settings.firstDayOfWeek);
		var currentMonth = _v0.currentMonth;
		var currentDates = _v0.currentDates;
		var dayList = A2(
			$elm$core$List$map,
			function (rowDays) {
				return A2(
					$elm$html$Html$tr,
					_List_fromArray(
						[
							dpClass('row')
						]),
					A2(
						$elm$core$List$map,
						A4($CurrySoftware$elm_datepicker$DatePicker$viewDay, settings, picked, isOtherMonth, isToday),
						rowDays));
			},
			$CurrySoftware$elm_datepicker$DatePicker$groupDates(currentDates));
		var isCurrentYear = function (selectedYear) {
			return _Utils_eq(
				$justinmimbs$date$Date$year(currentMonth),
				selectedYear);
		};
		var yearOption = F2(
			function (index, selectedYear) {
				return _Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A2(
						$elm$html$Html$option,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$value(
								$elm$core$String$fromInt(selectedYear)),
								$elm$html$Html$Attributes$selected(
								isCurrentYear(selectedYear))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$elm$core$String$fromInt(selectedYear))
							])));
			});
		var _v1 = function () {
			var front = function (to_) {
				return A2(
					$elm$core$List$range,
					$justinmimbs$date$Date$year(currentMonth),
					to_);
			};
			var back = function (from_) {
				return A2(
					$elm$core$List$range,
					from_,
					$justinmimbs$date$Date$year(currentMonth));
			};
			var _v2 = settings.changeYear;
			switch (_v2.$) {
				case 'From':
					var from_ = _v2.a;
					return _Utils_Tuple2(
						front(from_ - 1),
						back(
							$justinmimbs$date$Date$year(today) + 1));
				case 'To':
					var to_ = _v2.a;
					return _Utils_Tuple2(
						front(
							$justinmimbs$date$Date$year(today) - 1),
						back(to_ + 1));
				case 'Between':
					var from_ = _v2.a;
					var to_ = _v2.b;
					return _Utils_Tuple2(
						front(from_ - 1),
						back(to_ + 1));
				case 'MoreOrLess':
					var y = _v2.a;
					return _Utils_Tuple2(_List_Nil, _List_Nil);
				default:
					return _Utils_Tuple2(_List_Nil, _List_Nil);
			}
		}();
		var addedYearsFront = _v1.a;
		var addedYearsBack = _v1.b;
		var dropdownYear = A3(
			$elm$html$Html$Keyed$node,
			'select',
			_List_fromArray(
				[
					onChange(
					A2(
						$elm$core$Basics$composeR,
						$CurrySoftware$elm_datepicker$DatePicker$Date$changeYear(currentDate),
						$CurrySoftware$elm_datepicker$DatePicker$ChangeFocus)),
					dpClass('year-menu')
				]),
			A2(
				$elm$core$List$indexedMap,
				yearOption,
				$elm$core$List$concat(
					_List_fromArray(
						[
							addedYearsFront,
							A2(
							$CurrySoftware$elm_datepicker$DatePicker$Date$yearRange,
							{currentMonth: currentMonth, today: today},
							settings.changeYear),
							addedYearsBack
						]))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					dpClass('picker'),
					A2(
					$elm$html$Html$Events$stopPropagationOn,
					'mousedown',
					$elm$json$Json$Decode$succeed(
						_Utils_Tuple2($CurrySoftware$elm_datepicker$DatePicker$MouseDown, true))),
					A2(
					$elm$html$Html$Events$stopPropagationOn,
					'mouseup',
					$elm$json$Json$Decode$succeed(
						_Utils_Tuple2($CurrySoftware$elm_datepicker$DatePicker$MouseUp, true)))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							dpClass('picker-header')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									dpClass('prev-container')
								]),
							_List_fromArray(
								[
									A2(
									arrow,
									'prev',
									$CurrySoftware$elm_datepicker$DatePicker$ChangeFocus(
										A3($justinmimbs$date$Date$add, $justinmimbs$date$Date$Months, -1, currentDate)))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									dpClass('month-container')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											dpClass('month')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											settings.monthFormatter(
												$justinmimbs$date$Date$month(currentMonth)))
										])),
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											dpClass('year')
										]),
									_List_fromArray(
										[
											(!$CurrySoftware$elm_datepicker$DatePicker$yearRangeActive(settings.changeYear)) ? $elm$html$Html$text(
											settings.yearFormatter(
												$justinmimbs$date$Date$year(currentMonth))) : A3(
											$elm$html$Html$Keyed$node,
											'span',
											_List_Nil,
											_List_fromArray(
												[
													_Utils_Tuple2(
													$elm$core$String$fromInt(
														$justinmimbs$date$Date$year(currentMonth)),
													dropdownYear)
												]))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									dpClass('next-container')
								]),
							_List_fromArray(
								[
									A2(
									arrow,
									'next',
									$CurrySoftware$elm_datepicker$DatePicker$ChangeFocus(
										A3($justinmimbs$date$Date$add, $justinmimbs$date$Date$Months, 1, currentDate)))
								]))
						])),
					A2(
					$elm$html$Html$table,
					_List_fromArray(
						[
							dpClass('table')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$thead,
							_List_fromArray(
								[
									dpClass('weekdays')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$tr,
									_List_Nil,
									A2(
										$elm$core$List$map,
										function (d) {
											return A2(
												$elm$html$Html$td,
												_List_fromArray(
													[
														dpClass('dow')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(
														settings.dayFormatter(d))
													]));
										},
										A2(
											$elm$core$List$take,
											7,
											A2(
												$elm$core$List$drop,
												firstDayOffset,
												$elm$core$List$concat(
													A2(
														$elm$core$List$repeat,
														2,
														_List_fromArray(
															[$elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat, $elm$time$Time$Sun])))))))
								])),
							A2(
							$elm$html$Html$tbody,
							_List_fromArray(
								[
									dpClass('days')
								]),
							dayList)
						]))
				]));
	});
var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty('name');
var $elm$html$Html$Events$onBlur = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'blur',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onFocus = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'focus',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $CurrySoftware$elm_datepicker$DatePicker$view = F3(
	function (pickedDate, settings, _v0) {
		var datepicker = _v0.a;
		var model = datepicker;
		var potentialInputId = A3(
			$elm$core$Basics$composeR,
			$elm$core$List$singleton,
			$elm$core$List$filterMap($elm$core$Basics$identity),
			A2($elm$core$Maybe$map, $elm$html$Html$Attributes$id, settings.inputId));
		var inputClasses = _Utils_ap(
			_List_fromArray(
				[
					_Utils_Tuple2(settings.classNamespace + 'input', true)
				]),
			settings.inputClassList);
		var inputCommon = function (xs) {
			return A2(
				$elm$html$Html$input,
				_Utils_ap(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(inputClasses),
							$elm$html$Html$Attributes$name(
							A2($elm$core$Maybe$withDefault, '', settings.inputName)),
							$elm$html$Html$Attributes$type_('text'),
							A2(
							$elm$html$Html$Events$on,
							'change',
							$elm$json$Json$Decode$succeed($CurrySoftware$elm_datepicker$DatePicker$SubmitText)),
							$elm$html$Html$Events$onInput($CurrySoftware$elm_datepicker$DatePicker$Text),
							$elm$html$Html$Events$onBlur($CurrySoftware$elm_datepicker$DatePicker$Blur),
							$elm$html$Html$Events$onClick($CurrySoftware$elm_datepicker$DatePicker$Focus),
							$elm$html$Html$Events$onFocus($CurrySoftware$elm_datepicker$DatePicker$Focus)
						]),
					_Utils_ap(
						settings.inputAttributes,
						_Utils_ap(potentialInputId, xs))),
				_List_Nil);
		};
		var dateInput = inputCommon(
			_List_fromArray(
				[
					$elm$html$Html$Attributes$placeholder(settings.placeholder),
					$elm$html$Html$Attributes$value(
					A2(
						$elm$core$Maybe$withDefault,
						A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$map, settings.dateFormatter, pickedDate)),
						model.inputText))
				]));
		var containerClassList = A2(
			$elm$core$List$cons,
			_Utils_Tuple2(settings.classNamespace + 'container', true),
			settings.containerClassList);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(containerClassList)
				]),
			_List_fromArray(
				[
					dateInput,
					model.open ? A3($CurrySoftware$elm_datepicker$DatePicker$datePicker, pickedDate, settings, model) : $elm$html$Html$text('')
				]));
	});
var $author$project$Pages$Newsroom$view = F2(
	function (shared, model) {
		var w = shared.width;
		var isPhone = _Utils_eq(shared.device._class, $mdgriffith$elm_ui$Element$Phone);
		var postWidth = A2(
			$elm$core$Basics$min,
			800,
			$elm$core$Basics$round(
				w * (isPhone ? 0.9 : 0.8)));
		var h = shared.height;
		var loadingSpinner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$height(
					A2(
						$elm$core$List$any,
						function (p) {
							return p.show;
						},
						model.posts) ? $mdgriffith$elm_ui$Element$shrink : $mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('spinner'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(120)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(
								(_Utils_eq(model.loadingState, $author$project$Pages$Newsroom$LoadingFailed) || _Utils_eq(model.loadingState, $author$project$Pages$Newsroom$LoadingDone)) ? 0 : 120)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(80)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(80)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								{description: 'logo', src: '/img/logo_sans_text.svg'}))
						]),
					{description: 'Loading...', src: '/img/loading.svg'}),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$padding(10)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							function () {
								var _v5 = model.loadingState;
								switch (_v5.$) {
									case 'StartLoading':
										return 'Loading...';
									case 'RecvPosts':
										return 'Finishing up...';
									case 'RecvImg':
										return '';
									case 'LoadingFailed':
										return 'Failed. Please check your internet connection and try again.';
									default:
										return 'Showing all posts.';
								}
							}())
						]))
				]));
		var device = shared.device._class;
		var post = function (item) {
			var img = A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$elm$core$String$fromInt(item.id))),
							$mdgriffith$elm_ui$Element$Border$rounded(10),
							$mdgriffith$elm_ui$Element$Background$gradient(
							{
								angle: $elm$core$Basics$degrees(45),
								steps: _List_fromArray(
									[
										A3($mdgriffith$elm_ui$Element$rgb255, 161, 161, 170),
										A3($mdgriffith$elm_ui$Element$rgb255, 82, 82, 91),
										$author$project$Palette$gciBlue,
										$author$project$Palette$gciBlue
									])
							}),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$minimum, 100, $mdgriffith$elm_ui$Element$shrink)),
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Border$innerShadow(
											{
												blur: 18,
												color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
												offset: _Utils_Tuple2(1, 8),
												size: 8
											})
										]),
									A2(
										$elm$core$List$map,
										function (a) {
											return $mdgriffith$elm_ui$Element$htmlAttribute(a);
										},
										$marshallformula$elm_swiper$Swiper$onSwipeEvents(
											$author$project$Pages$Newsroom$ImageSwiped(item.id)))),
								$mdgriffith$elm_ui$Element$none))
						]),
					($elm$core$List$length(item.images) > 1) ? _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							A3(
								$author$project$Shared$ael,
								_Utils_eq(
									item.viewNum,
									$elm$core$List$length(item.images) - 1) ? A3(
									$author$project$Simple$Animation$fromTo,
									{duration: 200, options: _List_Nil},
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(100),
											$author$project$Simple$Animation$Property$y(0)
										]),
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(0),
											$author$project$Simple$Animation$Property$y(10)
										])) : A3(
									$author$project$Simple$Animation$fromTo,
									{duration: 200, options: _List_Nil},
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(0),
											$author$project$Simple$Animation$Property$y(10)
										]),
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(100),
											$author$project$Simple$Animation$Property$y(0)
										])),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$padding(5),
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$Border$roundEach(
										{bottomLeft: 5, bottomRight: 0, topLeft: 5, topRight: 0})
									]),
								A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerY]),
									{
										label: A2(
											$mdgriffith$elm_ui$Element$image,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(30)),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(30)),
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$mouseOver(
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$moveRight(5)
														]))
												]),
											{description: 'right button', src: '/img/right.svg'}),
										onPress: $elm$core$Maybe$Just(
											$author$project$Pages$Newsroom$MoveRight(item.id))
									}))),
							$mdgriffith$elm_ui$Element$inFront(
							A3(
								$author$project$Shared$ael,
								(!item.viewNum) ? A3(
									$author$project$Simple$Animation$fromTo,
									{duration: 200, options: _List_Nil},
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(100),
											$author$project$Simple$Animation$Property$y(0)
										]),
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(0),
											$author$project$Simple$Animation$Property$y(10)
										])) : A3(
									$author$project$Simple$Animation$fromTo,
									{duration: 200, options: _List_Nil},
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(0),
											$author$project$Simple$Animation$Property$y(10)
										]),
									_List_fromArray(
										[
											$author$project$Simple$Animation$Property$opacity(100),
											$author$project$Simple$Animation$Property$y(0)
										])),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$padding(5),
										$mdgriffith$elm_ui$Element$Border$roundEach(
										{bottomLeft: 0, bottomRight: 5, topLeft: 0, topRight: 5})
									]),
								A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerY]),
									{
										label: A2(
											$mdgriffith$elm_ui$Element$image,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(30)),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(30)),
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$mouseOver(
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$moveLeft(5)
														]))
												]),
											{description: 'right button', src: '/img/left.svg'}),
										onPress: $elm$core$Maybe$Just(
											$author$project$Pages$Newsroom$MoveLeft(item.id))
									})))
						]) : _List_Nil),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$moveLeft(item.viewNum * postWidth),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class('animateTransform'))
						]),
					A3(
						$elm$core$List$foldr,
						F2(
							function (a, b) {
								return A2(
									$mdgriffith$elm_ui$Element$image,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(postWidth)),
											$mdgriffith$elm_ui$Element$onRight(b),
											$mdgriffith$elm_ui$Element$htmlAttribute(
											$elm$html$Html$Attributes$id(a))
										]),
									{description: '', src: $author$project$Pages$Newsroom$serverUrl + ('/newsroom/images/' + a)});
							}),
						$mdgriffith$elm_ui$Element$none,
						item.images)));
			var editImg = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id(
							$elm$core$String$fromInt(item.id))),
						$mdgriffith$elm_ui$Element$Border$rounded(10),
						$mdgriffith$elm_ui$Element$Background$gradient(
						{
							angle: $elm$core$Basics$degrees(45),
							steps: _List_fromArray(
								[
									A3($mdgriffith$elm_ui$Element$rgb255, 17, 24, 39),
									A3($mdgriffith$elm_ui$Element$rgb255, 87, 83, 78)
								])
						}),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$minimum, 90, $mdgriffith$elm_ui$Element$shrink))
					]),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(postWidth)),
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$spacing(20)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										$mdgriffith$elm_ui$Element$text('Selected:')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(postWidth)),
												$mdgriffith$elm_ui$Element$scrollbarX,
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(150)),
												$mdgriffith$elm_ui$Element$clipY
											]),
										A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(100)),
													$mdgriffith$elm_ui$Element$spacing(20)
												]),
											A2(
												$elm$core$List$map,
												function (i) {
													return A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width(
																$mdgriffith$elm_ui$Element$px(100)),
																$mdgriffith$elm_ui$Element$height(
																$mdgriffith$elm_ui$Element$px(100)),
																$mdgriffith$elm_ui$Element$inFront(
																A2(
																	$mdgriffith$elm_ui$Element$Input$button,
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
																		]),
																	{
																		label: A2(
																			$mdgriffith$elm_ui$Element$el,
																			_List_fromArray(
																				[
																					A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
																					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																					$mdgriffith$elm_ui$Element$transparent(true),
																					$mdgriffith$elm_ui$Element$htmlAttribute(
																					$elm$html$Html$Attributes$class('animateTransformFast')),
																					$mdgriffith$elm_ui$Element$mouseOver(
																					_List_fromArray(
																						[
																							$mdgriffith$elm_ui$Element$transparent(false)
																						])),
																					$mdgriffith$elm_ui$Element$below(
																					A2(
																						$mdgriffith$elm_ui$Element$el,
																						_List_fromArray(
																							[
																								$mdgriffith$elm_ui$Element$Background$color(
																								A3($mdgriffith$elm_ui$Element$rgb255, 87, 83, 78)),
																								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																								$mdgriffith$elm_ui$Element$Font$center,
																								$mdgriffith$elm_ui$Element$padding(8),
																								$mdgriffith$elm_ui$Element$Border$roundEach(
																								{bottomLeft: 8, bottomRight: 8, topLeft: 0, topRight: 0}),
																								$mdgriffith$elm_ui$Element$clip
																							]),
																						$mdgriffith$elm_ui$Element$text(
																							A2(
																								$elm$core$Maybe$withDefault,
																								'',
																								$elm$core$List$head(
																									A2($elm$core$String$split, '.', i))))))
																				]),
																			A2(
																				$mdgriffith$elm_ui$Element$image,
																				_List_fromArray(
																					[
																						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																						$mdgriffith$elm_ui$Element$Background$color(
																						A4($mdgriffith$elm_ui$Element$rgba255, 254, 202, 202, 0.8))
																					]),
																				{description: '', src: '/img/down.svg'})),
																		onPress: $elm$core$Maybe$Just(
																			A2($author$project$Pages$Newsroom$Subtract, item.id, i))
																	}))
															]),
														A2(
															$mdgriffith$elm_ui$Element$image,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$height(
																	$mdgriffith$elm_ui$Element$px(100))
																]),
															{description: i, src: $author$project$Pages$Newsroom$serverUrl + ('/newsroom/thumbnail/' + i)}));
												},
												item.editImages))),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										$mdgriffith$elm_ui$Element$text('Options:')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(postWidth)),
												$mdgriffith$elm_ui$Element$scrollbarX,
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(150)),
												$mdgriffith$elm_ui$Element$clipY
											]),
										A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(100)),
													$mdgriffith$elm_ui$Element$spacing(20)
												]),
											A2(
												$elm$core$List$map,
												function (i) {
													return A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width(
																$mdgriffith$elm_ui$Element$px(100)),
																$mdgriffith$elm_ui$Element$height(
																$mdgriffith$elm_ui$Element$px(100)),
																$mdgriffith$elm_ui$Element$inFront(
																A2(
																	$mdgriffith$elm_ui$Element$Input$button,
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
																		]),
																	{
																		label: A2(
																			$mdgriffith$elm_ui$Element$el,
																			_List_fromArray(
																				[
																					A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
																					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																					$mdgriffith$elm_ui$Element$transparent(true),
																					$mdgriffith$elm_ui$Element$htmlAttribute(
																					$elm$html$Html$Attributes$class('animateTransformFast')),
																					$mdgriffith$elm_ui$Element$mouseOver(
																					_List_fromArray(
																						[
																							$mdgriffith$elm_ui$Element$transparent(false)
																						])),
																					$mdgriffith$elm_ui$Element$below(
																					A2(
																						$mdgriffith$elm_ui$Element$el,
																						_List_fromArray(
																							[
																								$mdgriffith$elm_ui$Element$Background$color(
																								A3($mdgriffith$elm_ui$Element$rgb255, 87, 83, 78)),
																								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																								$mdgriffith$elm_ui$Element$Font$center,
																								$mdgriffith$elm_ui$Element$padding(8),
																								$mdgriffith$elm_ui$Element$Border$roundEach(
																								{bottomLeft: 8, bottomRight: 8, topLeft: 0, topRight: 0}),
																								$mdgriffith$elm_ui$Element$clip
																							]),
																						$mdgriffith$elm_ui$Element$text(
																							A2(
																								$elm$core$Maybe$withDefault,
																								'',
																								$elm$core$List$head(
																									A2($elm$core$String$split, '.', i))))))
																				]),
																			A2(
																				$mdgriffith$elm_ui$Element$image,
																				_List_fromArray(
																					[
																						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																						$mdgriffith$elm_ui$Element$Background$color(
																						A4($mdgriffith$elm_ui$Element$rgba255, 217, 249, 157, 0.8))
																					]),
																				{description: '', src: '/img/up.svg'})),
																		onPress: $elm$core$Maybe$Just(
																			A2($author$project$Pages$Newsroom$Add, item.id, i))
																	}))
															]),
														A2(
															$mdgriffith$elm_ui$Element$image,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$height(
																	$mdgriffith$elm_ui$Element$px(100))
																]),
															{description: i, src: $author$project$Pages$Newsroom$serverUrl + ('/newsroom/thumbnail/' + i)}));
												},
												A2(
													$elm$core$List$filter,
													function (t) {
														return !A2($elm$core$List$member, t, item.editImages);
													},
													model.thumbnails)))),
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										{
											label: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
														$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
														A2($mdgriffith$elm_ui$Element$paddingXY, 40, 10),
														$mdgriffith$elm_ui$Element$mouseOver(
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlueLight)
															])),
														$mdgriffith$elm_ui$Element$Border$rounded(5)
													]),
												$mdgriffith$elm_ui$Element$text('Upload')),
											onPress: $elm$core$Maybe$Just($author$project$Pages$Newsroom$GetUpload)
										})
									])))
						]),
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$transparent(true),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								A2($mdgriffith$elm_ui$Element$minimum, 600, $mdgriffith$elm_ui$Element$shrink))
							]),
						{
							description: '',
							src: $author$project$Pages$Newsroom$serverUrl + ('/newsroom/images/' + A2(
								$elm$core$Maybe$withDefault,
								'',
								$elm$core$List$head(item.images)))
						})));
			var editContent = function () {
				var save = A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb255, 77, 124, 15)),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
									A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color(
											A3($mdgriffith$elm_ui$Element$rgb255, 101, 163, 13))
										])),
									$mdgriffith$elm_ui$Element$Border$rounded(5)
								]),
							$mdgriffith$elm_ui$Element$text('Publish This Post')),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Newsroom$PublishPost(item.id))
					});
				var _delete = (item.id > 0) ? A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$warning),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
									A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color(
											A3($mdgriffith$elm_ui$Element$rgb255, 224, 71, 71))
										])),
									$mdgriffith$elm_ui$Element$Border$rounded(5)
								]),
							$mdgriffith$elm_ui$Element$text('Delete')),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Newsroom$AskDelete(item.id))
					}) : $mdgriffith$elm_ui$Element$none;
				var date = function (picker) {
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$map,
								function (message) {
									return A2($author$project$Pages$Newsroom$SetDatePicker, item.id, message);
								},
								A3($CurrySoftware$elm_datepicker$DatePicker$view, item.date, $author$project$Pages$Newsroom$settings, picker))));
				};
				var cancel = A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
									A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
										])),
									$mdgriffith$elm_ui$Element$Border$rounded(5)
								]),
							$mdgriffith$elm_ui$Element$text('Cancel')),
						onPress: $elm$core$Maybe$Just($author$project$Pages$Newsroom$Cancel)
					});
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$multiline,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Region$heading(3),
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Border$rounded(5)
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
								onChange: $author$project$Pages$Newsroom$TitleChanged(item.id),
								placeholder: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Title')
												])))),
								spellcheck: true,
								text: A2($elm$core$Maybe$withDefault, '', item.editTitle)
							}),
							A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(20)
								]),
							_List_fromArray(
								[
									function () {
									var _v4 = item.editPosttime;
									if (_v4.$ === 'Just') {
										var picker = _v4.a;
										return date(picker);
									} else {
										return $mdgriffith$elm_ui$Element$none;
									}
								}(),
									save,
									cancel,
									_delete
								])),
							A2(
							$mdgriffith$elm_ui$Element$Input$multiline,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$light,
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Border$rounded(5),
									$mdgriffith$elm_ui$Element$height(
									A2($mdgriffith$elm_ui$Element$minimum, 150, $mdgriffith$elm_ui$Element$shrink))
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
								onChange: $author$project$Pages$Newsroom$ContentChanged(item.id),
								placeholder: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('What do you want to talk about today?')
												])))),
								spellcheck: true,
								text: A2($elm$core$Maybe$withDefault, '', item.editContent)
							})
						]));
			}();
			var content = function () {
				var share = A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.13)),
									A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.53))
										]))
								]),
							$mdgriffith$elm_ui$Element$text('Share')),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Newsroom$CopyText(
								'https://gci-global.com/newsroom?' + $elm$core$String$fromInt(item.id)))
					});
				var edit = A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
									A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
										])),
									$mdgriffith$elm_ui$Element$Border$rounded(5)
								]),
							$mdgriffith$elm_ui$Element$text('Edit')),
						onPress: $elm$core$Maybe$Just(
							$author$project$Pages$Newsroom$Edit(item.id))
					});
				var date = A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.13))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							$author$project$Pages$Newsroom$prettyDate(
								A2(
									$elm$core$String$split,
									'-',
									A2(
										$elm$core$Maybe$withDefault,
										'',
										$elm$core$List$head(
											A2($elm$core$String$split, 'T', item.posttime))))))
						]));
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Region$heading(3),
									$mdgriffith$elm_ui$Element$Font$extraLight,
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(item.title)
								])),
							function () {
							var _v3 = model.localShared.user;
							if (_v3.$ === 'Just') {
								return A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(20)
										]),
									_List_fromArray(
										[date, share, edit]));
							} else {
								return A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[date, share]));
							}
						}(),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
									$mdgriffith$elm_ui$Element$Font$light
								]),
							$elm$core$List$concat(
								A2(
									$elm$core$List$intersperse,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil))
										]),
									A2(
										$elm$core$List$map,
										function (t) {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text(t)
												]);
										},
										A2($elm$core$String$split, '\n', item.content)))))
						]));
			}();
			return A3(
				$author$project$Shared$acol,
				A2(
					$author$project$Pages$Newsroom$shouldAnimate,
					$elm$core$String$fromInt(item.id),
					model) ? A3(
					$author$project$Simple$Animation$fromTo,
					{duration: 500, options: _List_Nil},
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(0),
							$author$project$Simple$Animation$Property$y(100)
						]),
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(100),
							$author$project$Simple$Animation$Property$y(0)
						])) : $author$project$Simple$Animation$empty,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id(
							$elm$core$String$fromInt(item.id))),
						$mdgriffith$elm_ui$Element$transparent(
						!A2(
							$author$project$Pages$Newsroom$shouldAnimate,
							$elm$core$String$fromInt(item.id),
							model))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						function () {
							var _v2 = item.state;
							if (_v2.$ === 'Editing') {
								return _List_fromArray(
									[editImg, editContent]);
							} else {
								return _List_fromArray(
									[img, content]);
							}
						}())
					]));
		};
		var posts = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(postWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			A2(
				$elm$core$List$map,
				function (postList) {
					return A2(
						$mdgriffith$elm_ui$Element$column,
						postList.show ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(100),
								$mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 100, left: 0, right: 0, top: 0})
							]) : _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(0)),
								$mdgriffith$elm_ui$Element$clip
							]),
						A2(
							$elm$core$List$map,
							function (p) {
								return post(p);
							},
							postList.posts));
				},
				model.posts));
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Newsroom$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Newsroom$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none),
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Pages$Newsroom$copyalert, device, model.alertCopy)),
					$mdgriffith$elm_ui$Element$inFront(
					function () {
						var _v0 = model.confirmDelete;
						if (_v0.$ === 'Just') {
							var id = _v0.a;
							return A2($author$project$Pages$Newsroom$deleteConfirm, model, id);
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					}()),
					$mdgriffith$elm_ui$Element$clip
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$maximum,
									A2($elm$core$Basics$min, w, $author$project$Palette$maxWidth),
									$mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(25)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$maximum,
											$elm$core$Basics$round($author$project$Palette$maxWidth * 0.5),
											$mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(50)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(50))
											]),
										$mdgriffith$elm_ui$Element$none),
										function () {
										var _v1 = model.localShared.user;
										if (_v1.$ === 'Nothing') {
											return A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Region$heading(1),
														$mdgriffith$elm_ui$Element$Font$extraLight,
														$mdgriffith$elm_ui$Element$Font$extraLight,
														A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
														$mdgriffith$elm_ui$Element$centerX
													]),
												$mdgriffith$elm_ui$Element$text('Newsroom'));
										} else {
											return A2(
												$mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing(20),
														$mdgriffith$elm_ui$Element$centerX
													]),
												A2(
													$elm$core$List$any,
													function (p) {
														return _Utils_eq(p.id, -1) || _Utils_eq(p.state, $author$project$Pages$Newsroom$Editing);
													},
													A3(
														$elm$core$List$foldl,
														F2(
															function (a, b) {
																return _Utils_ap(b, a.posts);
															}),
														_List_Nil,
														model.posts)) ? _List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Region$heading(1),
																$mdgriffith$elm_ui$Element$Font$extraLight,
																$mdgriffith$elm_ui$Element$Font$extraLight,
																A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
																$mdgriffith$elm_ui$Element$centerX
															]),
														$mdgriffith$elm_ui$Element$text('Newsroom'))
													]) : _List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Region$heading(1),
																$mdgriffith$elm_ui$Element$Font$extraLight,
																$mdgriffith$elm_ui$Element$Font$extraLight,
																A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
																$mdgriffith$elm_ui$Element$centerX
															]),
														$mdgriffith$elm_ui$Element$text('Newsroom')),
														A2(
														$mdgriffith$elm_ui$Element$Input$button,
														_List_Nil,
														{
															label: A2(
																$mdgriffith$elm_ui$Element$el,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
																		$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
																		A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
																		$mdgriffith$elm_ui$Element$mouseOver(
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
																			])),
																		$mdgriffith$elm_ui$Element$Border$rounded(5)
																	]),
																$mdgriffith$elm_ui$Element$text('New')),
															onPress: $elm$core$Maybe$Just($author$project$Pages$Newsroom$New)
														})
													]));
										}
									}(),
										posts,
										loadingSpinner
									]))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Newsroom$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Newsroom$page = F2(
	function (shared, req) {
		var linkedPost = A2($elm$core$Maybe$andThen, $elm$core$String$toInt, req.url.query);
		return $author$project$Page$advanced(
			{
				init: A2($author$project$Pages$Newsroom$init, shared, linkedPost),
				subscriptions: $author$project$Pages$Newsroom$subscriptions,
				update: A2($author$project$Pages$Newsroom$update, shared, linkedPost),
				view: $author$project$Pages$Newsroom$view(shared)
			});
	});
var $author$project$Pages$NotFound$init = function (shared) {
	return _Utils_Tuple2(
		{
			localShared: $author$project$Shared$reset(shared)
		},
		$author$project$Effect$none);
};
var $author$project$Pages$NotFound$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$NotFound$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Pages$NotFound$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$NotFound$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$NotFound$WindowResized)
			]));
};
var $author$project$Pages$NotFound$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$NotFound$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$none);
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$NotFound$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			default:
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
		}
	});
var $author$project$Pages$NotFound$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$NotFound$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$NotFound$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$NotFound$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none),
					$mdgriffith$elm_ui$Element$clip
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$maximum,
									A2($elm$core$Basics$min, w, $author$project$Palette$maxWidth),
									$mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(25),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(
									$elm$core$Basics$round(0.66 * h)))
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Region$heading(1),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$extraLight,
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$extraLight,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
											]),
										$mdgriffith$elm_ui$Element$text('Page Not Found!')),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$center
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Maybe this link was to our old website?')
											])),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(50))
											]),
										$mdgriffith$elm_ui$Element$none),
										A2(
										$mdgriffith$elm_ui$Element$link,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
												$mdgriffith$elm_ui$Element$Border$rounded(100),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$padding(30),
												$mdgriffith$elm_ui$Element$width(
												A2($mdgriffith$elm_ui$Element$maximum, w, $mdgriffith$elm_ui$Element$fill)),
												$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
												$mdgriffith$elm_ui$Element$Font$center,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlueLight)
													]))
											]),
										{
											label: $mdgriffith$elm_ui$Element$text('Return to Home'),
											url: '/'
										})
									]))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$NotFound$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$NotFound$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$NotFound$init(shared),
				subscriptions: $author$project$Pages$NotFound$subscriptions,
				update: $author$project$Pages$NotFound$update(shared),
				view: $author$project$Pages$NotFound$view(shared)
			});
	});
var $author$project$Pages$Obsolescence$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Obsolescence$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Obsolescence$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Obsolescence$SubText = F5(
	function (id, title, image, description, text) {
		return {description: description, id: id, image: image, text: text, title: title};
	});
var $author$project$Pages$Obsolescence$init = function (shared) {
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'1',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(20),
							false)),
						_Utils_Tuple2(
						'2',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'3',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			localShared: $author$project$Shared$reset(shared),
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Obsolescence$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Obsolescence$OpenVimeo)),
					A5($author$project$Pages$Obsolescence$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Obsolescence$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Obsolescence$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Obsolescence$OpenContactUs)),
					A5($author$project$Pages$Obsolescence$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			subTexts: _List_fromArray(
				[
					A5($author$project$Pages$Obsolescence$SubText, 1, 'GCI is a solutions provider.', '/img/Power_Monitor_A1A1A5.jpg', 'GCI CCA solution for Power Monitor, Maverick Missile Test Box', 'GCI designs, develops and manufactures form, fit, and function drop-in replacement electronics that can be seamlessly integrated into a larger electronics system as required. The replacement electronic components work identically to the original obsolete components.'),
					A5($author$project$Pages$Obsolescence$SubText, 2, 'Supporting Legacy Systems.', '/img/black_circuit.jpg', '', 'GCI’s engineering team has decades of experience designing electronics. Our proprietary and proven technologies provide the building blocks to engineer custom electronic solutions based upon the customer needs and requirements.\nThese drop-in replacement solutions for obsolete CCAs and microcircuits improve DoD system readiness, solving the DMSMS issues associated with lifecycle sustainment.'),
					A5($author$project$Pages$Obsolescence$SubText, 3, 'Combating Counterfeits.', '/img/fpga.jpg', 'XILINX XC4013 FPGA Open Cavity', 'GCI only uses components from authorized, franchised distributors with full traceability. This removes any possibility of counterfeit parts entering the supply chain with GCI’s solutions. Memories and FPGAs, particularly the obsolete families, are some of the commonly identified counterfeits for military customers as reported through GIDEP.\nGCI’s strict adherence to franchised suppliers eliminates this risk.')
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Obsolescence$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Obsolescence$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Pages$Obsolescence$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Obsolescence$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Obsolescence$WindowResized)
			]));
};
var $author$project$Pages$Obsolescence$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Obsolescence$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Obsolescence$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Obsolescence$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Obsolescence$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Obsolescence$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Obsolescence$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Obsolescence$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Obsolescence$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						A2(
							$elm$core$List$map,
							$author$project$Pages$Obsolescence$animationTrackerToCmd,
							A2(
								$elm$core$List$filter,
								function (_v1) {
									var v = _v1.b;
									return !v.shouldAnimate;
								},
								$elm$core$Dict$toList(model.animationTracker)))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Obsolescence$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			default:
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
		}
	});
var $author$project$Pages$Obsolescence$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Obsolescence$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Obsolescence$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Obsolescence$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Obsolescence$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Obsolescence$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Obsolescence$head = F2(
	function (shared, model) {
		var w = shared.width;
		var simpleBtns = model.simpleBtnHoverTracker;
		var h = shared.height;
		var scaleByHeight = _Utils_cmp((w / h) | 0, (16 / 9) | 0) < 1;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var playBtn = function (item) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$transparent(model.showVimeo)
					]),
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$rounded(1000),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								item.hovered ? 300 : 120)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(120)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Border$shadow(
							{
								blur: 20,
								color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.7),
								offset: _Utils_Tuple2(0, 0),
								size: 1
							}),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class('backgroundStretch')),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Obsolescence$SimpleBtnHover(0)),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							$author$project$Pages$Obsolescence$SimpleBtnUnHover(0))
						]),
					item.hovered ? _List_fromArray(
						[
							A3(
							$author$project$Shared$ael,
							A3(
								$author$project$Simple$Animation$fromTo,
								{duration: 300, options: _List_Nil},
								_List_fromArray(
									[
										$author$project$Simple$Animation$Property$opacity(0),
										$author$project$Simple$Animation$Property$x(10)
									]),
								_List_fromArray(
									[
										$author$project$Simple$Animation$Property$opacity(100),
										$author$project$Simple$Animation$Property$x(0)
									])),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$padding(10)
								]),
							$mdgriffith$elm_ui$Element$text('Play')),
							A3(
							$author$project$Shared$ael,
							A3(
								$author$project$Simple$Animation$fromTo,
								{duration: 300, options: _List_Nil},
								_List_fromArray(
									[
										$author$project$Simple$Animation$Property$x(-100)
									]),
								_List_fromArray(
									[
										$author$project$Simple$Animation$Property$x(0)
									])),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$family(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$typeface('icons')
										])),
									$mdgriffith$elm_ui$Element$centerX
								]),
							$mdgriffith$elm_ui$Element$text('\uE801'))
						]) : _List_fromArray(
						[
							A3(
							$author$project$Shared$ael,
							A3(
								$author$project$Simple$Animation$fromTo,
								{duration: 300, options: _List_Nil},
								_List_fromArray(
									[
										$author$project$Simple$Animation$Property$x(50)
									]),
								_List_fromArray(
									[
										$author$project$Simple$Animation$Property$x(0)
									])),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$family(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$typeface('icons')
										])),
									$mdgriffith$elm_ui$Element$centerX
								]),
							$mdgriffith$elm_ui$Element$text('\uE801'))
						])));
		};
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.25))
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$padding(
								isPhone ? 3 : $elm$core$Basics$floor(
									A2($elm$core$Basics$min, 150, w * 0.1)))
							]),
						A2(
							$elm$core$List$intersperse,
							$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('We Solve'),
									$mdgriffith$elm_ui$Element$text('Electronic'),
									$mdgriffith$elm_ui$Element$text('Obsolescence.')
								])))),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
						A2(
							$elm$core$List$map,
							playBtn,
							A2(
								$elm$core$List$filter,
								function (a) {
									return !a.id;
								},
								simpleBtns))))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							scaleByHeight ? $mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(h)) : $mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(w))
						]),
					{description: 'Click or tap to play Global circuit innovation\'s company video', src: '/img/bourbon_street_video.jpg'}),
				onPress: $elm$core$Maybe$Just($author$project$Pages$Obsolescence$OpenVimeo)
			});
	});
var $author$project$Pages$Obsolescence$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('mainText')),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Obsolescence is a big deal.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Electronics obsolescence is common in sectors such as Defense, where equipment has long lead times and needs to be supported for many decades. It is not unusual that 70–80% of the electronic components are obsolete before the system has been deployed.')
						]))
				]));
	});
var $author$project$Pages$Obsolescence$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Obsolescence$CloseVimeo = {$: 'CloseVimeo'};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $author$project$Pages$Obsolescence$vimeo = function (shared) {
	var w = shared.width;
	var h = shared.height;
	var device = shared.device._class;
	var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
	var videoWidth = function () {
		var scale = isPhone ? 0.95 : 0.75;
		return (_Utils_cmp(
			h,
			$elm$core$Basics$round((9 * (w * scale)) / 16)) > 0) ? $elm$core$Basics$floor(w * scale) : $elm$core$Basics$round((16 * (h * 0.9)) / 9);
	}();
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$elm$html$Html$Attributes$class('point_enter_down_long')),
				$mdgriffith$elm_ui$Element$behindContent(
				A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Background$gradient(
									{
										angle: $elm$core$Basics$degrees(165),
										steps: _List_fromArray(
											[
												A4($mdgriffith$elm_ui$Element$rgba255, 87, 83, 78, 0.7),
												A4($mdgriffith$elm_ui$Element$rgba255, 17, 24, 39, 0.9)
											])
									}),
									$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Obsolescence$CloseVimeo)
								]),
							$mdgriffith$elm_ui$Element$none),
						url: '/obsolescence#mainText'
					}))
			]),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(videoWidth)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 20,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5),
						offset: _Utils_Tuple2(0, 0),
						size: 1
					})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						]),
					$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'padding', '56.25% 0 0 0'),
									A2($elm$html$Html$Attributes$style, 'position', 'relative')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$iframe,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
											A2($elm$html$Html$Attributes$style, 'top', '0'),
											A2($elm$html$Html$Attributes$style, 'left', '0'),
											A2($elm$html$Html$Attributes$style, 'width', '100%'),
											A2($elm$html$Html$Attributes$style, 'height', '100%'),
											A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
											A2($elm$html$Html$Attributes$attribute, 'allow', 'autoplay; fullscreen; picture-in-picture'),
											A2(
											$elm$html$Html$Attributes$property,
											'allowfullscreen',
											$elm$json$Json$Encode$bool(true)),
											$elm$html$Html$Attributes$src('https://player.vimeo.com/video/322836491?autoplay=1&color=1d376c&title=0&byline=0&portrait=0')
										]),
									_List_Nil)
								]))))
				])));
};
var $author$project$Pages$Obsolescence$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var subtext = function (item) {
			var img = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$rounded(10),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Border$innerShadow(
									{
										blur: 18,
										color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
										offset: _Utils_Tuple2(1, 8),
										size: 8
									})
								]),
							$mdgriffith$elm_ui$Element$none))
					]),
				(item.description === '') ? A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{description: item.title, src: item.image}) : A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$padding(10),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.85))
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(item.description)
									])))
						]),
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						{description: item.title, src: item.image})));
			var content = A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
						$mdgriffith$elm_ui$Element$Font$light
					]),
				$elm$core$List$concat(
					A2(
						$elm$core$List$intersperse,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil))
							]),
						A2(
							$elm$core$List$map,
							function (t) {
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(t)
									]);
							},
							A2($elm$core$String$split, '\n', item.text)))));
			return A3(
				$author$project$Shared$acol,
				A2(
					$author$project$Pages$Obsolescence$shouldAnimate,
					$elm$core$String$fromInt(item.id),
					model) ? A3(
					$author$project$Simple$Animation$fromTo,
					{duration: 500, options: _List_Nil},
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(0),
							$author$project$Simple$Animation$Property$y(100)
						]),
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(100),
							$author$project$Simple$Animation$Property$y(0)
						])) : $author$project$Simple$Animation$empty,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id(
							$elm$core$String$fromInt(item.id))),
						$mdgriffith$elm_ui$Element$transparent(
						!A2(
							$author$project$Pages$Obsolescence$shouldAnimate,
							$elm$core$String$fromInt(item.id),
							model))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Region$heading(3),
								$mdgriffith$elm_ui$Element$Font$extraLight,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(item.title)
							])),
						A2(
						isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						((!A2($elm$core$Basics$modBy, 2, item.id)) || isMobile) ? _List_fromArray(
							[img, content]) : _List_fromArray(
							[content, img]))
					]));
		};
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Obsolescence$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Obsolescence$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none),
					$mdgriffith$elm_ui$Element$inFront(
					model.showVimeo ? $author$project$Pages$Obsolescence$vimeo(shared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Obsolescence$head, shared, model),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$maximum,
											$elm$core$Basics$round($author$project$Palette$maxWidth * 0.7),
											$mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(100)
									]),
								A2(
									$elm$core$List$cons,
									A2(
										$author$project$Pages$Obsolescence$mainText,
										shared,
										A2($author$project$Pages$Obsolescence$shouldAnimate, 'mainText', model)),
									A2($elm$core$List$map, subtext, model.subTexts))),
								A3(
								$author$project$Pages$Obsolescence$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Obsolescence$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Obsolescence$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Obsolescence$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Obsolescence$init(shared),
				subscriptions: $author$project$Pages$Obsolescence$subscriptions,
				update: $author$project$Pages$Obsolescence$update(shared),
				view: $author$project$Pages$Obsolescence$view(shared)
			});
	});
var $author$project$Pages$Oil$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Oil$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Oil$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Oil$SubText = F5(
	function (id, title, image, description, text) {
		return {description: description, id: id, image: image, text: text, title: title};
	});
var $author$project$Pages$Oil$init = function (shared) {
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'1',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(20),
							false)),
						_Utils_Tuple2(
						'2',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'3',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			localShared: $author$project$Shared$reset(shared),
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Oil$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Oil$OpenVimeo)),
					A5($author$project$Pages$Oil$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Oil$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Oil$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Oil$OpenContactUs)),
					A5($author$project$Pages$Oil$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			subTexts: _List_fromArray(
				[
					A5($author$project$Pages$Oil$SubText, 1, 'Oil and Gas Downhole Drilling.', '/img/oil1.jpg', '', 'GCI has provided over 150,000 production microcircuits to the oil and gas industry that have been in use worldwide for more than decade.\nGCI’s solutions extend the lifetime of standard microcircuits operating at +250°C  by more than 10,000x.'),
					A5($author$project$Pages$Oil$SubText, 2, 'Department of Defense.', '/img/b52.jpg', '', 'The oil and gas industry has been purchasing production microcircuits using GCI’s process with excellent results demonstrating dramatically increased component lifetimes at elevated temperatures. GCI leverages this proven technology to DOD applications that expose microcircuits to harsh environments.\nNot only is the high-temperature reliability dramatically increased, but the new hermetic ceramic package protects the microcircuit from a variety of elements and environments ( e.g., corrosives and moisture ). These microcircuits successfully pass MIL‑STD‑883 qualification testing requirements.'),
					A5($author$project$Pages$Oil$SubText, 3, 'Hermetic Packaging.', '/img/subtext1.jpg', '', 'GCI has developed a manufacturable, cost effective solution to extract die from any plastic package and subsequently repackage that die into an identical ceramic footprint, with the ability to maintain a high integrity connectivity to the device.\nThis is a high-value added solution to provide high-temperature integrated circuits for a large spectrum of requirements: low-volume, quick-turn evaluation of integrated circuit prototyping as well as medium to high-volume production needs.')
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Oil$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Oil$subscriptions = function (model) {
	return $author$project$Ports$recvScroll($author$project$Pages$Oil$Scrolled);
};
var $author$project$Pages$Oil$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Oil$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Oil$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Oil$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Oil$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Oil$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Oil$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Oil$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Oil$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						A2(
							$elm$core$List$map,
							$author$project$Pages$Oil$animationTrackerToCmd,
							A2(
								$elm$core$List$filter,
								function (_v1) {
									var v = _v1.b;
									return !v.shouldAnimate;
								},
								$elm$core$Dict$toList(model.animationTracker)))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Oil$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			default:
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
		}
	});
var $author$project$Pages$Oil$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Oil$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Oil$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Oil$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Oil$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Oil$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Oil$head = F2(
	function (shared, model) {
		var w = shared.width;
		var simpleBtns = model.simpleBtnHoverTracker;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.25))
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$padding(
								isPhone ? 3 : $elm$core$Basics$floor(
									A2($elm$core$Basics$min, 150, w * 0.1)))
							]),
						A2(
							$elm$core$List$intersperse,
							$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Bring'),
									$mdgriffith$elm_ui$Element$text('The'),
									$mdgriffith$elm_ui$Element$text('Heat.')
								]))))
				]),
			{description: 'Picture of an Oil rig', src: '/img/oil_head.jpg'});
	});
var $author$project$Pages$Oil$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('High Reliability Electronics for Harsh & Extreme Environments.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('mainText'))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('GCI’s technologies have been proven in the oil and gas industry providing microcircuits with high durability to harsh environmental conditions, which include extreme heat exposure (+250°C) as well as high mechanical stresses (30,000g).')
						]))
				]));
	});
var $author$project$Pages$Oil$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Oil$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var subtext = function (item) {
			var img = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$rounded(10),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Border$innerShadow(
									{
										blur: 18,
										color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
										offset: _Utils_Tuple2(1, 8),
										size: 8
									})
								]),
							$mdgriffith$elm_ui$Element$none))
					]),
				(item.description === '') ? A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{description: item.title, src: item.image}) : A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$padding(10),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.85))
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(item.description)
									])))
						]),
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						{description: item.title, src: item.image})));
			var content = A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
						$mdgriffith$elm_ui$Element$Font$light
					]),
				$elm$core$List$concat(
					A2(
						$elm$core$List$intersperse,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil))
							]),
						A2(
							$elm$core$List$map,
							function (t) {
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(t)
									]);
							},
							A2($elm$core$String$split, '\n', item.text)))));
			return A3(
				$author$project$Shared$acol,
				A2(
					$author$project$Pages$Oil$shouldAnimate,
					$elm$core$String$fromInt(item.id),
					model) ? A3(
					$author$project$Simple$Animation$fromTo,
					{duration: 500, options: _List_Nil},
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(0),
							$author$project$Simple$Animation$Property$y(100)
						]),
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(100),
							$author$project$Simple$Animation$Property$y(0)
						])) : $author$project$Simple$Animation$empty,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id(
							$elm$core$String$fromInt(item.id))),
						$mdgriffith$elm_ui$Element$transparent(
						!A2(
							$author$project$Pages$Oil$shouldAnimate,
							$elm$core$String$fromInt(item.id),
							model))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Region$heading(3),
								$mdgriffith$elm_ui$Element$Font$extraLight,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(item.title)
							])),
						A2(
						isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						((!A2($elm$core$Basics$modBy, 2, item.id)) || isMobile) ? _List_fromArray(
							[img, content]) : _List_fromArray(
							[content, img]))
					]));
		};
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Oil$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Oil$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Oil$head, shared, model),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$maximum,
											$elm$core$Basics$round($author$project$Palette$maxWidth * 0.7),
											$mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(100)
									]),
								A2(
									$elm$core$List$cons,
									A2(
										$author$project$Pages$Oil$mainText,
										shared,
										A2($author$project$Pages$Oil$shouldAnimate, 'mainText', model)),
									A2($elm$core$List$map, subtext, model.subTexts))),
								A3(
								$author$project$Pages$Oil$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Oil$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Oil$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Oil$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Oil$init(shared),
				subscriptions: $author$project$Pages$Oil$subscriptions,
				update: $author$project$Pages$Oil$update(shared),
				view: $author$project$Pages$Oil$view(shared)
			});
	});
var $author$project$Pages$Papers$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Papers$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Papers$Paper = F7(
	function (id, active, link, author, date, summary, image) {
		return {active: active, author: author, date: date, id: id, image: image, link: link, summary: summary};
	});
var $author$project$Pages$Papers$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Papers$init = function (shared) {
	var device = shared.device._class;
	var isMobile = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'papers',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(
								isMobile ? 5 : 10),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			hideAirlock: false,
			localShared: $author$project$Shared$reset(shared),
			papers: _List_fromArray(
				[
					A7($author$project$Pages$Papers$Paper, 0, false, '/download/Integrated_Circuit_(IC)_Die_Extraction_And_Reassembly.pdf', 'Erick Spory', '2020', '', '/img/Air_Force_Research_Laboratory.jpg'),
					A7($author$project$Pages$Papers$Paper, 1, false, '/download/LRU,_CCA,_&_IC_Microcircuit_Obsolescence_Solutions_without_System_Redesign.pdf', 'Erick Spory', '2018', '', '/img/DMSMS2018.jpg'),
					A7($author$project$Pages$Papers$Paper, 2, false, '/download/Successful_FPGA_Obsolescence_Form,_Fit,_and_Function_Solution_Using_a_MCM_and_DER_to_Implement_Original_Logic_Design.pdf', 'Erick Spory', '2018', '', '/img/imaps.jpg'),
					A7($author$project$Pages$Papers$Paper, 3, false, '/download/Die_Extraction_And_Reassembly_Process.pdf', 'Erick Spory', '2017', '', '/img/AFLCMC.jpg'),
					A7($author$project$Pages$Papers$Paper, 4, false, '/download/A_How-To_Guide_on_Addressing_and_Resolving_IC_Obsolescence.pdf', 'Charlie Beebout', '2017', '', '/img/DMSMS2017.jpg'),
					A7($author$project$Pages$Papers$Paper, 5, false, '/download/NSWC_Crane_&_GCI:_A_DMSMS_Case_Study.pdf', 'Erick Spory', '2016', '', '/img/navsea.jpg'),
					A7($author$project$Pages$Papers$Paper, 6, false, '/download/Increased_High-Temperature_Reliability_and_Package_Hardening_of_Commercial_Integrated_Circuits.pdf', 'Erick Spory', '2015', '', '/img/imaps.jpg'),
					A7($author$project$Pages$Papers$Paper, 7, false, '/download/Increasing_High-Temperature_Reliability_of_Plastic_ICs_Using_DEER.pdf', 'Erick Spory', '2015', '', '/img/smta.jpg'),
					A7($author$project$Pages$Papers$Paper, 8, false, '/download/Frequently_Asked_Questions.pdf', '', '', 'FAQ', '/img/logo.jpg')
				]),
			papersPerRow: 3,
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Papers$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Papers$OpenVimeo)),
					A5($author$project$Pages$Papers$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Papers$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Papers$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Papers$OpenContactUs)),
					A5($author$project$Pages$Papers$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Papers$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Papers$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Pages$Papers$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Papers$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Papers$WindowResized)
			]));
};
var $author$project$Pages$Papers$HideAirlock = function (a) {
	return {$: 'HideAirlock', a: a};
};
var $author$project$Pages$Papers$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Papers$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Papers$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Papers$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Papers$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Papers$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Papers$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Papers$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Papers$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Papers$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'GotElement':
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						_Utils_ap(
							A2(
								$elm$core$List$map,
								$author$project$Pages$Papers$animationTrackerToCmd,
								A2(
									$elm$core$List$filter,
									function (_v2) {
										var v = _v2.b;
										return !v.shouldAnimate;
									},
									$elm$core$Dict$toList(model.animationTracker))),
							(A2($author$project$Pages$Papers$shouldAnimate, 'papers', model) && (!model.hideAirlock)) ? _List_fromArray(
								[
									$author$project$Effect$fromCmd(
									A2(
										$elm$core$Task$perform,
										$author$project$Pages$Papers$HideAirlock,
										$elm$core$Process$sleep(1000)))
								]) : _List_fromArray(
								[$author$project$Effect$none]))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Papers$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			case 'PaperActive':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							papers: A2(
								$elm$core$List$map,
								function (p) {
									return _Utils_eq(p.id, id) ? _Utils_update(
										p,
										{active: true}) : _Utils_update(
										p,
										{active: false});
								},
								model.papers)
						}),
					$author$project$Effect$none);
			case 'PaperDeactive':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							papers: A2(
								$elm$core$List$map,
								function (p) {
									return _Utils_update(
										p,
										{active: false});
								},
								model.papers)
						}),
					$author$project$Effect$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{hideAirlock: true}),
					$author$project$Effect$none);
		}
	});
var $author$project$Pages$Papers$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Papers$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Papers$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Papers$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Papers$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Papers$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Papers$head = F2(
	function (shared, model) {
		var w = shared.width;
		var simpleBtns = model.simpleBtnHoverTracker;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.25))
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$padding(
								isPhone ? 3 : $elm$core$Basics$floor(
									A2($elm$core$Basics$min, 150, w * 0.1)))
							]),
						A2(
							$elm$core$List$intersperse,
							$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Technical'),
									$mdgriffith$elm_ui$Element$text('Papers and'),
									$mdgriffith$elm_ui$Element$text('Presentations.')
								]))))
				]),
			{description: 'Picture of GCI\'s head quarters', src: '/img/papers.jpg'});
	});
var $author$project$Pages$Papers$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('GCI Engages with the Technical Community.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('mainText')),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('GCI regularly presents at technical conferences and routinely publishes technical papers.')
						]))
				]));
	});
var $author$project$Pages$Papers$PaperActive = function (a) {
	return {$: 'PaperActive', a: a};
};
var $author$project$Pages$Papers$PaperDeactive = function (a) {
	return {$: 'PaperDeactive', a: a};
};
var $mdgriffith$elm_ui$Element$downloadAs = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var filename = _v0.filename;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$download(filename)),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Pages$Papers$papers = F3(
	function (shared, model, animateSelf) {
		var zoom = animateSelf ? A2(
			$author$project$Simple$Animation$steps,
			{
				options: _List_fromArray(
					[$author$project$Simple$Animation$easeInOutQuad]),
				startAt: _List_fromArray(
					[
						A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
					])
			},
			_List_fromArray(
				[
					A2(
					$author$project$Simple$Animation$step,
					1000,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						])),
					A2(
					$author$project$Simple$Animation$step,
					500,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 1, 1)
						]))
				])) : A2(
			$author$project$Simple$Animation$steps,
			{
				options: _List_fromArray(
					[$author$project$Simple$Animation$easeInOutQuad]),
				startAt: _List_fromArray(
					[
						A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
					])
			},
			_List_fromArray(
				[
					A2(
					$author$project$Simple$Animation$step,
					10,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						])),
					A2(
					$author$project$Simple$Animation$step,
					10,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						]))
				]));
		var w = shared.width;
		var shadowSettings = animateSelf ? {
			blur: 10,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
			offset: _Utils_Tuple2(-5, 5),
			size: 5
		} : {
			blur: 0,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
			offset: _Utils_Tuple2(0, 0),
			size: 0
		};
		var papersPerRow = model.papersPerRow;
		var name = function (s) {
			return A3(
				$elm$core$String$replace,
				'_',
				' ',
				A3($elm$core$String$replace, '/download/', '', s));
		};
		var hideAirlock = model.hideAirlock;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var cardWidth = 300;
		var cardSpacing = 50;
		var cardHeight = 500;
		var paper = function (p) {
			return A3(
				$author$project$Shared$ael,
				zoom,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(cardWidth)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(cardHeight)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$Papers$PaperActive(p.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Papers$PaperActive(p.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							$author$project$Pages$Papers$PaperDeactive(p.id)),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('animateTransform')),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(
										$elm$core$Basics$round(cardHeight * (1.0 / 2.0))))
								]),
							{
								description: A2(
									$elm$core$Maybe$withDefault,
									name(p.link),
									$elm$core$List$head(
										A2(
											$elm$core$String$split,
											'.',
											name(p.link)))),
								src: p.image
							}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(
											$elm$core$Basics$round(cardHeight * (1.0 / 2.0)))),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 3,
											color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
											offset: _Utils_Tuple2(0, 0),
											size: 1
										})
									]),
								p.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$spacing(20),
										$mdgriffith$elm_ui$Element$padding(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$Font$center
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(
												A2(
													$elm$core$Maybe$withDefault,
													name(p.link),
													$elm$core$List$head(
														A2(
															$elm$core$String$split,
															'.',
															name(p.link)))))
											])),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
											]),
										$mdgriffith$elm_ui$Element$text(p.date))
									]))),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(cardHeight)),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
									]),
								p.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
											$mdgriffith$elm_ui$Element$padding(20),
											$mdgriffith$elm_ui$Element$Font$center,
											$mdgriffith$elm_ui$Element$centerY
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$center,
													A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
													$mdgriffith$elm_ui$Element$Font$light
												]),
											$mdgriffith$elm_ui$Element$text(p.summary)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$elm$core$String$isEmpty(p.author) ? $mdgriffith$elm_ui$Element$none : A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Author : ' + p.author)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$elm$core$String$isEmpty(p.date) ? $mdgriffith$elm_ui$Element$none : A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Published on: ' + p.date)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil)),
											$mdgriffith$elm_ui$Element$html(
											A2($elm$html$Html$br, _List_Nil, _List_Nil))
										])),
									A2(
									$mdgriffith$elm_ui$Element$downloadAs,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlueLight)
												])),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$Font$bold
										]),
									{
										filename: name(p.link),
										label: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Download')),
										url: p.link
									})
								]))
						])));
		};
		var airlock2 = A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 3000, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(-w)
				]));
		var airlock = A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 3000, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(w)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('circuit_board')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('papers')),
					$mdgriffith$elm_ui$Element$spacing(50),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$inFront(
					hideAirlock ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('ignore_pointer'))
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Shared$ael,
								animateSelf ? airlock2 : $author$project$Simple$Animation$empty,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(shadowSettings)
									]),
								$mdgriffith$elm_ui$Element$none),
								A3(
								$author$project$Shared$ael,
								animateSelf ? airlock : $author$project$Simple$Animation$empty,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(shadowSettings)
									]),
								$mdgriffith$elm_ui$Element$none)
							]))),
					$mdgriffith$elm_ui$Element$Border$innerShadow(
					{
						blur: 10,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
						offset: _Utils_Tuple2(-5, 5),
						size: 5
					})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					A3(
						$author$project$Shared$acol,
						zoom,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(3),
								isPhone ? A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20) : $mdgriffith$elm_ui$Element$padding(55),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
									]),
								$mdgriffith$elm_ui$Element$text('Global Circuit Innovations')),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$extraLight,
										$mdgriffith$elm_ui$Element$Font$letterSpacing(5),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Technical Papers')
									]))
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								A2(
									$elm$core$Basics$min,
									$elm$core$Basics$round(w * 0.8),
									(papersPerRow * cardWidth) + (papersPerRow * cardSpacing)))),
							$mdgriffith$elm_ui$Element$centerX
						]),
					A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(cardSpacing)
							]),
						A2($elm$core$List$map, paper, model.papers)))
				]));
	});
var $author$project$Pages$Papers$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Papers$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Papers$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Papers$head, shared, model),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(50)
									]),
								_List_fromArray(
									[
										A2(
										$author$project$Pages$Papers$mainText,
										shared,
										A2($author$project$Pages$Papers$shouldAnimate, 'mainText', model))
									])),
								A3(
								$author$project$Pages$Papers$papers,
								shared,
								model,
								A2($author$project$Pages$Papers$shouldAnimate, 'papers', model)),
								A3(
								$author$project$Pages$Papers$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Papers$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Papers$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Papers$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Papers$init(shared),
				subscriptions: $author$project$Pages$Papers$subscriptions,
				update: $author$project$Pages$Papers$update(shared),
				view: $author$project$Pages$Papers$view(shared)
			});
	});
var $author$project$Pages$Rnd$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Rnd$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Rnd$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Rnd$SubText = F5(
	function (id, title, image, description, text) {
		return {description: description, id: id, image: image, text: text, title: title};
	});
var $author$project$Pages$Rnd$init = function (shared) {
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'1',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(20),
							false)),
						_Utils_Tuple2(
						'2',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'3',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			localShared: $author$project$Shared$reset(shared),
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Rnd$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Rnd$OpenVimeo)),
					A5($author$project$Pages$Rnd$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Rnd$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Rnd$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Rnd$OpenContactUs)),
					A5($author$project$Pages$Rnd$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			subTexts: _List_fromArray(
				[
					A5($author$project$Pages$Rnd$SubText, 1, 'Thermal 3D modeling with Ansys Software.', '/img/ansys.jpg', 'Ansys Temperature Modeling and Electrical Confirmation of Die Surface Temperature with Silicon PN Sensors', 'GCI uses Ansys software to generate simulations of prototypical architectures to inform design choices related to material selection, component geometry, and fluid flow. These simulations are verified through subsequent prototype fabrication and testing.'),
					A5($author$project$Pages$Rnd$SubText, 2, 'Thermal Heat Transfer Simulation.', '/img/ansys2.jpg', 'Rendering for IC Package Fins within Immersion Cooler', 'Silicon chips generate heat in sub-optimal locations within an integrated circuit package. GCI’s current research aims to enhance omni-direction heat transfer by creating a “highway” from heat-producing locations to the exterior of the package by augmenting the inner cavity of a typical package with highly thermally conductive diamond epoxy.\nFor high-powered devices, the enhanced package can be oriented within a single-phase immersion cooler for further improved heat transfer characteristics. Initial simulations show promise for high power density chip arrays.'),
					A5($author$project$Pages$Rnd$SubText, 3, '', '/img/ansys3.jpg', '', 'Thermal modeling of fins for power IC cooling requirements.')
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Rnd$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Rnd$subscriptions = function (model) {
	return $author$project$Ports$recvScroll($author$project$Pages$Rnd$Scrolled);
};
var $author$project$Pages$Rnd$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Rnd$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Rnd$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Rnd$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Rnd$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Rnd$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Rnd$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Rnd$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Rnd$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						A2(
							$elm$core$List$map,
							$author$project$Pages$Rnd$animationTrackerToCmd,
							A2(
								$elm$core$List$filter,
								function (_v1) {
									var v = _v1.b;
									return !v.shouldAnimate;
								},
								$elm$core$Dict$toList(model.animationTracker)))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Rnd$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			default:
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
		}
	});
var $author$project$Pages$Rnd$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Rnd$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Rnd$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Rnd$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Rnd$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Rnd$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Rnd$head = F2(
	function (shared, model) {
		var w = shared.width;
		var simpleBtns = model.simpleBtnHoverTracker;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.25))
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$padding(
								isPhone ? 3 : $elm$core$Basics$floor(
									A2($elm$core$Basics$min, 150, w * 0.1)))
							]),
						A2(
							$elm$core$List$intersperse,
							$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(''),
									$mdgriffith$elm_ui$Element$text('Innovative'),
									$mdgriffith$elm_ui$Element$text('Modernization.')
								]))))
				]),
			{description: '', src: '/img/math.jpg'});
	});
var $author$project$Pages$Rnd$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Advanced Thermal Management Systems.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('mainText'))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Current Immersion coolers are not compatible with standard electronic component packaging of ICs and CCAs. Long-term exposure of electronics to commonly used coolants, such as mineral oil, or water inevitably leads to damaged components. Non-reactive engineering fluids are available for a premium cost but do not have optimal heat transfer characteristics. Large data centers have begun implementing engineering fluids in both single-phase and two-phased immersion cooling for server racks, demonstrating a practical application of immersion cooling. GCI’s flexibility in both IC packaging material and form-factor allows for hermetically sealed, corrosion-resistant, high-reliability components that do not react with mineral oil or water. This unique capability allows GCI to pursue immersion cooling on a scale that is compatible with SWaP-C requirements.')
						]))
				]));
	});
var $author$project$Pages$Rnd$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Rnd$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var subtext = function (item) {
			var img = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$rounded(10),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Border$innerShadow(
									{
										blur: 18,
										color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
										offset: _Utils_Tuple2(1, 8),
										size: 8
									})
								]),
							$mdgriffith$elm_ui$Element$none))
					]),
				(item.description === '') ? A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{description: item.title, src: item.image}) : A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$Font$light,
										$mdgriffith$elm_ui$Element$padding(10),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.85))
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(item.description)
									])))
						]),
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						{description: item.title, src: item.image})));
			var content = A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
						$mdgriffith$elm_ui$Element$Font$light
					]),
				$elm$core$List$concat(
					A2(
						$elm$core$List$intersperse,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
								$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil))
							]),
						A2(
							$elm$core$List$map,
							function (t) {
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(t)
									]);
							},
							A2($elm$core$String$split, '\n', item.text)))));
			return A3(
				$author$project$Shared$acol,
				A2(
					$author$project$Pages$Rnd$shouldAnimate,
					$elm$core$String$fromInt(item.id),
					model) ? A3(
					$author$project$Simple$Animation$fromTo,
					{duration: 500, options: _List_Nil},
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(0),
							$author$project$Simple$Animation$Property$y(100)
						]),
					_List_fromArray(
						[
							$author$project$Simple$Animation$Property$opacity(100),
							$author$project$Simple$Animation$Property$y(0)
						])) : $author$project$Simple$Animation$empty,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$elm$html$Html$Attributes$id(
							$elm$core$String$fromInt(item.id))),
						$mdgriffith$elm_ui$Element$transparent(
						!A2(
							$author$project$Pages$Rnd$shouldAnimate,
							$elm$core$String$fromInt(item.id),
							model))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Region$heading(3),
								$mdgriffith$elm_ui$Element$Font$extraLight,
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(item.title)
							])),
						A2(
						isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						((!A2($elm$core$Basics$modBy, 2, item.id)) || isMobile) ? _List_fromArray(
							[img, content]) : _List_fromArray(
							[content, img]))
					]));
		};
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Rnd$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Rnd$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Rnd$head, shared, model),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$maximum,
											$elm$core$Basics$round($author$project$Palette$maxWidth * 0.7),
											$mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(100)
									]),
								A2(
									$elm$core$List$cons,
									A2(
										$author$project$Pages$Rnd$mainText,
										shared,
										A2($author$project$Pages$Rnd$shouldAnimate, 'mainText', model)),
									A2($elm$core$List$map, subtext, model.subTexts))),
								A3(
								$author$project$Pages$Rnd$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Rnd$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Rnd$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Rnd$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Rnd$init(shared),
				subscriptions: $author$project$Pages$Rnd$subscriptions,
				update: $author$project$Pages$Rnd$update(shared),
				view: $author$project$Pages$Rnd$view(shared)
			});
	});
var $author$project$Pages$Terms$GotTerms = function (a) {
	return {$: 'GotTerms', a: a};
};
var $author$project$Pages$Terms$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Terms$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{body: $elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Pages$Terms$init = function (shared) {
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			legal: '',
			localShared: $author$project$Shared$reset(shared),
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5($author$project$Pages$Terms$SimpleBtn, 0, 'ignored', '/', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Terms$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Terms$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Terms$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Terms$OpenContactUs)),
					A5($author$project$Pages$Terms$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				])
		},
		$author$project$Effect$fromCmd(
			$elm$http$Http$get(
				{
					expect: $elm$http$Http$expectString($author$project$Pages$Terms$GotTerms),
					url: '/misc/terms.txt'
				})));
};
var $author$project$Pages$Terms$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Terms$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Pages$Terms$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Terms$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Terms$WindowResized)
			]));
};
var $author$project$Pages$Terms$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Terms$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Terms$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Terms$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Terms$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Terms$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Terms$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						A2(
							$elm$core$List$map,
							$author$project$Pages$Terms$animationTrackerToCmd,
							A2(
								$elm$core$List$filter,
								function (_v1) {
									var v = _v1.b;
									return !v.shouldAnimate;
								},
								$elm$core$Dict$toList(model.animationTracker)))));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Terms$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Terms$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Terms$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			case 'GotTerms':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var legal = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{legal: legal}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{legal: 'Failed to load Terms. Please try reloading the page.'}),
						$author$project$Effect$none);
				}
			default:
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
		}
	});
var $author$project$Pages$Terms$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Terms$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Terms$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Terms$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Terms$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Terms$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(false),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $mdgriffith$elm_ui$Element$Font$justify = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textJustify);
var $mdgriffith$elm_ui$Internal$Model$Serif = {$: 'Serif'};
var $mdgriffith$elm_ui$Element$Font$serif = $mdgriffith$elm_ui$Internal$Model$Serif;
var $author$project$Pages$Terms$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Terms$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Terms$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Terms$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none),
					$mdgriffith$elm_ui$Element$clip
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$maximum,
									A2($elm$core$Basics$min, w, $author$project$Palette$maxWidth),
									$mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(25)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Region$heading(1),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(
											A2(
												$elm$core$Basics$min,
												800,
												$elm$core$Basics$round(w * 0.8))))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(100))
											]),
										$mdgriffith$elm_ui$Element$none),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$extraLight,
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$extraLight,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg),
												$mdgriffith$elm_ui$Element$padding(10),
												$mdgriffith$elm_ui$Element$Font$center
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Terms and Conditions')
											])),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$Font$family(
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$serif])),
												$mdgriffith$elm_ui$Element$Font$justify
											]),
										$elm$core$List$concat(
											A2(
												$elm$core$List$intersperse,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil)),
														$mdgriffith$elm_ui$Element$html(
														A2($elm$html$Html$br, _List_Nil, _List_Nil))
													]),
												A2(
													$elm$core$List$map,
													function (t) {
														return _List_fromArray(
															[
																$mdgriffith$elm_ui$Element$text(t)
															]);
													},
													A2($elm$core$String$split, '\n', model.legal)))))
									])),
								A3(
								$author$project$Pages$Terms$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Terms$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Terms$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Terms$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Terms$init(shared),
				subscriptions: $author$project$Pages$Terms$subscriptions,
				update: $author$project$Pages$Terms$update(shared),
				view: $author$project$Pages$Terms$view(shared)
			});
	});
var $author$project$Pages$Whoweare$Leadership = F8(
	function (id, active, name, job, email, phone, image, story) {
		return {active: active, email: email, id: id, image: image, job: job, name: name, phone: phone, story: story};
	});
var $author$project$Pages$Whoweare$OpenContactUs = {$: 'OpenContactUs'};
var $author$project$Pages$Whoweare$OpenVimeo = {$: 'OpenVimeo'};
var $author$project$Pages$Whoweare$SimpleBtn = F5(
	function (id, name, link, hovered, message) {
		return {hovered: hovered, id: id, link: link, message: message, name: name};
	});
var $author$project$Pages$Whoweare$Value = F3(
	function (active, title, detailed) {
		return {active: active, detailed: detailed, title: title};
	});
var $author$project$Pages$Whoweare$init = function (shared) {
	var device = shared.device._class;
	var isMobile = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
	return _Utils_Tuple2(
		{
			animationTracker: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'mainText',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false)),
						_Utils_Tuple2(
						'leadership',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(
								isMobile ? 5 : 10),
							false)),
						_Utils_Tuple2(
						'core',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(50),
							false)),
						_Utils_Tuple2(
						'bottomButtons',
						A2(
							$author$project$Pages$Home_$AnimationState,
							$author$project$Pages$Home_$PercentOfViewport(40),
							false))
					])),
			hideAirlock: false,
			leadersPerRow: 3,
			leadership: _List_fromArray(
				[
					A8($author$project$Pages$Whoweare$Leadership, 0, false, 'Erick Spory', 'CEO and CTO', 'erick.spory@gci-global.com', '(719) 573 - 6777 x104', '/img/erick.webp', 'Erick M. Spory spent 22 years at Atmel Corporation in Colorado Springs, CO, ultimately becoming a Senior Principle Failure Analysis Engineer. During his time at Atmel he worked closely with process, design, device, and packaging engineers to resolve yield issues.\nHe is currently the President and CTO of Global Circuit Innovations, which he co-founded in 2006. Mr. Spory holds 15 patents and has 4 other patents pending. These involve Environmentally Hardened Integrated Circuits, Methods for Printing Integrated Circuit Bond Connections, Repackaged Integrated Circuit and Assembly Methods, Extracted Die and Reassembly and Counterfeit Mitigation.\nMr. Spory has published numerous papers for a variety of publications, including the International Symposium for Testing and Failure Analysis and International Microelectronics Packaging and Assembly Society (IMAPS). He has presented at over twelve conferences including the Component Obsolescence Group (COG), International Microelectronics Assembly & Packaging (IMAPS) Components for Military and Space Electronics, Surface Mount Technology Association SMTA) Electronics in Harsh Environments, Afnor Obsolescence Organization, and multiple times at the Diminishing Manufacturing Supply and Material Shortages (DMSMS).\nMr. Spory has a B.S. in Materials Science Engineering with a Chemical Engineering Minor from Cornell University. Mr. Spory also has a M.S. in Electrical Engineering with a Microelectronics emphasis from the University of Colorado, Colorado Springs (UCCS) and is a current Candidate for a Ph.D. in Electrical Engineering from the University of Colorado.'),
					A8($author$project$Pages$Whoweare$Leadership, 1, false, 'Jeff Murphy', 'VP Operations', 'jeff.murphy@gci-global.com', '(719) 573 - 6777 x103', '/img/jeff.webp', 'For over 25 years Mr. Murphy has led high performing manufacturing organizations. From 1991 through 2008, he held various manufacturing management roles in the semiconductor industry working for Cypress Semiconductor and Atmel Corporation.\nPrior to co-founding GCI, Mr. Murphy led the manufacturing organization for Atmel in Colorado Springs, which was one of the highest volume and lowest cost semiconductor fabrication plants in the United States. His teams have advanced company financial metrics through improved yields, cost reduction/avoidance efforts, and productivity growth utilizing Lean methods. He places significant value on a collaborative approach with customers that ensures expectations are surpassed on a consistent basis.\nMr. Murphy received his BBA in Finance and Management from the University of Texas at Austin and holds an MBA from Colorado Christian University.'),
					A8($author$project$Pages$Whoweare$Leadership, 2, false, 'Dustin Morgan', 'Business Development', 'dustin .morgan@gci-global.com', '(719) 573 - 6777 x107', '/img/dustin.webp', 'Dustin Morgan joined GCI in 2016 as the Director of Marketing. Ms. Morgan has over 20 years of experience in both marketing and program management. She previously worked for Central Bancorp in Colorado Springs where she was tasked with the design, creation, and management of a new business venture, Johnny Martin\'s Car Central. Ms. Morgan served as the Executive Director in this role. Ms. Morgan currently manages DoD contract programs and is Director of Marketing and Business Development.\nMs. Morgan holds a B.A. in Communications from the University of Colorado, Boulder and a M.A. in International Development from the Josef Korbel School of International Studies at the University of Denver.'),
					A8($author$project$Pages$Whoweare$Leadership, 3, false, 'Tim Barry', 'Director of Engineering', 'tim.barry@gci-global.com', '(719) 573 - 6777 x101', '/img/tim.webp', 'Tim Barry began his career in Colorado Springs at Honeywell as a semiconductor manufacturing process engineer. Subsequently, he worked at Atmel Corp for 19 years in a variety of technical roles including Yield Staff engineer, Sustaining Process and Equipment engineering manager, and Process Engineering manager for a new facility start-up. Mr. Barry’s Wafer Fabrication Engineering Management responsibilities included overseeing a department containing over 100 technical personnel in a diversified product and technology fabrication facility.\nLater he became the Manufacturing Operations and Integration Engineering Manager for Abound Solar in Longmont Colorado. There, he directed an operations team consisting of 13 engineers refining and implementing processes and equipment necessary to support a CdTe PV manufacturing facility.\nCurrently, Mr. Barry is the Director of Engineering at Global Circuit Innovations. In his role he develops systems and structure for an emerging company engaged in specialty application semiconductors and engineering services. He provides technical consulting and hands on engineering for key clients in order to solve custom integrated circuit challenges.\nMr. Barry received his Bachelor of Science in Chemical Engineering at Arizona State University, and his Masters in Business Administration (MBA) from the University of Phoenix.'),
					A8($author$project$Pages$Whoweare$Leadership, 4, false, 'Brian Mena', 'Vice President of Finance', 'brian.mena@gci-global.com', '(719) 573 - 6777 x102', '/img/brian.jpg', 'Mr. Mena has over 20+ years of corporate strategic financial experience. He is a results oriented financial professional with a specialty in the development and design of strategic financial planning that supports decision management, critical financial transformation, performance improvement activities, analytics, reporting, and internal control. This entails providing hands-on vision development for end-to-end support, from strategy to execution, that delivers the improvements needed to transform the business to the next level of financial management.\nMr. Mena has worked in various business environments from start-up ventures to distress industries whereby he has directly managed business lines over $1.5B in revenues.\nMr. Mena graduated from the University of Colorado (Boulder & Denver) earning a bachelors and dual masters, M.B.A. & and Masters of Finance.'),
					A8($author$project$Pages$Whoweare$Leadership, 5, false, 'Charlie Beebout', 'Program Manager', 'charlie.beebout@gci-global.com', '(719) 573 - 6777 x110', '/img/charlie.webp', 'Mr. Beebout was Director of Engineering at Atmel Corporation for 17 years managing ASICs, FPGAs, EEPROMs, EPROMs, SRAMs, Digital Imaging, Wireless Communication and Cryptographic Security products. In this capacity, he had extensive achievements in integrated circuit management positions designing, debugging and manufacturing thousands of IC products for diverse Department of Defense (DoD) applications including satellites, missiles, and aircraft. His expertise also extended to other industrial and consumer utilizations.\nMr. Beebout currently serves as Program Manager for Global Circuit Innovations and focuses primarily on Circuit Card Assembly and integrated circuit obsolescence solutions as well as environmental hardening of COTS devices for the DoD.\nMr. Beebout has presented at Diminishing Manufacturing Sources and Material Shortages (DMSMS), Air Worthiness and Sustainment (AA&S), and the International Microelectronics Packaging and Assembly Society (IMAPS) technical conferences.\nMr. Beebout currently has a patent application pending entitled “Environmental Hardening to Extend Operating Lifetimes of Integrated Circuits at Elevated Temperatures” with the USPTO.\nMr. Beebout received his BSEE degree from Iowa State University.'),
					A8($author$project$Pages$Whoweare$Leadership, 7, false, 'Patrick Jenkins', 'Program Manager', 'patrick.jenkins@gci-global.com', '(719) 573 - 6777 x111', '/img/patrick.webp', 'Mr. Jenkins managed technical and operations departments at Intel, Inmos, Atmel, Vitesse, OrganicID, dpiX, and Unipixel over a career of more than 30 years. He has been involved in the development and high-volume manufacturing of ICs in numerous technologies (Microprocessor, DRAM, SRAM, non-volatile/programmable memory, GaAs digital logic) as well as printed ICs, glass flat-panel, and flexible plastic (roll-to-roll) electronics.\nMr. Jenkins currently serves as a Program Manager for Global Circuit Innovations (GCI) and focuses primarily on integrated circuit obsolescence solutions for the DoD. The particular emphasis is on solutions for obsolete FPGA/CPLD integrated circuits.\nMr. Jenkins has one patent issued. US Patent 7858513 issued 2010 “Fabrication of Self-aligned via Holes in Polymer Thin Films”.\nMr. Jenkins received his BSChE degree from Caltech.')
				]),
			localShared: $author$project$Shared$reset(shared),
			showVimeo: false,
			simpleBtnHoverTracker: _List_fromArray(
				[
					A5(
					$author$project$Pages$Whoweare$SimpleBtn,
					0,
					'Play',
					'#',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Whoweare$OpenVimeo)),
					A5($author$project$Pages$Whoweare$SimpleBtn, 1, 'Intellectual Property', '/ip', false, $elm$core$Maybe$Nothing),
					A5($author$project$Pages$Whoweare$SimpleBtn, 2, 'What We Do', '/#whatwedo', false, $elm$core$Maybe$Nothing),
					A5(
					$author$project$Pages$Whoweare$SimpleBtn,
					3,
					'Contact Us',
					'',
					false,
					$elm$core$Maybe$Just($author$project$Pages$Whoweare$OpenContactUs)),
					A5($author$project$Pages$Whoweare$SimpleBtn, 4, 'Technical Papers', '/papers', false, $elm$core$Maybe$Nothing)
				]),
			values: _List_fromArray(
				[
					A3($author$project$Pages$Whoweare$Value, false, 'Performance', 'Executional excellence in electronics solutions is our foundation.'),
					A3($author$project$Pages$Whoweare$Value, false, 'Passion', 'Passion is at the heart of our company. We continue to advance, innovate, and improve.'),
					A3($author$project$Pages$Whoweare$Value, false, 'Integrity', 'We are honest, transparent, ethical, and fair. Customers trust us to adhere to our word.'),
					A3($author$project$Pages$Whoweare$Value, false, 'Diversity', 'It takes people with different ideas, strengths, interests, and cultural backgrounds to make our company succeed.'),
					A3($author$project$Pages$Whoweare$Value, false, 'Accountability', 'We measure ourselves against the highest standards of integrity and fiscal responsibility.')
				])
		},
		$author$project$Effect$none);
};
var $author$project$Pages$Whoweare$Scrolled = function (a) {
	return {$: 'Scrolled', a: a};
};
var $author$project$Pages$Whoweare$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $author$project$Pages$Whoweare$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$recvScroll($author$project$Pages$Whoweare$Scrolled),
				$elm$browser$Browser$Events$onResize($author$project$Pages$Whoweare$WindowResized)
			]));
};
var $author$project$Pages$Whoweare$HideAirlock = function (a) {
	return {$: 'HideAirlock', a: a};
};
var $author$project$Pages$Whoweare$Submited = function (a) {
	return {$: 'Submited', a: a};
};
var $author$project$Pages$Whoweare$GotElement = F2(
	function (a, b) {
		return {$: 'GotElement', a: a, b: b};
	});
var $author$project$Pages$Whoweare$animationTrackerToCmd = function (_v0) {
	var k = _v0.a;
	return $author$project$Effect$fromCmd(
		A2(
			$elm$core$Task$attempt,
			$author$project$Pages$Whoweare$GotElement(k),
			$elm$browser$Browser$Dom$getElement(k)));
};
var $author$project$Pages$Whoweare$setHovered = F3(
	function (id, i, data) {
		return _Utils_eq(id, i) ? _Utils_update(
			data,
			{hovered: true}) : _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Whoweare$setUnHovered = F3(
	function (_v0, _v1, data) {
		return _Utils_update(
			data,
			{hovered: false});
	});
var $author$project$Pages$Whoweare$shouldAnimate = F2(
	function (id, model) {
		var _v0 = A2($elm$core$Dict$get, id, model.animationTracker);
		if (_v0.$ === 'Just') {
			var state = _v0.a;
			return state.shouldAnimate;
		} else {
			return false;
		}
	});
var $author$project$Pages$Whoweare$update = F3(
	function (shared, msg, model) {
		switch (msg.$) {
			case 'OpenVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: true}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(true)));
			case 'CloseVimeo':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showVimeo: false}),
					$author$project$Effect$fromCmd(
						$author$project$Ports$disableScrolling(false)));
			case 'SimpleBtnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Whoweare$setHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'SimpleBtnUnHover':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							simpleBtnHoverTracker: A2(
								$elm$core$List$indexedMap,
								$author$project$Pages$Whoweare$setUnHovered(id),
								model.simpleBtnHoverTracker)
						}),
					$author$project$Effect$none);
			case 'GotElement':
				var id = msg.a;
				var element = msg.b;
				if (element.$ === 'Ok') {
					var e = element.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								animationTracker: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										A2($author$project$Pages$Home_$updateElement, id, e),
										$elm$core$Dict$toList(model.animationTracker)))
							}),
						$author$project$Effect$none);
				} else {
					return _Utils_Tuple2(model, $author$project$Effect$none);
				}
			case 'Scrolled':
				var distance = msg.a;
				var modifyNavbarDisplay = function (state) {
					return function (l) {
						return _Utils_update(
							l,
							{
								navbarDisplay: state,
								scrolledDistance: distance,
								showMobileNav: _Utils_eq(state, $author$project$Storage$Hide) ? false : l.showMobileNav
							});
					}(model.localShared);
				};
				return _Utils_Tuple2(
					($elm$core$Basics$abs(distance - model.localShared.scrolledDistance) > 3) ? (((_Utils_cmp(distance, model.localShared.scrolledDistance) > 0) && (distance > 300)) ? _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Hide)
						}) : _Utils_update(
						model,
						{
							localShared: modifyNavbarDisplay($author$project$Storage$Enter)
						})) : model,
					$author$project$Effect$batch(
						_Utils_ap(
							A2(
								$elm$core$List$map,
								$author$project$Pages$Whoweare$animationTrackerToCmd,
								A2(
									$elm$core$List$filter,
									function (_v2) {
										var v = _v2.b;
										return !v.shouldAnimate;
									},
									$elm$core$Dict$toList(model.animationTracker))),
							(A2($author$project$Pages$Whoweare$shouldAnimate, 'leadership', model) && (!model.hideAirlock)) ? _List_fromArray(
								[
									$author$project$Effect$fromCmd(
									A2(
										$elm$core$Task$perform,
										$author$project$Pages$Whoweare$HideAirlock,
										$elm$core$Process$sleep(1000)))
								]) : _List_fromArray(
								[$author$project$Effect$none]))));
			case 'ModifyLocalShared':
				var newSharedState = msg.a;
				var nullable = function (a) {
					if (a.$ === 'Nothing') {
						return $elm$json$Json$Encode$null;
					} else {
						var str = a.a;
						return $elm$json$Json$Encode$string(str);
					}
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					(!_Utils_eq(newSharedState.contactDialogState, model.localShared.contactDialogState)) ? $author$project$Effect$batch(
						_Utils_eq(newSharedState.contactDialogState.send, $author$project$Storage$Send) ? _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState))),
								$author$project$Effect$fromCmd(
								$elm$http$Http$post(
									{
										body: $elm$http$Http$jsonBody(
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(newSharedState.contactDialogState.name)),
														_Utils_Tuple2(
														'email',
														nullable(newSharedState.contactDialogState.email)),
														_Utils_Tuple2(
														'telephone',
														nullable(newSharedState.contactDialogState.phone)),
														_Utils_Tuple2(
														'message',
														nullable(newSharedState.contactDialogState.message))
													]))),
										expect: A2(
											$elm$http$Http$expectJson,
											$author$project$Pages$Whoweare$Submited,
											A3(
												$elm$json$Json$Decode$map2,
												$author$project$Shared$FormResponse,
												A2($elm$json$Json$Decode$field, 'next', $elm$json$Json$Decode$string),
												A2($elm$json$Json$Decode$field, 'ok', $elm$json$Json$Decode$bool))),
										url: 'https://formspree.io/f/xdoygpvp'
									}))
							]) : _List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])) : $author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(newSharedState)));
			case 'Submited':
				var response = msg.a;
				var newSharedState = function (local) {
					return _Utils_update(
						local,
						{
							contactDialogState: function (state) {
								return _Utils_update(
									state,
									{
										send: function () {
											if (response.$ === 'Ok') {
												return $author$project$Storage$SendOk;
											} else {
												return $author$project$Storage$SendError;
											}
										}()
									});
							}(local.contactDialogState)
						});
				}(model.localShared);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localShared: newSharedState}),
					$author$project$Effect$batch(
						_List_fromArray(
							[
								$author$project$Effect$fromShared(
								$author$project$Shared$UpdateModel(newSharedState)),
								$author$project$Effect$fromCmd(
								$author$project$Ports$save(
									$author$project$Storage$toJson(newSharedState.contactDialogState)))
							])));
			case 'OpenContactUs':
				var withOpen = function (state) {
					return _Utils_update(
						state,
						{
							contactDialogState: function (c) {
								return _Utils_update(
									c,
									{showContactUs: true});
							}(state.contactDialogState)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: withOpen(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							withOpen(model.localShared))));
			case 'WindowResized':
				var w = msg.a;
				var h = msg.b;
				var newModel = function (share) {
					return _Utils_update(
						share,
						{
							device: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: h, width: w}),
							height: h,
							width: w
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localShared: newModel(model.localShared)
						}),
					$author$project$Effect$fromShared(
						$author$project$Shared$UpdateModel(
							newModel(model.localShared))));
			case 'LeaderActive':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							leadership: A2(
								$elm$core$List$map,
								function (l) {
									return _Utils_eq(l.id, id) ? _Utils_update(
										l,
										{active: true}) : _Utils_update(
										l,
										{active: false});
								},
								model.leadership)
						}),
					$author$project$Effect$none);
			case 'LeaderDeactive':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							leadership: A2(
								$elm$core$List$map,
								function (l) {
									return _Utils_update(
										l,
										{active: false});
								},
								model.leadership)
						}),
					$author$project$Effect$none);
			case 'ValueActive':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							values: A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, v) {
										return _Utils_eq(i, id) ? _Utils_update(
											v,
											{active: true}) : _Utils_update(
											v,
											{active: false});
									}),
								model.values)
						}),
					$author$project$Effect$none);
			case 'ValueDeactive':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							values: A2(
								$elm$core$List$map,
								function (v) {
									return _Utils_update(
										v,
										{active: false});
								},
								model.values)
						}),
					$author$project$Effect$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{hideAirlock: true}),
					$author$project$Effect$none);
		}
	});
var $author$project$Pages$Whoweare$ModifyLocalShared = function (a) {
	return {$: 'ModifyLocalShared', a: a};
};
var $author$project$Pages$Whoweare$SimpleBtnHover = function (a) {
	return {$: 'SimpleBtnHover', a: a};
};
var $author$project$Pages$Whoweare$SimpleBtnUnHover = function (a) {
	return {$: 'SimpleBtnUnHover', a: a};
};
var $author$project$Pages$Whoweare$bottomButtons = F3(
	function (shared, btns, animateSelf) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		var btn = function (item) {
			var attr = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Border$width(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('background_transition')),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Palette$gciBlue),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									item.hovered ? 'point_enter_down' : 'point_leave_up')),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 22, 10),
								A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
								isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer
							]),
						$mdgriffith$elm_ui$Element$text(item.name))),
					$mdgriffith$elm_ui$Element$Events$onMouseEnter(
					$author$project$Pages$Whoweare$SimpleBtnHover(item.id)),
					$mdgriffith$elm_ui$Element$Events$onMouseLeave(
					$author$project$Pages$Whoweare$SimpleBtnUnHover(item.id)),
					isMobile ? $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('gciBtn'))
				]);
			var _v0 = item.message;
			if (_v0.$ === 'Just') {
				var m = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Events$onClick(m),
						attr),
					$mdgriffith$elm_ui$Element$text(item.name));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							attr,
							$mdgriffith$elm_ui$Element$text(item.name)),
						url: item.link
					});
			}
		};
		return A3(
			$author$project$Shared$acol,
			animateSelf ? A3(
				$author$project$Simple$Animation$fromTo,
				{duration: 500, options: _List_Nil},
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(0),
						$author$project$Simple$Animation$Property$y(100)
					]),
				_List_fromArray(
					[
						$author$project$Simple$Animation$Property$opacity(100),
						$author$project$Simple$Animation$Property$y(0)
					])) : $author$project$Simple$Animation$empty,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('bottomButtons'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$heading(4),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$extraLight
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Want to know more about us?')
						])),
					A2(
					isMobile ? $mdgriffith$elm_ui$Element$column : $mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, btn, btns))
				]));
	});
var $author$project$Pages$Whoweare$ValueActive = function (a) {
	return {$: 'ValueActive', a: a};
};
var $author$project$Pages$Whoweare$ValueDeactive = function (a) {
	return {$: 'ValueDeactive', a: a};
};
var $author$project$Pages$Whoweare$core = F3(
	function (shared, values, animateSelf) {
		var device = shared.device._class;
		var value = F2(
			function (i, item) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$minimum, 250, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(250)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba255, 29, 55, 108, 1.0 - ((i + 1) * 0.1))),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$Whoweare$ValueActive(i)),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Whoweare$ValueActive(i)),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							$author$project$Pages$Whoweare$ValueDeactive(i))
						]),
					A2(
						$mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('animateTransform')),
									A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
								]),
							item.active ? _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$moveUp(250)
								]) : _List_Nil),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(250))
									]),
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
									$mdgriffith$elm_ui$Element$text(item.title))),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(250))
									]),
								A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(250)),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$Font$center
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(item.detailed)
										])))
							])));
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$transparent(!animateSelf),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class(
						animateSelf ? 'point_enter_left_long' : 'point_idle')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('core'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$padding(20),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Region$heading(2),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue),
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white)
						]),
					$mdgriffith$elm_ui$Element$text('Our Core Values')),
					A2(
					$mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white)
						]),
					A2($elm$core$List$indexedMap, value, values))
				]));
	});
var $author$project$Pages$Whoweare$head = F2(
	function (shared, model) {
		var w = shared.width;
		var simpleBtns = model.simpleBtnHoverTracker;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.25))
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								A2($author$project$Palette$fontSize, device, $author$project$Palette$XXlg),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Palette$white),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$padding(
								isPhone ? 3 : $elm$core$Basics$floor(
									A2($elm$core$Basics$min, 150, w * 0.1)))
							]),
						A2(
							$elm$core$List$intersperse,
							$mdgriffith$elm_ui$Element$html(
								A2($elm$html$Html$br, _List_Nil, _List_Nil)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Global'),
									$mdgriffith$elm_ui$Element$text('Circuit'),
									$mdgriffith$elm_ui$Element$text('Innovations')
								]))))
				]),
			{description: 'Picture of GCI\'s head quarters', src: '/img/building.jpg'});
	});
var $author$project$Pages$Whoweare$LeaderActive = function (a) {
	return {$: 'LeaderActive', a: a};
};
var $author$project$Pages$Whoweare$LeaderDeactive = function (a) {
	return {$: 'LeaderDeactive', a: a};
};
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.italic);
var $author$project$Pages$Whoweare$leadership = F3(
	function (shared, model, animateSelf) {
		var zoom = animateSelf ? A2(
			$author$project$Simple$Animation$steps,
			{
				options: _List_fromArray(
					[$author$project$Simple$Animation$easeInOutQuad]),
				startAt: _List_fromArray(
					[
						A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
					])
			},
			_List_fromArray(
				[
					A2(
					$author$project$Simple$Animation$step,
					1000,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						])),
					A2(
					$author$project$Simple$Animation$step,
					500,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 1, 1)
						]))
				])) : A2(
			$author$project$Simple$Animation$steps,
			{
				options: _List_fromArray(
					[$author$project$Simple$Animation$easeInOutQuad]),
				startAt: _List_fromArray(
					[
						A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
					])
			},
			_List_fromArray(
				[
					A2(
					$author$project$Simple$Animation$step,
					10,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						])),
					A2(
					$author$project$Simple$Animation$step,
					10,
					_List_fromArray(
						[
							A2($author$project$Simple$Animation$Property$scaleXY, 0.9, 0.9)
						]))
				]));
		var w = shared.width;
		var shadowSettings = animateSelf ? {
			blur: 10,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
			offset: _Utils_Tuple2(-5, 5),
			size: 5
		} : {
			blur: 0,
			color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
			offset: _Utils_Tuple2(0, 0),
			size: 0
		};
		var nullLeader = function (id) {
			return A8($author$project$Pages$Whoweare$Leadership, id, false, '', '', '', '', '', '');
		};
		var leadersPerRow = model.leadersPerRow;
		var leaders = model.leadership;
		var hideAirlock = model.hideAirlock;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var cardWidth = 300;
		var cardSpacing = 50;
		var cardHeight = 500;
		var leader = function (l) {
			return A3(
				$author$project$Shared$ael,
				zoom,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(cardWidth)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(cardHeight)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$Whoweare$LeaderActive(l.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Whoweare$LeaderActive(l.id)),
							$mdgriffith$elm_ui$Element$Events$onMouseLeave(
							$author$project$Pages$Whoweare$LeaderDeactive(l.id)),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class('animateTransform')),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(
										$elm$core$Basics$round(cardHeight * (2.0 / 3.0))))
								]),
							{description: l.name, src: l.image}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(
											$elm$core$Basics$round(cardHeight * (1.0 / 3.0)))),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 3,
											color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
											offset: _Utils_Tuple2(0, 0),
											size: 1
										})
									]),
								l.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$spacing(20)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Md),
												$mdgriffith$elm_ui$Element$Font$light
											]),
										$mdgriffith$elm_ui$Element$text(l.name)),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$centerX,
												A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
											]),
										$mdgriffith$elm_ui$Element$text(l.job))
									]))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										$elm$html$Html$Attributes$class('animateTransform')),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(cardHeight)),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
									]),
								l.active ? _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveUp(cardHeight)
									]) : _List_Nil),
							A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$alignLeft,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$padding(20),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(cardHeight)),
										$mdgriffith$elm_ui$Element$scrollbarY
									]),
								$elm$core$List$concat(
									A2(
										$elm$core$List$intersperse,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$html(
												A2($elm$html$Html$br, _List_Nil, _List_Nil)),
												$mdgriffith$elm_ui$Element$html(
												A2($elm$html$Html$br, _List_Nil, _List_Nil))
											]),
										$elm$core$List$reverse(
											A2(
												$elm$core$List$indexedMap,
												F2(
													function (i, t) {
														return (!i) ? _List_fromArray(
															[
																A2(
																$mdgriffith$elm_ui$Element$el,
																_List_fromArray(
																	[$mdgriffith$elm_ui$Element$Font$italic]),
																$mdgriffith$elm_ui$Element$text(t))
															]) : _List_fromArray(
															[
																$mdgriffith$elm_ui$Element$text(t)
															]);
													}),
												$elm$core$List$reverse(
													A2($elm$core$String$split, '\n', l.story))))))))
						])));
		};
		var airlock2 = A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 3000, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(-w)
				]));
		var airlock = A3(
			$author$project$Simple$Animation$fromTo,
			{duration: 3000, options: _List_Nil},
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(0)
				]),
			_List_fromArray(
				[
					$author$project$Simple$Animation$Property$x(w)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$class('circuit_board')),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('leadership')),
					$mdgriffith$elm_ui$Element$spacing(50),
					$mdgriffith$elm_ui$Element$padding(50),
					$mdgriffith$elm_ui$Element$inFront(
					hideAirlock ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('ignore_pointer'))
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Shared$ael,
								animateSelf ? airlock2 : $author$project$Simple$Animation$empty,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(shadowSettings)
									]),
								$mdgriffith$elm_ui$Element$none),
								A3(
								$author$project$Shared$ael,
								animateSelf ? airlock : $author$project$Simple$Animation$empty,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white),
										$mdgriffith$elm_ui$Element$Border$shadow(shadowSettings)
									]),
								$mdgriffith$elm_ui$Element$none)
							]))),
					$mdgriffith$elm_ui$Element$Border$innerShadow(
					{
						blur: 10,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.3),
						offset: _Utils_Tuple2(-5, 5),
						size: 5
					})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$class(
								animateSelf ? 'animate_float' : ''))
						]),
					A3(
						$author$project$Shared$acol,
						zoom,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(3),
								isPhone ? A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20) : $mdgriffith$elm_ui$Element$padding(55),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xsm),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 0.3))
									]),
								$mdgriffith$elm_ui$Element$text('Global Circuit Innovations')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$extraLight,
										$mdgriffith$elm_ui$Element$Font$letterSpacing(5),
										$mdgriffith$elm_ui$Element$Font$center,
										$mdgriffith$elm_ui$Element$centerX,
										A2($author$project$Palette$fontSize, device, $author$project$Palette$Xlg)
									]),
								$mdgriffith$elm_ui$Element$text('Leadership'))
							]))),
					(A2(
					$elm$core$Basics$modBy,
					(A2(
						$elm$core$Basics$min,
						$elm$core$Basics$round(w * 0.8),
						(leadersPerRow * cardWidth) + (leadersPerRow * cardSpacing)) / cardWidth) | 0,
					$elm$core$List$length(leaders)) === 1) ? A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(cardSpacing),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								A2(
									$elm$core$Basics$min,
									$elm$core$Basics$round(w * 0.8),
									(leadersPerRow * cardWidth) + (leadersPerRow * cardSpacing)))),
							$mdgriffith$elm_ui$Element$centerX
						]),
					_List_fromArray(
						[
							leader(
							A2(
								$elm$core$Maybe$withDefault,
								nullLeader(0),
								$elm$core$List$head(leaders))),
							A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(cardSpacing)
								]),
							A2(
								$elm$core$List$map,
								leader,
								A2(
									$elm$core$Maybe$withDefault,
									_List_fromArray(
										[
											nullLeader(1)
										]),
									$elm$core$List$tail(leaders))))
						])) : A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								A2(
									$elm$core$Basics$min,
									$elm$core$Basics$round(w * 0.8),
									(leadersPerRow * cardWidth) + (leadersPerRow * cardSpacing)))),
							$mdgriffith$elm_ui$Element$centerX
						]),
					A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(cardSpacing)
							]),
						A2($elm$core$List$map, leader, leaders)))
				]));
	});
var $author$project$Pages$Whoweare$mainText = F2(
	function (shared, animateSelf) {
		var w = shared.width;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(25),
					$mdgriffith$elm_ui$Element$padding(25),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class('clip_top')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_bottom' : 'clip_bottom')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$gciBlue)
							]),
						$mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$class(
									animateSelf ? 'animate_clip_cover' : 'clip_cover')),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Palette$white)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraLight,
							$mdgriffith$elm_ui$Element$Region$heading(1),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Lg)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Where Innovation and Talent Integrate.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							A2($author$project$Palette$fontSize, device, $author$project$Palette$Sm),
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('mainText')),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Founded in 2006 in Colorado Springs, CO, GCI is an established Design & Manufacturing Engineering Solutions house for DoD electronic obsolescence and electronics in extreme environments. GCI’s team leverages decades of experience to generate innovative solutions for the most challenging electronics requirements.')
						]))
				]));
	});
var $author$project$Pages$Whoweare$view = F2(
	function (shared, model) {
		var w = shared.width;
		var h = shared.height;
		var device = shared.device._class;
		var isPhone = _Utils_eq(device, $mdgriffith$elm_ui$Element$Phone);
		var isTablet = _Utils_eq(device, $mdgriffith$elm_ui$Element$Tablet);
		var isMobile = isPhone || isTablet;
		return {
			attributes: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$Shared$navbar, model.localShared, $author$project$Pages$Whoweare$ModifyLocalShared)),
					$mdgriffith$elm_ui$Element$inFront(
					shared.contactDialogState.showContactUs ? A2($author$project$Shared$contactUs, model.localShared, $author$project$Pages$Whoweare$ModifyLocalShared) : $mdgriffith$elm_ui$Element$none)
				]),
			element: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Region$mainContent,
						$mdgriffith$elm_ui$Element$clip
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(50)
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Whoweare$head, shared, model),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paddingXY,
										isPhone ? 10 : 100,
										0),
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, $author$project$Palette$maxWidth, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$spacing(50)
									]),
								_List_fromArray(
									[
										A2(
										$author$project$Pages$Whoweare$mainText,
										shared,
										A2($author$project$Pages$Whoweare$shouldAnimate, 'mainText', model)),
										(!isPhone) ? A3(
										$author$project$Pages$Whoweare$core,
										shared,
										model.values,
										A2($author$project$Pages$Whoweare$shouldAnimate, 'core', model)) : $mdgriffith$elm_ui$Element$none
									])),
								A3(
								$author$project$Pages$Whoweare$leadership,
								shared,
								model,
								A2($author$project$Pages$Whoweare$shouldAnimate, 'leadership', model)),
								A3(
								$author$project$Pages$Whoweare$bottomButtons,
								shared,
								A2(
									$elm$core$List$filter,
									function (b) {
										return b.id > 0;
									},
									model.simpleBtnHoverTracker),
								A2($author$project$Pages$Whoweare$shouldAnimate, 'bottomButtons', model))
							])),
						A2($author$project$Shared$footer, model.localShared, $author$project$Pages$Whoweare$ModifyLocalShared)
					])),
			title: 'GCI - Reverse Engineering IC for Obsolescence and High Temperatures'
		};
	});
var $author$project$Pages$Whoweare$page = F2(
	function (shared, req) {
		return $author$project$Page$advanced(
			{
				init: $author$project$Pages$Whoweare$init(shared),
				subscriptions: $author$project$Pages$Whoweare$subscriptions,
				update: $author$project$Pages$Whoweare$update(shared),
				view: $author$project$Pages$Whoweare$view(shared)
			});
	});
var $author$project$Gen$Pages$pages = {
	electronics: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Electronics$page, $author$project$Gen$Model$Electronics, $author$project$Gen$Msg$Electronics),
	home_: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Home_$page, $author$project$Gen$Model$Home_, $author$project$Gen$Msg$Home_),
	ip: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Ip$page, $author$project$Gen$Model$Ip, $author$project$Gen$Msg$Ip),
	newsroom: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Newsroom$page, $author$project$Gen$Model$Newsroom, $author$project$Gen$Msg$Newsroom),
	notFound: A3($author$project$Gen$Pages$bundle, $author$project$Pages$NotFound$page, $author$project$Gen$Model$NotFound, $author$project$Gen$Msg$NotFound),
	obsolescence: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Obsolescence$page, $author$project$Gen$Model$Obsolescence, $author$project$Gen$Msg$Obsolescence),
	oil: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Oil$page, $author$project$Gen$Model$Oil, $author$project$Gen$Msg$Oil),
	papers: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Papers$page, $author$project$Gen$Model$Papers, $author$project$Gen$Msg$Papers),
	rnd: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Rnd$page, $author$project$Gen$Model$Rnd, $author$project$Gen$Msg$Rnd),
	terms: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Terms$page, $author$project$Gen$Model$Terms, $author$project$Gen$Msg$Terms),
	whoweare: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Whoweare$page, $author$project$Gen$Model$Whoweare, $author$project$Gen$Msg$Whoweare)
};
var $author$project$Gen$Pages$init = function (route) {
	switch (route.$) {
		case 'Electronics':
			return $author$project$Gen$Pages$pages.electronics.init(_Utils_Tuple0);
		case 'Home_':
			return $author$project$Gen$Pages$pages.home_.init(_Utils_Tuple0);
		case 'Ip':
			return $author$project$Gen$Pages$pages.ip.init(_Utils_Tuple0);
		case 'Newsroom':
			return $author$project$Gen$Pages$pages.newsroom.init(_Utils_Tuple0);
		case 'NotFound':
			return $author$project$Gen$Pages$pages.notFound.init(_Utils_Tuple0);
		case 'Obsolescence':
			return $author$project$Gen$Pages$pages.obsolescence.init(_Utils_Tuple0);
		case 'Oil':
			return $author$project$Gen$Pages$pages.oil.init(_Utils_Tuple0);
		case 'Papers':
			return $author$project$Gen$Pages$pages.papers.init(_Utils_Tuple0);
		case 'Rnd':
			return $author$project$Gen$Pages$pages.rnd.init(_Utils_Tuple0);
		case 'Terms':
			return $author$project$Gen$Pages$pages.terms.init(_Utils_Tuple0);
		default:
			return $author$project$Gen$Pages$pages.whoweare.init(_Utils_Tuple0);
	}
};
var $author$project$Storage$Address = F7(
	function (street, city, mapsLink, phone, phoneLink, email, emailLink) {
		return {city: city, email: email, emailLink: emailLink, mapsLink: mapsLink, phone: phone, phoneLink: phoneLink, street: street};
	});
var $author$project$Shared$CertificationItem = F2(
	function (src, description) {
		return {description: description, src: src};
	});
var $author$project$Storage$NavItem = F4(
	function (name, link, hovered, onClick) {
		return {hovered: hovered, link: link, name: name, onClick: onClick};
	});
var $author$project$Storage$SetContactUs = function (a) {
	return {$: 'SetContactUs', a: a};
};
var $author$project$Storage$Show = {$: 'Show'};
var $author$project$Shared$SocialMediaItem = F3(
	function (_char, hoverColor, link) {
		return {_char: _char, hoverColor: hoverColor, link: link};
	});
var $author$project$Storage$Url = function (a) {
	return {$: 'Url', a: a};
};
var $author$project$Shared$classifyDevice = function (window) {
	return {
		_class: function () {
			var width = window.width;
			var shortSide = A2($elm$core$Basics$min, window.width, window.height);
			var longSide = A2($elm$core$Basics$max, window.width, window.height);
			return (width <= 600) ? $mdgriffith$elm_ui$Element$Phone : (((width > 600) && (width <= 1200)) ? $mdgriffith$elm_ui$Element$Tablet : (((width > 1200) && (width <= 1920)) ? $mdgriffith$elm_ui$Element$Desktop : $mdgriffith$elm_ui$Element$BigDesktop));
		}(),
		orientation: (_Utils_cmp(window.width, window.height) < 0) ? $mdgriffith$elm_ui$Element$Portrait : $mdgriffith$elm_ui$Element$Landscape
	};
};
var $author$project$Storage$ContactDialogState = function (name) {
	return function (nameError) {
		return function (email) {
			return function (emailError) {
				return function (phone) {
					return function (phoneError) {
						return function (message) {
							return function (messageError) {
								return function (currentPage) {
									return function (send) {
										return function (showContactUs) {
											return {currentPage: currentPage, email: email, emailError: emailError, message: message, messageError: messageError, name: name, nameError: nameError, phone: phone, phoneError: phoneError, send: send, showContactUs: showContactUs};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded = A2($elm$core$Basics$composeR, $elm$json$Json$Decode$succeed, $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom);
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, pathDecoder, input);
			if (_v0.$ === 'Ok') {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_v1.$ === 'Ok') {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					var finalErr = _v1.a;
					return $elm$json$Json$Decode$fail(
						$elm$json$Json$Decode$errorToString(finalErr));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Storage$decoder = A2(
	$elm$json$Json$Decode$field,
	'contactDialogState',
	A2(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
		false,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'send',
			A2(
				$elm$json$Json$Decode$andThen,
				function (s) {
					switch (s) {
						case 'Waiting':
							return $elm$json$Json$Decode$succeed($author$project$Storage$Waiting);
						case 'Send':
							return $elm$json$Json$Decode$succeed($author$project$Storage$Send);
						case 'Ok':
							return $elm$json$Json$Decode$succeed($author$project$Storage$SendOk);
						case 'Error':
							return $elm$json$Json$Decode$succeed($author$project$Storage$SendError);
						default:
							return $elm$json$Json$Decode$fail('Invalid Send State');
					}
				},
				$elm$json$Json$Decode$string),
			A4(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
				'currentPage',
				$elm$json$Json$Decode$int,
				0,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'messageError',
					$elm$json$Json$Decode$bool,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'message',
						$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'phoneError',
							$elm$json$Json$Decode$bool,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'phone',
								$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'emailError',
									$elm$json$Json$Decode$bool,
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'email',
										$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'nameError',
											$elm$json$Json$Decode$bool,
											A3(
												$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
												'name',
												$elm$json$Json$Decode$string,
												$elm$json$Json$Decode$succeed($author$project$Storage$ContactDialogState)))))))))))));
var $author$project$Storage$init = $author$project$Storage$ContactDialogState('')(false)($elm$core$Maybe$Nothing)(false)($elm$core$Maybe$Nothing)(false)($elm$core$Maybe$Nothing)(false)(0)($author$project$Storage$Waiting)(false);
var $author$project$Storage$fromJson = function (json) {
	return A2(
		$elm$core$Result$withDefault,
		$author$project$Storage$init,
		A2($elm$json$Json$Decode$decodeValue, $author$project$Storage$decoder, json));
};
var $author$project$Shared$init = F2(
	function (_v0, flags) {
		var store = $author$project$Storage$fromJson(flags.storage);
		return _Utils_Tuple2(
			{
				address: A7($author$project$Storage$Address, '4815 List Drive, Suite 109', 'Colorado Springs, CO 80919', 'https://www.google.com/maps/place/Global+Circuit+Innovations/@38.9010033,-104.853527,17z/data=!3m1!4b1!4m5!3m4!1s0x871346a0f04367d1:0x112099ed55c03e4b!8m2!3d38.9010033!4d-104.8513383?hl=en', '+1 (719) 573 - 6777', 'tel:+17195736777', 'info@gci-global.com', 'mailto:info@gci-global.com'),
				certifications: _List_fromArray(
					[
						A2($author$project$Shared$CertificationItem, '/img/platinum_certified-v2_white.svg', 'AS9100:2016 - ISO 9001:2015 Certified'),
						A2($author$project$Shared$CertificationItem, '/img/ANAB-certified_white.svg', 'AS9100:2016 - ISO 9001:2015 Certified')
					]),
				contactDialogState: store,
				currentYear: flags.year,
				device: $author$project$Shared$classifyDevice(
					{height: flags.height, width: flags.width}),
				height: flags.height,
				navHoverTracker: _List_fromArray(
					[
						A4(
						$author$project$Storage$NavItem,
						'WHO WE ARE',
						'#',
						false,
						$author$project$Storage$Url('/whoweare')),
						A4(
						$author$project$Storage$NavItem,
						'WHAT WE DO',
						'#',
						false,
						$author$project$Storage$Url('/#whatwedo')),
						A4(
						$author$project$Storage$NavItem,
						'NEWSROOM',
						'#',
						false,
						$author$project$Storage$Url('/newsroom')),
						A4(
						$author$project$Storage$NavItem,
						'CONTACT US',
						'#',
						false,
						$author$project$Storage$SetContactUs(true))
					]),
				navbarDisplay: $author$project$Storage$Show,
				scrolledDistance: 0,
				showMobileNav: false,
				socialMedia: _List_fromArray(
					[
						A3(
						$author$project$Shared$SocialMediaItem,
						'\uF09A',
						A3($mdgriffith$elm_ui$Element$rgb255, 59, 89, 152),
						'https://www.facebook.com/globalcircuitinnovations'),
						A3(
						$author$project$Shared$SocialMediaItem,
						'\uF099',
						A3($mdgriffith$elm_ui$Element$rgb255, 29, 161, 242),
						'https://twitter.com/dieextraction'),
						A3(
						$author$project$Shared$SocialMediaItem,
						'\uF30C',
						A3($mdgriffith$elm_ui$Element$rgb255, 0, 119, 181),
						'https://www.linkedin.com/company/4804252')
					]),
				user: $elm$core$Maybe$Nothing,
				width: flags.width
			},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Effect$toCmd = F2(
	function (_v0, effect) {
		var fromSharedMsg = _v0.a;
		var fromPageMsg = _v0.b;
		switch (effect.$) {
			case 'None':
				return $elm$core$Platform$Cmd$none;
			case 'Cmd':
				var cmd = effect.a;
				return A2($elm$core$Platform$Cmd$map, fromPageMsg, cmd);
			case 'Shared':
				var msg = effect.a;
				return A2(
					$elm$core$Task$perform,
					fromSharedMsg,
					$elm$core$Task$succeed(msg));
			default:
				var list = effect.a;
				return $elm$core$Platform$Cmd$batch(
					A2(
						$elm$core$List$map,
						$author$project$Effect$toCmd(
							_Utils_Tuple2(fromSharedMsg, fromPageMsg)),
						list));
		}
	});
var $author$project$Main$init = F3(
	function (flags, url, key) {
		var _v0 = A2(
			$author$project$Shared$init,
			A3($author$project$Request$create, _Utils_Tuple0, url, key),
			flags);
		var shared = _v0.a;
		var sharedCmd = _v0.b;
		var _v1 = A4(
			$author$project$Gen$Pages$init,
			$author$project$Gen$Route$fromUrl(url),
			shared,
			url,
			key);
		var page = _v1.a;
		var effect = _v1.b;
		return _Utils_Tuple2(
			A4($author$project$Main$Model, url, key, shared, page),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($elm$core$Platform$Cmd$map, $author$project$Main$Shared, sharedCmd),
						A2(
						$author$project$Effect$toCmd,
						_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
						effect)
					])));
	});
var $author$project$Gen$Pages$subscriptions = function (model_) {
	switch (model_.$) {
		case 'Redirecting_':
			return F3(
				function (_v1, _v2, _v3) {
					return $elm$core$Platform$Sub$none;
				});
		case 'Electronics':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.electronics.subscriptions, params, model);
		case 'Home_':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.home_.subscriptions, params, model);
		case 'Ip':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.ip.subscriptions, params, model);
		case 'Newsroom':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.newsroom.subscriptions, params, model);
		case 'NotFound':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.notFound.subscriptions, params, model);
		case 'Obsolescence':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.obsolescence.subscriptions, params, model);
		case 'Oil':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.oil.subscriptions, params, model);
		case 'Papers':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.papers.subscriptions, params, model);
		case 'Rnd':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.rnd.subscriptions, params, model);
		case 'Terms':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.terms.subscriptions, params, model);
		default:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.whoweare.subscriptions, params, model);
	}
};
var $author$project$Shared$Google = function (a) {
	return {$: 'Google', a: a};
};
var $author$project$Shared$subscriptions = F2(
	function (_v0, _v1) {
		return $author$project$Ports$google($author$project$Shared$Google);
	});
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$Page,
				A4($author$project$Gen$Pages$subscriptions, model.page, model.shared, model.url, model.key)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$Shared,
				A2(
					$author$project$Shared$subscriptions,
					A3($author$project$Request$create, _Utils_Tuple0, model.url, model.key),
					model.shared))
			]));
};
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $author$project$Ports$onUrlChange = _Platform_outgoingPort(
	'onUrlChange',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Gen$Pages$update = F2(
	function (msg_, model_) {
		var _v0 = _Utils_Tuple2(msg_, model_);
		_v0$11:
		while (true) {
			switch (_v0.a.$) {
				case 'Electronics':
					if (_v0.b.$ === 'Electronics') {
						var msg = _v0.a.a;
						var _v1 = _v0.b;
						var params = _v1.a;
						var model = _v1.b;
						return A3($author$project$Gen$Pages$pages.electronics.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Home_':
					if (_v0.b.$ === 'Home_') {
						var msg = _v0.a.a;
						var _v2 = _v0.b;
						var params = _v2.a;
						var model = _v2.b;
						return A3($author$project$Gen$Pages$pages.home_.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Ip':
					if (_v0.b.$ === 'Ip') {
						var msg = _v0.a.a;
						var _v3 = _v0.b;
						var params = _v3.a;
						var model = _v3.b;
						return A3($author$project$Gen$Pages$pages.ip.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Newsroom':
					if (_v0.b.$ === 'Newsroom') {
						var msg = _v0.a.a;
						var _v4 = _v0.b;
						var params = _v4.a;
						var model = _v4.b;
						return A3($author$project$Gen$Pages$pages.newsroom.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'NotFound':
					if (_v0.b.$ === 'NotFound') {
						var msg = _v0.a.a;
						var _v5 = _v0.b;
						var params = _v5.a;
						var model = _v5.b;
						return A3($author$project$Gen$Pages$pages.notFound.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Obsolescence':
					if (_v0.b.$ === 'Obsolescence') {
						var msg = _v0.a.a;
						var _v6 = _v0.b;
						var params = _v6.a;
						var model = _v6.b;
						return A3($author$project$Gen$Pages$pages.obsolescence.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Oil':
					if (_v0.b.$ === 'Oil') {
						var msg = _v0.a.a;
						var _v7 = _v0.b;
						var params = _v7.a;
						var model = _v7.b;
						return A3($author$project$Gen$Pages$pages.oil.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Papers':
					if (_v0.b.$ === 'Papers') {
						var msg = _v0.a.a;
						var _v8 = _v0.b;
						var params = _v8.a;
						var model = _v8.b;
						return A3($author$project$Gen$Pages$pages.papers.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Rnd':
					if (_v0.b.$ === 'Rnd') {
						var msg = _v0.a.a;
						var _v9 = _v0.b;
						var params = _v9.a;
						var model = _v9.b;
						return A3($author$project$Gen$Pages$pages.rnd.update, params, msg, model);
					} else {
						break _v0$11;
					}
				case 'Terms':
					if (_v0.b.$ === 'Terms') {
						var msg = _v0.a.a;
						var _v10 = _v0.b;
						var params = _v10.a;
						var model = _v10.b;
						return A3($author$project$Gen$Pages$pages.terms.update, params, msg, model);
					} else {
						break _v0$11;
					}
				default:
					if (_v0.b.$ === 'Whoweare') {
						var msg = _v0.a.a;
						var _v11 = _v0.b;
						var params = _v11.a;
						var model = _v11.b;
						return A3($author$project$Gen$Pages$pages.whoweare.update, params, msg, model);
					} else {
						break _v0$11;
					}
			}
		}
		return F3(
			function (_v12, _v13, _v14) {
				return _Utils_Tuple2(model_, $author$project$Effect$none);
			});
	});
var $author$project$Ports$setCursor = _Platform_outgoingPort('setCursor', $elm$json$Json$Encode$int);
var $author$project$Shared$setPhoneCursor = F2(
	function (oldPhone, newPhone) {
		var two = function (a) {
			return a.b.b;
		};
		var parse = function (val) {
			return $elm$core$String$toList(
				A2(
					$elm$core$String$filter,
					$elm$core$Char$isDigit,
					A3($elm$core$String$replace, '+1', '', val)));
		};
		var one = function (a) {
			return a.b.a;
		};
		var index = function (a) {
			return a.a;
		};
		var _v0 = $elm$core$List$head(
			A2(
				$elm$core$List$filterMap,
				function (a) {
					return (!_Utils_eq(
						one(a),
						two(a))) ? $elm$core$Maybe$Just(
						index(a)) : $elm$core$Maybe$Nothing;
				},
				A2(
					$elm$core$List$indexedMap,
					$elm$core$Tuple$pair,
					A3(
						$elm$core$List$map2,
						$elm$core$Tuple$pair,
						parse(oldPhone),
						parse(newPhone)))));
		if (_v0.$ === 'Just') {
			var i = _v0.a;
			return (_Utils_cmp(
				$elm$core$String$length(oldPhone),
				$elm$core$String$length(newPhone)) > 0) ? $author$project$Ports$setCursor(
				function () {
					switch (i) {
						case 0:
							return 4;
						case 1:
							return 5;
						case 2:
							return 6;
						case 3:
							return 10;
						case 4:
							return 11;
						case 5:
							return 12;
						default:
							var n = i;
							return n + 10;
					}
				}()) : $author$project$Ports$setCursor(
				function () {
					switch (i) {
						case 0:
							return 5;
						case 1:
							return 6;
						case 2:
							return 10;
						case 3:
							return 11;
						case 4:
							return 12;
						default:
							var n = i;
							return n + 11;
					}
				}());
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Ports$signOut = _Platform_outgoingPort(
	'signOut',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $author$project$Shared$update = F3(
	function (_v0, msg, model) {
		if (msg.$ === 'UpdateModel') {
			var newModel = msg.a;
			var userWantsSignOut = function () {
				var _v2 = model.user;
				if (_v2.$ === 'Just') {
					var _v3 = newModel.user;
					if (_v3.$ === 'Just') {
						return false;
					} else {
						return true;
					}
				} else {
					return false;
				}
			}();
			var signOutUser = userWantsSignOut ? $author$project$Ports$signOut(_Utils_Tuple0) : $elm$core$Platform$Cmd$none;
			var oldPhone = model.contactDialogState.phone;
			var newSafeModel = _Utils_update(
				newModel,
				{
					user: userWantsSignOut ? $elm$core$Maybe$Nothing : model.user
				});
			var newPhone = newModel.contactDialogState.phone;
			return (!_Utils_eq(oldPhone, newPhone)) ? _Utils_Tuple2(
				newSafeModel,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A2(
							$author$project$Shared$setPhoneCursor,
							A2($elm$core$Maybe$withDefault, '', oldPhone),
							A2($elm$core$Maybe$withDefault, '', newPhone)),
							signOutUser
						]))) : ((newModel.contactDialogState.showContactUs && (!model.contactDialogState.showContactUs)) ? _Utils_Tuple2(
				newSafeModel,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$Ports$disableScrolling(true),
							signOutUser
						]))) : (((!newModel.contactDialogState.showContactUs) && model.contactDialogState.showContactUs) ? _Utils_Tuple2(
				newSafeModel,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$Ports$disableScrolling(false),
							signOutUser
						]))) : _Utils_Tuple2(
				newSafeModel,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[$elm$core$Platform$Cmd$none, signOutUser])))));
		} else {
			var idToken = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						user: $elm$core$Maybe$Just(idToken)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'ClickedLink':
				if (msg.a.$ === 'Internal') {
					var url = msg.a.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$browser$Browser$Navigation$pushUrl,
							model.key,
							$elm$url$Url$toString(url)));
				} else {
					var url = msg.a.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(url));
				}
			case 'ChangedUrl':
				var url = msg.a;
				if (!_Utils_eq(url.path, model.url.path)) {
					var _v1 = A4(
						$author$project$Gen$Pages$init,
						$author$project$Gen$Route$fromUrl(url),
						model.shared,
						url,
						model.key);
					var page = _v1.a;
					var effect = _v1.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{page: page, url: url}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$author$project$Effect$toCmd,
									_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
									effect),
									$author$project$Ports$onUrlChange(_Utils_Tuple0)
								])));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{url: url}),
						$author$project$Ports$onUrlChange(_Utils_Tuple0));
				}
			case 'Shared':
				var sharedMsg = msg.a;
				var _v2 = A3(
					$author$project$Shared$update,
					A3($author$project$Request$create, _Utils_Tuple0, model.url, model.key),
					sharedMsg,
					model.shared);
				var shared = _v2.a;
				var sharedCmd = _v2.b;
				var _v3 = A4(
					$author$project$Gen$Pages$init,
					$author$project$Gen$Route$fromUrl(model.url),
					shared,
					model.url,
					model.key);
				var page = _v3.a;
				var effect = _v3.b;
				return _Utils_eq(page, $author$project$Gen$Model$Redirecting_) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{page: page, shared: shared}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($elm$core$Platform$Cmd$map, $author$project$Main$Shared, sharedCmd),
								A2(
								$author$project$Effect$toCmd,
								_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
								effect)
							]))) : _Utils_Tuple2(
					_Utils_update(
						model,
						{shared: shared}),
					A2($elm$core$Platform$Cmd$map, $author$project$Main$Shared, sharedCmd));
			default:
				var pageMsg = msg.a;
				var _v4 = A5($author$project$Gen$Pages$update, pageMsg, model.page, model.shared, model.url, model.key);
				var page = _v4.a;
				var effect = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{page: page}),
					A2(
						$author$project$Effect$toCmd,
						_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
						effect));
		}
	});
var $mdgriffith$elm_ui$Element$FocusStyle = F3(
	function (borderColor, backgroundColor, shadow) {
		return {backgroundColor: backgroundColor, borderColor: borderColor, shadow: shadow};
	});
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 'FocusStyleOption', a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $author$project$View$toBrowserDocument = function (view) {
	return {
		body: _List_fromArray(
			[
				A3(
				$mdgriffith$elm_ui$Element$layoutWith,
				{
					options: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$focusStyle(
							A3($mdgriffith$elm_ui$Element$FocusStyle, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing))
						])
				},
				view.attributes,
				view.element)
			]),
		title: view.title
	};
};
var $author$project$Gen$Pages$view = function (model_) {
	switch (model_.$) {
		case 'Redirecting_':
			return F3(
				function (_v1, _v2, _v3) {
					return $author$project$View$none;
				});
		case 'Electronics':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.electronics.view, params, model);
		case 'Home_':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.home_.view, params, model);
		case 'Ip':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.ip.view, params, model);
		case 'Newsroom':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.newsroom.view, params, model);
		case 'NotFound':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.notFound.view, params, model);
		case 'Obsolescence':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.obsolescence.view, params, model);
		case 'Oil':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.oil.view, params, model);
		case 'Papers':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.papers.view, params, model);
		case 'Rnd':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.rnd.view, params, model);
		case 'Terms':
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.terms.view, params, model);
		default:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.whoweare.view, params, model);
	}
};
var $author$project$Main$view = function (model) {
	return $author$project$View$toBrowserDocument(
		A2(
			$author$project$View$map,
			$author$project$Main$Page,
			A4($author$project$Gen$Pages$view, model.page, model.shared, model.url, model.key)));
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{init: $author$project$Main$init, onUrlChange: $author$project$Main$ChangedUrl, onUrlRequest: $author$project$Main$ClickedLink, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (year) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (width) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (storage) {
							return A2(
								$elm$json$Json$Decode$andThen,
								function (height) {
									return $elm$json$Json$Decode$succeed(
										{height: height, storage: storage, width: width, year: year});
								},
								A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int));
						},
						A2($elm$json$Json$Decode$field, 'storage', $elm$json$Json$Decode$value));
				},
				A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int));
		},
		A2($elm$json$Json$Decode$field, 'year', $elm$json$Json$Decode$int)))({"versions":{"elm":"0.19.1"},"types":{"message":"Main.Msg","aliases":{"Gen.Pages.Msg":{"args":[],"type":"Gen.Msg.Msg"},"Url.Url":{"args":[],"type":"{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : String.String, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"},"Storage.Address":{"args":[],"type":"{ street : String.String, city : String.String, mapsLink : String.String, phone : String.String, phoneLink : String.String, email : String.String, emailLink : String.String }"},"Shared.CertificationItem":{"args":[],"type":"{ src : String.String, description : String.String }"},"Element.Color":{"args":[],"type":"Internal.Model.Color"},"Storage.ContactDialogState":{"args":[],"type":"{ name : String.String, nameError : Basics.Bool, email : Maybe.Maybe String.String, emailError : Basics.Bool, phone : Maybe.Maybe String.String, phoneError : Basics.Bool, message : Maybe.Maybe String.String, messageError : Basics.Bool, currentPage : Basics.Int, send : Storage.SendState, showContactUs : Basics.Bool }"},"Element.Device":{"args":[],"type":"{ class : Element.DeviceClass, orientation : Element.Orientation }"},"Shared.Model":{"args":[],"type":"{ scrolledDistance : Basics.Int, navbarDisplay : Storage.NavBarDisplay, address : Storage.Address, socialMedia : List.List Shared.SocialMediaItem, certifications : List.List Shared.CertificationItem, currentYear : Basics.Int, device : Element.Device, width : Basics.Int, height : Basics.Int, contactDialogState : Storage.ContactDialogState, showMobileNav : Basics.Bool, navHoverTracker : List.List Storage.NavItem, user : Maybe.Maybe String.String }"},"Storage.NavItem":{"args":[],"type":"{ name : String.String, link : String.String, hovered : Basics.Bool, onClick : Storage.BtnOptions }"},"Shared.SocialMediaItem":{"args":[],"type":"{ char : String.String, hoverColor : Element.Color, link : String.String }"},"Browser.Dom.Element":{"args":[],"type":"{ scene : { width : Basics.Float, height : Basics.Float }, viewport : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float }, element : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float } }"},"Shared.FormResponse":{"args":[],"type":"{ next : String.String, ok : Basics.Bool }"},"Pages.Newsroom.Post":{"args":[],"type":"{ id : Basics.Int, title : String.String, editTitle : Maybe.Maybe String.String, images : List.List String.String, editImages : List.List String.String, content : String.String, editContent : Maybe.Maybe String.String, posttime : String.String, editPosttime : Maybe.Maybe DatePicker.DatePicker, date : Maybe.Maybe Date.Date, viewNum : Basics.Int, state : Pages.Newsroom.PostState }"},"Swiper.Coords":{"args":[],"type":"{ clientX : Basics.Float, clientY : Basics.Float }"},"DatePicker.Model":{"args":[],"type":"{ open : Basics.Bool, forceOpen : Basics.Bool, focused : Maybe.Maybe Date.Date, inputText : Maybe.Maybe String.String, today : Date.Date }"},"Date.RataDie":{"args":[],"type":"Basics.Int"}},"unions":{"Main.Msg":{"args":[],"tags":{"ChangedUrl":["Url.Url"],"ClickedLink":["Browser.UrlRequest"],"Shared":["Shared.Msg"],"Page":["Gen.Pages.Msg"]}},"Basics.Int":{"args":[],"tags":{"Int":[]}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Gen.Msg.Msg":{"args":[],"tags":{"Electronics":["Pages.Electronics.Msg"],"Home_":["Pages.Home_.Msg"],"Ip":["Pages.Ip.Msg"],"Newsroom":["Pages.Newsroom.Msg"],"NotFound":["Pages.NotFound.Msg"],"Obsolescence":["Pages.Obsolescence.Msg"],"Oil":["Pages.Oil.Msg"],"Papers":["Pages.Papers.Msg"],"Rnd":["Pages.Rnd.Msg"],"Terms":["Pages.Terms.Msg"],"Whoweare":["Pages.Whoweare.Msg"]}},"Shared.Msg":{"args":[],"tags":{"UpdateModel":["Shared.Model"],"Google":["String.String"]}},"Url.Protocol":{"args":[],"tags":{"Http":[],"Https":[]}},"String.String":{"args":[],"tags":{"String":[]}},"Browser.UrlRequest":{"args":[],"tags":{"Internal":["Url.Url"],"External":["String.String"]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"Storage.BtnOptions":{"args":[],"tags":{"Url":["String.String"],"SetContactUs":["Basics.Bool"]}},"Internal.Model.Color":{"args":[],"tags":{"Rgba":["Basics.Float","Basics.Float","Basics.Float","Basics.Float"]}},"Element.DeviceClass":{"args":[],"tags":{"Phone":[],"Tablet":[],"Desktop":[],"BigDesktop":[]}},"List.List":{"args":["a"],"tags":{}},"Pages.Electronics.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"WindowResized":["Basics.Int","Basics.Int"],"ModifyLocalShared":["Shared.Model"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Home_.Msg":{"args":[],"tags":{"Scrolled":["Basics.Int"],"TestimonialSwiped":["Swiper.SwipeEvent"],"TestimonialLeft":[],"TestimonialRight":[],"GotMouse":["Pages.Home_.Direction"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"GotOnScreenItem":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"BoxHover":["Basics.Int"],"BoxUnHover":["Basics.Int"],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"VisibilityChanged":["Browser.Events.Visibility"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"InitBoxes":["()"],"Submited":["Result.Result Http.Error Shared.FormResponse"],"EasterEgg":[]}},"Pages.Ip.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"PatentActive":["Basics.Int"],"PatentDeactive":["Basics.Int"],"TrademarkActive":["Basics.Int"],"TrademarkDeactive":["Basics.Int"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"HideAirlock":["()"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Newsroom.Msg":{"args":[],"tags":{"Scrolled":["Basics.Int"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"OpenContactUs":[],"Submited":["Result.Result Http.Error Shared.FormResponse"],"GotPosts":["Result.Result Http.Error (List.List Pages.Newsroom.Post)"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"IdLoaded":["String.String"],"IdFailed":["String.String"],"MoveLeft":["Basics.Int"],"MoveRight":["Basics.Int"],"ImageSwiped":["Basics.Int","Swiper.SwipeEvent"],"Google":["String.String"],"GetImages":[],"GotImages":["Result.Result Http.Error (List.List String.String)"],"Edit":["Basics.Int"],"Add":["Basics.Int","String.String"],"Subtract":["Basics.Int","String.String"],"TitleChanged":["Basics.Int","String.String"],"ContentChanged":["Basics.Int","String.String"],"Cancel":[],"SetDatePicker":["Basics.Int","DatePicker.Msg"],"GetUpload":[],"GotUpload":["File.File"],"PublishPost":["Basics.Int"],"Reload":["Result.Result Http.Error ()"],"New":[],"GotDate":["Date.Date"],"Delete":["Basics.Int"],"CopyText":["String.String"],"AlertCopy":["Basics.Bool"],"ClearCopy":["()"],"CancelDelete":[],"AskDelete":["Basics.Int"]}},"Pages.NotFound.Msg":{"args":[],"tags":{"Scrolled":["Basics.Int"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"OpenContactUs":[],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Obsolescence.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"WindowResized":["Basics.Int","Basics.Int"],"ModifyLocalShared":["Shared.Model"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Oil.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"WindowResized":["Basics.Int","Basics.Int"],"ModifyLocalShared":["Shared.Model"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Papers.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"PaperActive":["Basics.Int"],"PaperDeactive":["Basics.Int"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"HideAirlock":["()"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Rnd.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"WindowResized":["Basics.Int","Basics.Int"],"ModifyLocalShared":["Shared.Model"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Terms.Msg":{"args":[],"tags":{"Scrolled":["Basics.Int"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"OpenContactUs":[],"GotTerms":["Result.Result Http.Error String.String"],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Pages.Whoweare.Msg":{"args":[],"tags":{"OpenVimeo":[],"CloseVimeo":[],"SimpleBtnHover":["Basics.Int"],"SimpleBtnUnHover":["Basics.Int"],"Scrolled":["Basics.Int"],"GotElement":["String.String","Result.Result Browser.Dom.Error Browser.Dom.Element"],"OpenContactUs":[],"LeaderActive":["Basics.Int"],"LeaderDeactive":["Basics.Int"],"ValueActive":["Basics.Int"],"ValueDeactive":["Basics.Int"],"ModifyLocalShared":["Shared.Model"],"WindowResized":["Basics.Int","Basics.Int"],"HideAirlock":["()"],"Submited":["Result.Result Http.Error Shared.FormResponse"]}},"Storage.NavBarDisplay":{"args":[],"tags":{"Enter":[],"Show":[],"Hide":[]}},"Element.Orientation":{"args":[],"tags":{"Portrait":[],"Landscape":[]}},"Storage.SendState":{"args":[],"tags":{"Waiting":[],"Send":[],"SendOk":[],"SendError":[]}},"Date.Date":{"args":[],"tags":{"RD":["Date.RataDie"]}},"DatePicker.DatePicker":{"args":[],"tags":{"DatePicker":["DatePicker.Model"]}},"Pages.Home_.Direction":{"args":[],"tags":{"Up":[],"Down":[],"Left":[],"Right":[]}},"Browser.Dom.Error":{"args":[],"tags":{"NotFound":["String.String"]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String.String"],"Timeout":[],"NetworkError":[],"BadStatus":["Basics.Int"],"BadBody":["String.String"]}},"File.File":{"args":[],"tags":{"File":[]}},"Basics.Float":{"args":[],"tags":{"Float":[]}},"DatePicker.Msg":{"args":[],"tags":{"CurrentDate":["Date.Date"],"ChangeFocus":["Date.Date"],"Pick":["Date.Date"],"Text":["String.String"],"SubmitText":[],"Focus":[],"Blur":[],"MouseDown":[],"MouseUp":[]}},"Pages.Newsroom.PostState":{"args":[],"tags":{"Idle":[],"Editing":[]}},"Result.Result":{"args":["error","value"],"tags":{"Ok":["value"],"Err":["error"]}},"Swiper.SwipeEvent":{"args":[],"tags":{"TouchStart":["Swiper.Coords"],"TouchEnd":["Swiper.Coords"]}},"Browser.Events.Visibility":{"args":[],"tags":{"Visible":[],"Hidden":[]}}}}})}});}(this));